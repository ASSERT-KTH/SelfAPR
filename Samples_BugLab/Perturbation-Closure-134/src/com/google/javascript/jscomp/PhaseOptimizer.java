[BugLab_Wrong_Literal]^private boolean loopMutex = true;^63^^^^^58^68^private boolean loopMutex = false;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [VARIABLES] 
[BugLab_Wrong_Literal]^private static boolean randomizeLoops = true;^70^^^^^65^75^private static boolean randomizeLoops = false;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [VARIABLES] 
[BugLab_Variable_Misuse]^this.compiler = myCompiler;^74^^^^^73^77^this.compiler = compiler;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] <init> [RETURN_TYPE] PerformanceTracker)   AbstractCompiler compiler PerformanceTracker tracker [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^this.name = currentPassName;^242^^^^^241^243^this.name = name;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^super ( sanityCheck.getName (  )  ) ;^264^^^^^262^267^super ( factory.getName (  )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] <init> [RETURN_TYPE] PassFactory)   AbstractCompiler myCompiler PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^this.myCompiler = compiler;^265^^^^^262^267^this.myCompiler = myCompiler;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] <init> [RETURN_TYPE] PassFactory)   AbstractCompiler myCompiler PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^this.factory = sanityCheck;^266^^^^^262^267^this.factory = factory;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] <init> [RETURN_TYPE] PassFactory)   AbstractCompiler myCompiler PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Literal]^randomizeLoops = false;^84^^^^^83^85^randomizeLoops = true;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizeLoops [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Literal]^boolean isCurrentLoopPopulated = true;^116^^^^^114^135^boolean isCurrentLoopPopulated = false;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^if  ( sanityCheck.isOneTimePass (  )  )  {^118^^^^^114^135^if  ( factory.isOneTimePass (  )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Literal]^isCurrentLoopPopulated = false;^128^^^^^114^135^isCurrentLoopPopulated = true;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^currentLoop.addLoopedPass ( sanityCheck ) ;^127^^^^^114^135^currentLoop.addLoopedPass ( factory ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^if  ( randomizeLoops )  {^119^^^^^114^135^if  ( isCurrentLoopPopulated )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Literal]^isCurrentLoopPopulated = true;^123^^^^^114^135^isCurrentLoopPopulated = false;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^addOneTimePass ( sanityCheck ) ;^125^^^^^114^135^addOneTimePass ( factory ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^if  ( randomizeLoops )  {^132^^^^^114^135^if  ( isCurrentLoopPopulated )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] consume [RETURN_TYPE] void   PassFactory> factories [VARIABLES] Loop  currentLoop  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^passes.add ( new PassFactoryDelegate ( compiler, sanityCheck )  ) ;^142^^^^^141^143^passes.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addOneTimePass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^passes.add ( new PassFactoryDelegate ( myCompiler, factory )  ) ;^142^^^^^141^143^passes.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addOneTimePass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^passes.add ( new PassFactoryDelegate ( factory, compiler )  ) ;^142^^^^^141^143^passes.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addOneTimePass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^this.sanityCheck = factory;^160^^^^^159^161^this.sanityCheck = sanityCheck;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] setSanityCheck [RETURN_TYPE] void   PassFactory sanityCheck [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^pass.process ( root, externs ) ;^168^^^^^166^173^pass.process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( currentTracer == null && passName == null ) ;^179^^^^^178^182^Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^Preconditions.checkState ( currentPassName == null && currentTracer == null ) ;^179^^^^^178^182^Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer == null || currentPassName == null ) ;^179^^^^^178^182^Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer != null && currentPassName == null ) ;^179^^^^^178^182^Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer == null && currentPassName != null ) ;^179^^^^^178^182^Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^currentPassName = name;^180^^^^^178^182^currentPassName = passName;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^currentTracer = newTracer ( name ) ;^181^^^^^178^182^currentTracer = newTracer ( passName ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] startPass [RETURN_TYPE] void   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( currentTracer != null && passName != null ) ;^188^^^^^187^201^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Argument_Swapping]^Preconditions.checkState ( currentPassName != null && currentTracer != null ) ;^188^^^^^187^201^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer != null || currentPassName != null ) ;^188^^^^^187^201^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer == null && currentPassName != null ) ;^188^^^^^187^201^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( currentTracer != null && currentPassName == null ) ;^188^^^^^187^201^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Variable_Misuse]^stopTracer ( currentTracer, passName ) ;^189^^^^^187^201^stopTracer ( currentTracer, currentPassName ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Argument_Swapping]^stopTracer ( currentPassName, currentTracer ) ;^189^^^^^187^201^stopTracer ( currentTracer, currentPassName ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Variable_Misuse]^String passToCheck = passName;^190^^^^^187^201^String passToCheck = currentPassName;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Argument_Swapping]^maybeSanityCheck ( root, externs ) ;^195^^^^^187^201^maybeSanityCheck ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] endPass [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  Exception  e  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  
[BugLab_Variable_Misuse]^if  ( factory != null )  {^207^^^^^206^210^if  ( sanityCheck != null )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] maybeSanityCheck [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^if  ( sanityCheck == null )  {^207^^^^^206^210^if  ( sanityCheck != null )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] maybeSanityCheck [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^sanityCheck.create ( myCompiler ) .process ( externs, root ) ;^208^^^^^206^210^sanityCheck.create ( compiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] maybeSanityCheck [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^sanityCheck.create ( compiler ) .process ( root, externs ) ;^208^^^^^206^210^sanityCheck.create ( compiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] maybeSanityCheck [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^sanityCheck.create ( externs ) .process ( compiler, root ) ;^208^^^^^206^210^sanityCheck.create ( compiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] maybeSanityCheck [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^return myCompiler.hasHaltingErrors (  ) ;^213^^^^^212^214^return compiler.hasHaltingErrors (  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] hasHaltingErrors [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^String comment = passToCheck + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^220^221^^^^219^226^String comment = passName + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^String comment = recentChange + ( passName.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^220^221^^^^219^226^String comment = passName + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^String comment = passName + ( recentChange.hasCodeChanged (  >>  )  ? " on recently changed AST" : "" ) ;^220^221^^^^219^226^String comment = passName + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^if  ( tracker == null )  {^222^^^^^219^226^if  ( tracker != null )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^tracker.recordPassStart ( name ) ;^223^^^^^219^226^tracker.recordPassStart ( passName ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^tracker.recordPassStart ( passToCheck ) ;^223^^^^^219^226^tracker.recordPassStart ( passName ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^return new Tracer ( "JSCompiler", passToCheck ) ;^225^^^^^219^226^return new Tracer ( "JSCompiler", comment ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] newTracer [RETURN_TYPE] Tracer   String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^long result = currentTracer.stop (  ) ;^229^^^^^228^233^long result = t.stop (  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] stopTracer [RETURN_TYPE] void   Tracer t String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  long  result  
[BugLab_Wrong_Operator]^if  ( tracker == null )  {^230^^^^^228^233^if  ( tracker != null )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] stopTracer [RETURN_TYPE] void   Tracer t String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  long  result  
[BugLab_Variable_Misuse]^tracker.recordPassStop ( name, result ) ;^231^^^^^228^233^tracker.recordPassStop ( passName, result ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] stopTracer [RETURN_TYPE] void   Tracer t String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  long  result  
[BugLab_Variable_Misuse]^tracker.recordPassStop ( passToCheck, result ) ;^231^^^^^228^233^tracker.recordPassStop ( passName, result ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] stopTracer [RETURN_TYPE] void   Tracer t String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  long  result  
[BugLab_Argument_Swapping]^tracker.recordPassStop ( result, passName ) ;^231^^^^^228^233^tracker.recordPassStop ( passName, result ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] stopTracer [RETURN_TYPE] void   Tracer t String passName [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  long  result  
[BugLab_Variable_Misuse]^logger.info ( passName ) ;^246^^^^^245^250^logger.info ( name ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^startPass ( passToCheck ) ;^247^^^^^245^250^startPass ( name ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^processInternal ( root, externs ) ;^248^^^^^245^250^processInternal ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^endPass ( root, externs ) ;^249^^^^^245^250^endPass ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^factory.create ( myCompiler ) .process ( root, root ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^factory.create ( compiler ) .process ( externs, root ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^factory.create ( myCompiler ) .process ( root, externs ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^factory.create ( root ) .process ( externs, myCompiler ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^String name = sanityCheck.getName (  ) ;^294^^^^^293^300^String name = factory.getName (  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( !myNames.contains ( passToCheck ) , "Already a pass with name '" + name + "' in this loop" ) ;^295^296^297^^^293^300^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '"  ||  name  ||  "' in this loop" ) ;^295^296^297^^^293^300^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '"  |  name + "' in this loop" ) ;^295^296^297^^^293^300^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^!myNames.contains ( passToCheck ) , "Already a pass with name '" + name + "' in this loop" ) ;^296^297^^^^293^300^!myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^myNames.add ( sanityCheck.getName (  )  ) ;^298^^^^^293^300^myNames.add ( factory.getName (  )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^myPasses.add ( new PassFactoryDelegate ( myCompiler, factory )  ) ;^299^^^^^293^300^myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^myPasses.add ( new PassFactoryDelegate ( factory, compiler )  ) ;^299^^^^^293^300^myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^myPasses.add ( new PassFactoryDelegate ( compiler, sanityCheck )  ) ;^299^^^^^293^300^myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^order.add ( name ) ;^308^^^^^305^311^order.add ( pass.name ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] getPassOrder [RETURN_TYPE] List   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Argument_Swapping]^order.add ( pass ) ;^308^^^^^305^311^order.add ( pass.name ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] getPassOrder [RETURN_TYPE] List   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Variable_Misuse]^return null;^310^^^^^305^311^return order;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] getPassOrder [RETURN_TYPE] List   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  
[BugLab_Wrong_Literal]^loopMutex = false;^315^^^^^300^330^loopMutex = true;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Variable_Misuse]^if  ( loopMutex )  {^316^^^^^301^331^if  ( randomizeLoops )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Variable_Misuse]^if  ( count++ > count )  {^327^^^^^312^342^if  ( count++ > MAX_LOOPS )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Wrong_Operator]^if  ( count++ == MAX_LOOPS )  {^327^^^^^312^342^if  ( count++ > MAX_LOOPS )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Variable_Misuse]^compiler.throwInternalError ( passName, null ) ;^328^^^^^313^343^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Variable_Misuse]^if  ( loopMutex )  {^342^^^^^327^357^if  ( randomizeLoops )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Wrong_Operator]^if  ( count++ >= MAX_LOOPS )  {^327^^^^^312^342^if  ( count++ > MAX_LOOPS )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Variable_Misuse]^compiler.throwInternalError ( passToCheck, null ) ;^328^^^^^313^343^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Argument_Swapping]^pass.process ( root, externs ) ;^334^^^^^319^349^pass.process ( externs, root ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Wrong_Literal]^loopMutex = true;^346^^^^^331^361^loopMutex = false;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Wrong_Literal]^int count = MAX_LOOPS;^325^^^^^310^340^int count = 0;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  myNames  Tracer  currentTracer  t  Node  externs  root  PerformanceTracker  tracker  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  CompilerPass  pass  AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  List  OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  
[BugLab_Wrong_Operator]^while  ( myPasses.size (  )  < 0 )  {^354^^^^^351^359^while  ( myPasses.size (  )  > 0 )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Random  random  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Wrong_Literal]^while  ( myPasses.size (  )  > -1 )  {^354^^^^^351^359^while  ( myPasses.size (  )  > 0 )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Random  random  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^mixedupPasses.add ( random.remove ( myPasses.nextInt ( myPasses.size (  )  )  )  ) ;^355^356^^^^351^359^mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Random  random  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^myPasses.remove ( myPasses.nextInt ( random.size (  )  )  )  ) ;^356^^^^^351^359^myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Random  random  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Variable_Misuse]^myPasses.addAll ( 1 ) ;^358^^^^^351^359^myPasses.addAll ( mixedupPasses ) ;^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Random  random  Tracer  currentTracer  t  PerformanceTracker  tracker  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Variable_Misuse]^if  ( pass.name.equals ( passToCheck )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^if  ( pass.equals ( pass.nameName )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Variable_Misuse]^if  ( passToCheck.equals ( passName )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^if  ( pass.name.name.equals ( passName )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^if  ( passName.name.equals ( pass )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^if  ( passName.equals ( pass.name )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  myCompiler  RecentChange  recentChange  boolean  isCurrentLoopPopulated  loopMutex  randomizeLoops  Set  myNames  Tracer  currentTracer  t  PerformanceTracker  tracker  NamedPass  pass  List  OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  String  OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  Logger  logger  PassFactory  factory  sanityCheck  int  MAX_LOOPS  count  
[BugLab_Argument_Swapping]^processInternal ( root, externs ) ;^248^^^^^245^250^processInternal ( externs, root ) ;^[CLASS] NamedPass  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] String  name  Node  externs  root  boolean  
[BugLab_Argument_Swapping]^endPass ( root, externs ) ;^249^^^^^245^250^endPass ( externs, root ) ;^[CLASS] NamedPass  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] String  name  Node  externs  root  boolean  
[BugLab_Variable_Misuse]^factory.create ( myCompiler ) .process ( externs, externs ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PassFactoryDelegate  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  myCompiler  boolean  PassFactory  factory  Node  externs  root  
[BugLab_Argument_Swapping]^factory.create ( myCompiler ) .process ( root, externs ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PassFactoryDelegate  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  myCompiler  boolean  PassFactory  factory  Node  externs  root  
[BugLab_Argument_Swapping]^factory.create ( externs ) .process ( myCompiler, root ) ;^271^^^^^270^272^factory.create ( myCompiler ) .process ( externs, root ) ;^[CLASS] PassFactoryDelegate  [METHOD] processInternal [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  myCompiler  boolean  PassFactory  factory  Node  externs  root  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '"  <=  name  <=  "' in this loop" ) ;^295^296^297^^^293^300^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] List  myPasses  Set  myNames  String  name  boolean  PassFactory  factory  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '"   instanceof   name + "' in this loop" ) ;^295^296^297^^^293^300^Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[CLASS] LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] List  myPasses  Set  myNames  String  name  boolean  PassFactory  factory  
[BugLab_Argument_Swapping]^myPasses.add ( new PassFactoryDelegate ( factory, compiler )  ) ;^299^^^^^293^300^myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[CLASS] LoopInternal  [METHOD] addLoopedPass [RETURN_TYPE] void   PassFactory factory [VARIABLES] List  myPasses  Set  myNames  String  name  boolean  PassFactory  factory  
[BugLab_Argument_Swapping]^order.add ( pass ) ;^308^^^^^305^311^order.add ( pass.name ) ;^[CLASS] LoopInternal  [METHOD] getPassOrder [RETURN_TYPE] List   [VARIABLES] NamedPass  pass  List  myPasses  order  Set  myNames  boolean  
[BugLab_Variable_Misuse]^return this;^310^^^^^305^311^return order;^[CLASS] LoopInternal  [METHOD] getPassOrder [RETURN_TYPE] List   [VARIABLES] NamedPass  pass  List  myPasses  order  Set  myNames  boolean  
[BugLab_Wrong_Literal]^loopMutex = false;^315^^^^^300^330^loopMutex = true;^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Variable_Misuse]^if  ( count++ > count )  {^327^^^^^312^342^if  ( count++ > MAX_LOOPS )  {^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Wrong_Operator]^if  ( count++ >= MAX_LOOPS )  {^327^^^^^312^342^if  ( count++ > MAX_LOOPS )  {^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Variable_Misuse]^pass.process ( externs, externs ) ;^334^^^^^319^349^pass.process ( externs, root ) ;^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Argument_Swapping]^pass.process ( root, externs ) ;^334^^^^^319^349^pass.process ( externs, root ) ;^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Wrong_Literal]^loopMutex = true;^346^^^^^331^361^loopMutex = false;^[CLASS] LoopInternal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] List  myPasses  order  Set  myNames  boolean  int  count  Node  externs  root  CompilerPass  pass  
[BugLab_Wrong_Operator]^while  ( myPasses.size (  )  >= 0 )  {^354^^^^^351^359^while  ( myPasses.size (  )  > 0 )  {^[CLASS] LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] List  mixedupPasses  myPasses  order  Set  myNames  boolean  Random  random  
[BugLab_Wrong_Literal]^while  ( myPasses.size (  )  > 1 )  {^354^^^^^351^359^while  ( myPasses.size (  )  > 0 )  {^[CLASS] LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] List  mixedupPasses  myPasses  order  Set  myNames  boolean  Random  random  
[BugLab_Argument_Swapping]^mixedupPasses.add ( random.remove ( myPasses.nextInt ( myPasses.size (  )  )  )  ) ;^355^356^^^^351^359^mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[CLASS] LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] List  mixedupPasses  myPasses  order  Set  myNames  boolean  Random  random  
[BugLab_Argument_Swapping]^myPasses.remove ( myPasses.nextInt ( random.size (  )  )  )  ) ;^356^^^^^351^359^myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[CLASS] LoopInternal  [METHOD] randomizePasses [RETURN_TYPE] void   [VARIABLES] List  mixedupPasses  myPasses  order  Set  myNames  boolean  Random  random  
[BugLab_Argument_Swapping]^if  ( passName.equals ( pass.name )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] NamedPass  pass  List  mixedupPasses  myPasses  optimalPasses  order  Set  myNames  String  passName  boolean  
[BugLab_Argument_Swapping]^if  ( pass.name.name.equals ( passName )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] NamedPass  pass  List  mixedupPasses  myPasses  optimalPasses  order  Set  myNames  String  passName  boolean  
[BugLab_Argument_Swapping]^if  ( pass.equals ( pass.nameName )  )  {^372^^^^^362^381^if  ( pass.name.equals ( passName )  )  {^[CLASS] LoopInternal  [METHOD] optimizePasses [RETURN_TYPE] void   [VARIABLES] NamedPass  pass  List  mixedupPasses  myPasses  optimalPasses  order  Set  myNames  String  passName  boolean  
