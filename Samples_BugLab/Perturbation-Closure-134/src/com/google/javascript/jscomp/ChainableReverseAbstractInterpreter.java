[buglab_swap_variables]^Preconditions.checkArgument ( lastLink.nextLink.nextLink == null ) ;^80^^^^^78^84^Preconditions.checkArgument ( lastLink.nextLink == null ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] append [RETURN_TYPE] ChainableReverseAbstractInterpreter   ChainableReverseAbstractInterpreter lastLink [VARIABLES] JSTypeRegistry  typeRegistry  boolean  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  value  
[buglab_swap_variables]^Preconditions.checkArgument ( lastLink == null ) ;^80^^^^^78^84^Preconditions.checkArgument ( lastLink.nextLink == null ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] append [RETURN_TYPE] ChainableReverseAbstractInterpreter   ChainableReverseAbstractInterpreter lastLink [VARIABLES] JSTypeRegistry  typeRegistry  boolean  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  value  
[buglab_swap_variables]^return condition.getPreciserScopeKnowingConditionOutcome ( firstLink, blindScope, outcome ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return firstLink.getPreciserScopeKnowingConditionOutcome (  blindScope, outcome ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return firstLink.getPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition,  outcome ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return firstLink.getPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return outcome.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, firstLink ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return blindScope.getPreciserScopeKnowingConditionOutcome ( condition, firstLink, outcome ) ;^98^99^^^^96^100^return firstLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] firstPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return condition != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( nextLink, blindScope, outcome )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome (  blindScope, outcome )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition,  outcome )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return outcome != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, nextLink )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition )  : blindScope;^108^109^^^^106^110^return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome )  : blindScope;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] nextPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  condition  String  value  FlowScope  blindScope  
[buglab_swap_variables]^StaticSlot<JSType> nameVar = node.getSlot ( scope.getString (  )  ) ;^120^^^^^105^135^StaticSlot<JSType> nameVar = scope.getSlot ( node.getString (  )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getTypeIfRefinable [RETURN_TYPE] JSType   Node node FlowScope scope [VARIABLES] JSTypeRegistry  typeRegistry  StaticSlot  nameVar  propVar  boolean  outcome  resultEqualsValue  JSType  nameVarType  propVarType  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^StaticSlot<JSType> propVar = qualifiedName.getSlot ( scope ) ;^135^^^^^120^150^StaticSlot<JSType> propVar = scope.getSlot ( qualifiedName ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getTypeIfRefinable [RETURN_TYPE] JSType   Node node FlowScope scope [VARIABLES] JSTypeRegistry  typeRegistry  StaticSlot  nameVar  propVar  boolean  outcome  resultEqualsValue  JSType  nameVarType  propVarType  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferSlotType ( type.getString (  ) , node ) ;^159^^^^^156^174^scope.inferSlotType ( node.getString (  ) , type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferSlotType ( node.getString (  )  ) ;^159^^^^^156^174^scope.inferSlotType ( node.getString (  ) , type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( origType, qualifiedName, type ) ;^168^^^^^156^174^scope.inferQualifiedSlot ( qualifiedName, origType, type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot (  origType, type ) ;^168^^^^^156^174^scope.inferQualifiedSlot ( qualifiedName, origType, type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName, type, origType ) ;^168^^^^^156^174^scope.inferQualifiedSlot ( qualifiedName, origType, type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName,  type ) ;^168^^^^^156^174^scope.inferQualifiedSlot ( qualifiedName, origType, type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName, origType ) ;^168^^^^^156^174^scope.inferQualifiedSlot ( qualifiedName, origType, type ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] declareNameInScope [RETURN_TYPE] void   FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^183^^^^^181^188^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  EnumElementType  enumElementType  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^248^^^^^246^253^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  EnumElementType  enumElementType  
[buglab_swap_variables]^if  ( restricted != null )  {^334^^^^^330^343^if  ( restrictedAlternate != null )  {^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  alternate  restricted  restrictedAlternate  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  
[buglab_swap_variables]^if  ( restrictedAlternateAlternate != null )  {^334^^^^^330^343^if  ( restrictedAlternate != null )  {^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  alternate  restricted  restrictedAlternate  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  
[buglab_swap_variables]^restricted = restricted.getLeastSupertype ( restrictedAlternate ) ;^338^^^^^330^343^restricted = restrictedAlternate.getLeastSupertype ( restricted ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  alternate  restricted  restrictedAlternate  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  
[buglab_swap_variables]^restricted = restrictedAlternateAlternate.getLeastSupertype ( restricted ) ;^338^^^^^330^343^restricted = restrictedAlternate.getLeastSupertype ( restricted ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  alternate  restricted  restrictedAlternate  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^360^^^^^349^365^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  value  EnumElementType  enumElementType  
[buglab_swap_variables]^return value.equals ( result )  == resultEqualsValue;^482^^^^^481^483^return result.equals ( value )  == resultEqualsValue;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] matchesExpectation [RETURN_TYPE] boolean   String result [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return result.equals ( resultEqualsValue )  == value;^482^^^^^481^483^return result.equals ( value )  == resultEqualsValue;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] matchesExpectation [RETURN_TYPE] boolean   String result [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return  ( resultEqualsValue.equals ( "object" )  || value.equals ( "function" )  )  == value ? getNativeType ( NO_OBJECT_TYPE )  : null;^504^505^^^^503^506^return  ( value.equals ( "object" )  || value.equals ( "function" )  )  == resultEqualsValue ? getNativeType ( NO_OBJECT_TYPE )  : null;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseNoObjectType [RETURN_TYPE] JSType   [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return ctorType && resultEqualsValue.isSubtype ( type )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  ctorType  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return resultEqualsValue && type.isSubtype ( ctorType )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  ctorType  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return type && ctorType.isSubtype ( resultEqualsValue )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  ctorType  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return restrictUndefinedVisitor == null ? null : type.visit ( type ) ;^545^^^^^544^546^return type == null ? null : type.visit ( restrictUndefinedVisitor ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedWithoutUndefined [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return restrictNullVisitor == null ? null : type.visit ( type ) ;^552^^^^^551^553^return type == null ? null : type.visit ( restrictNullVisitor ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedWithoutNull [RETURN_TYPE] JSType   JSType type [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return value == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( type, resultEqualsValue )  ) ;^584^585^586^^^582^587^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( resultEqualsValue, value )  ) ;^584^585^586^^^582^587^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor (  resultEqualsValue )  ) ;^584^585^586^^^582^587^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( value )  ) ;^584^585^586^^^582^587^return type == null ? null : type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^type.visit ( new RestrictByOneTypeOfResultVisitor ( resultEqualsValue, value )  ) ;^585^586^^^^582^587^type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^type.visit ( new RestrictByOneTypeOfResultVisitor (  resultEqualsValue )  ) ;^585^586^^^^582^587^type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^type.visit ( new RestrictByOneTypeOfResultVisitor ( value )  ) ;^585^586^^^^582^587^type.visit ( new RestrictByOneTypeOfResultVisitor ( value, resultEqualsValue )  ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getRestrictedByTypeOfResult [RETURN_TYPE] JSType   JSType type String value boolean resultEqualsValue [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  
[buglab_swap_variables]^return typeId.getNativeType ( typeRegistry ) ;^590^^^^^589^591^return typeRegistry.getNativeType ( typeId ) ;^[CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor  [METHOD] getNativeType [RETURN_TYPE] JSType   JSTypeNative typeId [VARIABLES] JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  String  qualifiedName  result  value  JSTypeNative  typeId  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^183^^^^^181^188^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] 1  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSType  type  boolean  EnumElementType  enumElementType  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^248^^^^^246^253^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] 2  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSType  type  boolean  EnumElementType  enumElementType  
[buglab_swap_variables]^if  ( restricted != null )  {^334^^^^^330^343^if  ( restrictedAlternate != null )  {^[CLASS] RestrictByTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSType  alternate  restricted  restrictedAlternate  boolean  
[buglab_swap_variables]^if  ( restrictedAlternateAlternate != null )  {^334^^^^^330^343^if  ( restrictedAlternate != null )  {^[CLASS] RestrictByTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSType  alternate  restricted  restrictedAlternate  boolean  
[buglab_swap_variables]^restricted = restricted.getLeastSupertype ( restrictedAlternate ) ;^338^^^^^330^343^restricted = restrictedAlternate.getLeastSupertype ( restricted ) ;^[CLASS] RestrictByTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSType  alternate  restricted  restrictedAlternate  boolean  
[buglab_swap_variables]^restricted = restrictedAlternateAlternate.getLeastSupertype ( restricted ) ;^338^^^^^330^343^restricted = restrictedAlternate.getLeastSupertype ( restricted ) ;^[CLASS] RestrictByTypeOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] UnionType  type  JSType  alternate  restricted  restrictedAlternate  boolean  
[buglab_swap_variables]^if  ( enumElementType != null && type.getPrimitiveType (  ) .equals ( type )  )  {^360^^^^^349^365^if  ( type != null && enumElementType.getPrimitiveType (  ) .equals ( type )  )  {^[CLASS] RestrictByTypeOfResultVisitor  [METHOD] caseEnumElementType [RETURN_TYPE] JSType   EnumElementType enumElementType [VARIABLES] JSType  type  boolean  EnumElementType  enumElementType  
[buglab_swap_variables]^return value.equals ( result )  == resultEqualsValue;^482^^^^^481^483^return result.equals ( value )  == resultEqualsValue;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] matchesExpectation [RETURN_TYPE] boolean   String result [VARIABLES] boolean  resultEqualsValue  String  result  value  
[buglab_swap_variables]^return result.equals ( resultEqualsValue )  == value;^482^^^^^481^483^return result.equals ( value )  == resultEqualsValue;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] matchesExpectation [RETURN_TYPE] boolean   String result [VARIABLES] boolean  resultEqualsValue  String  result  value  
[buglab_swap_variables]^return  ( resultEqualsValue.equals ( "object" )  || value.equals ( "function" )  )  == value ? getNativeType ( NO_OBJECT_TYPE )  : null;^504^505^^^^503^506^return  ( value.equals ( "object" )  || value.equals ( "function" )  )  == resultEqualsValue ? getNativeType ( NO_OBJECT_TYPE )  : null;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] caseNoObjectType [RETURN_TYPE] JSType   [VARIABLES] boolean  resultEqualsValue  String  result  value  
[buglab_swap_variables]^return ctorType && resultEqualsValue.isSubtype ( type )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  resultEqualsValue  String  result  value  JSType  ctorType  
[buglab_swap_variables]^return resultEqualsValue && type.isSubtype ( ctorType )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  resultEqualsValue  String  result  value  JSType  ctorType  
[buglab_swap_variables]^return type && ctorType.isSubtype ( resultEqualsValue )  ? ctorType : null;^527^^^^^524^530^return resultEqualsValue && ctorType.isSubtype ( type )  ? ctorType : null;^[CLASS] RestrictByOneTypeOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  boolean  resultEqualsValue  String  result  value  JSType  ctorType  
