[buglab_swap_variables]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return prototypeCount + refCount + objLitCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^for  ( nnt i = 0, i = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^for  ( int i = 0 = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return a2.compareTo ( a1.oldName.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^NodeTraversal.traverse ( externs, compiler, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NodeTraversal.traverse (  externs, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a.oldName.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NameGenerator nameGen = new NameGenerator ( reservedCharacters, "", reservedNames ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NameGenerator nameGen = new NameGenerator (  "", reservedCharacters ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^NameGenerator nameGen = new NameGenerator ( reservedNames, "" ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^reservedNames.add ( a.newName.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^debug.append ( a ) .append ( " => " ) .append ( a.oldName.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^debug.append ( a.newName ) .append ( " => " ) .append ( a.oldName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^debug.append ( a.oldName.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^if  ( a != a.newNameull && n != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^if  ( a.newName != null && a != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^changed = oldName || !a.newName.equals ( changed ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^n.setString ( a ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^Property a = oldName.get ( properties ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^n.setString ( a.newName.newName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[buglab_swap_variables]^if  ( prevName.contains ( reservedNames )  )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^String prevName = prop.lookupNewName ( prevUsedRenameMap.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^String prevName = prop.oldName.lookupNewName ( prevUsedRenameMap ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^String prevName = prevUsedRenameMap.lookupNewName ( prop ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^processPrototypeParent (  t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^processPrototypeParent ( paren t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^markPrototypePropertyCandidate ( key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^properties.put (  prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^properties.put ( prop, name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^properties.put ( name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put ( p.newName.oldName, p ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put ( p.oldName.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put ( p.newName, p.oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put (  p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put ( p.oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^map.put ( p, p.oldName.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[buglab_swap_variables]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^for  ( nnt i = 0, i = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^for  ( int i = 0 = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[buglab_swap_variables]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[buglab_swap_variables]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[buglab_swap_variables]^return a1.oldName.oldName.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[buglab_swap_variables]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[buglab_swap_variables]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^processPrototypeParent (  t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^processPrototypeParent ( paren t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate ( dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate ( key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate (  input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^markPrototypePropertyCandidate ( key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^getProperty ( n.getString (  )  ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[buglab_swap_variables]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[buglab_swap_variables]^properties.put ( prop, name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[buglab_swap_variables]^properties.put (  prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[buglab_swap_variables]^properties.put ( name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
