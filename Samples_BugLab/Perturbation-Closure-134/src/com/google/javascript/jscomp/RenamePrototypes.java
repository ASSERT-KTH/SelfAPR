[BugLab_Wrong_Literal]^this.prototypeCount = prototypeCount;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^this.objLitCount = ;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^this.refCount = prototypeCount;^83^^^^^78^85^this.refCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return objLitCount + objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return prototypeCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return prototypeCount + objLitCount + objLitCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^return prototypeCount  >=  objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( refCount > 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount > 0 || this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount >= 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount > 0 && this.objLitCount > 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^if  ( this.prototypeCount > refCount && this.objLitCount == refCount )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^if  ( this.prototypeCount >  && this.objLitCount ==  )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( refCount > 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.objLitCount > 0 || this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.objLitCount >= 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( this.objLitCount > 0 && this.prototypeCount != 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^if  ( this.objLitCount > refCount && this.prototypeCount == refCount )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^if  ( this.objLitCount > objLitCount && this.prototypeCount == objLitCount )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^return canRenamePrototypeProperty (  )  || canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return true;^108^^^^^105^128^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return false;^113^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return false;^117^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( Character.isUpperCase ( ch )  && !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return false;^124^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( refCountnt i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( int i = 0, refCount = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( int i = 0, n = newName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^for  ( oldNament i = 0, n = i.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^for  ( int i = 0, oldName = n.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^for  ( int i = 0, n = oldName.length (  ) ; i <= n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^char ch = oldName.charAt ( refCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^char ch = newName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^for  ( int i = n, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^char ch = oldName.charAt ( prototypeCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return true;^127^^^^^105^128^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return true;^133^^^^^130^144^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return false;^138^^^^^130^144^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Literal]^return true;^143^^^^^130^144^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^int n1 = a2.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^int n2 = a1.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( refCount != n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( n1 != refCount )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( n1 == n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return prototypeCount - n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return n2 - prototypeCount;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^return n2  <=  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return refCount - n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return n2 - refCount;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^return n2  >>  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return oldName.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return a1.oldName.compareTo ( oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return a2.oldName.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return a2.oldName.oldName.compareTo ( a1 ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^return a1.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( externs, compiler, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, n, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a.canRename (  )  || !reservedNames.contains ( a.oldName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^reservedNames.add ( newName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a.oldName.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^if  ( a.canRename (  )  && !reservedNames.contains ( oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a.canRename (  )  || !reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^reservedNames.add ( oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a.oldName.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^if  ( a.canRename (  )  && !reservedNames.contains ( newName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^reservedNames.add ( oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a.oldName.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( prevUsedRenameMap == null )  {^227^^^^^212^242^if  ( prevUsedRenameMap != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^NameGenerator nameGen = new NameGenerator ( reservedCharacters, "", reservedNames ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^if  ( oldName == null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a.newName != null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^reservedNames.add ( oldName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a.newName.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^reservedNames.add ( newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^reservedNames.add ( a ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^debug.append ( newName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^debug.append ( a.oldName ) .append ( " => " ) .append ( oldName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^debug.append ( a.newName.oldName ) .append ( " => " ) .append ( a ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^debug.append ( a.newName ) .append ( " => " ) .append ( a.oldName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^debug.append ( oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^debug.append ( a ) .append ( " => " ) .append ( a.oldName.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^debug.append ( a.oldName.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "JS property assignments:\n"  !=  debug ) ;^244^^^^^229^259^compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Literal]^boolean changed = true;^247^^^^^232^262^boolean changed = false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^if  ( a.newName != null && a != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^if  ( a != a.newNameull && n != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a != null || a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a == null && a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^if  ( a != null && a.newName == null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^changed = changed || !a.newName.equals ( newName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Wrong_Operator]^changed = changed && !a.newName.equals ( oldName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^n.setString ( oldName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^changed = aggressiveRenaming || !a.newName.equals ( oldName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^String oldName = root.getString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^Property a = properties.get ( newName ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^Property a = oldName.get ( properties ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^n.setString ( a.newName.newName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Argument_Swapping]^n.setString ( a ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^if  ( aggressiveRenaming )  {^257^^^^^242^272^if  ( changed )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[BugLab_Variable_Misuse]^if  ( oldName != null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( prevName == null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( reservedNames.contains ( oldName )  )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^if  ( prevName.contains ( reservedNames )  )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^prop.newName = oldName;^276^^^^^268^280^prop.newName = prevName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^reservedNames.add ( oldName ) ;^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^String prevName = prevUsedRenameMap.lookupNewName ( oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^String prevName = prop.lookupNewName ( prevUsedRenameMap.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^String prevName = prop.oldName.lookupNewName ( prevUsedRenameMap ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^String prevName = prevUsedRenameMap.lookupNewName ( prevName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^String prevName = prevUsedRenameMap.lookupNewName ( prop ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  <= Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( prevName.equals ( "prototype" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^String s = parent.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( oldName.equals ( "prototype" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( !prototypeObjLits.contains ( parent )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  <= Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^child = parent.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  >= Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  < Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( map.getType (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map = map.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map = map.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( map.getType (  )  <= Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( map.getType (  )  != Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  < Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( Node key = n.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^for  ( Node n = map.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^key != null; n = key.getNext (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^prototypeObjLits.add ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map = map.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^switch  ( map.getType (  )  )  {^347^^^^^332^362^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^Property prop = properties.get ( s ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^Property prop = properties.get ( prevName ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( prop != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^prop = new Property ( prevName ) ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^prop = new Property ( s ) ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^properties.put ( s, prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^properties.put ( prop, name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^if  ( oldName != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Wrong_Operator]^if  ( p.newName == null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map.put ( prevName, p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map.put ( p.oldName, s ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^map.put ( p.newName.oldName, p ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Argument_Swapping]^map.put ( p.newName, p.oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^map.put ( s, p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return new VariableMap ( null ) ;^450^^^^^443^451^return new VariableMap ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^return new VariableMap ( 3 ) ;^450^^^^^443^451^return new VariableMap ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[BugLab_Variable_Misuse]^this.oldName = oldName;^79^^^^^78^85^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^this.objLitCount = refCount;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^return refCount + objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^return prototypeCount + refCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^return prototypeCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^return prototypeCount  &  objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( refCount > 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount > 0 || this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount >= 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.prototypeCount > 0 && this.objLitCount < 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^if  ( this.prototypeCount > 1 && this.objLitCount == 1 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( refCount > 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( this.objLitCount > 0 && refCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.objLitCount > 0 || this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.objLitCount < 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( this.objLitCount > 0 && this.prototypeCount != 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^if  ( this.objLitCount > refCount && this.prototypeCount == refCount )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^return canRenamePrototypeProperty (  )  || canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return true;^108^^^^^105^128^return false;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return false;^113^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return false;^117^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^if  ( Character.isUpperCase ( ch )  && !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return false;^124^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^for  ( prototypeCountnt i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^for  ( int i = 0, refCount = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^for  ( int i = 0, n = newName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^for  ( nnt i = 0, i = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^for  ( int i = 0, oldName = n.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Operator]^for  ( int i = 0, n = oldName.length (  ) ; i <= n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^for  ( int i = -1, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^char ch = oldName.charAt ( refCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^char ch = newName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^for  ( int i = objLitCount, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return true;^127^^^^^105^128^return false;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( null.getCodingConvention (  ) .isExported ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return true;^133^^^^^130^144^return false;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Argument_Swapping]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return false;^138^^^^^130^144^return true;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^if  ( 0.getCodingConvention (  ) .isPrivate ( oldName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Wrong_Literal]^return true;^143^^^^^130^144^return false;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[BugLab_Variable_Misuse]^int n1 = a2.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Variable_Misuse]^int n2 = a1.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Wrong_Operator]^if  ( n1 == n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Wrong_Operator]^return n2  ^  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Wrong_Operator]^return n2  <<  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^return a2.compareTo ( a1.oldName.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Variable_Misuse]^return a1.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Variable_Misuse]^return a1.oldName.compareTo ( 0 ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^return a1.oldName.oldName.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Argument_Swapping]^return a1.oldName.compareTo ( a2.oldName.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[BugLab_Variable_Misuse]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Argument_Swapping]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^child = parent.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  <= Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^String s = parent.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^if  ( !prototypeObjLits.contains ( parent )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^if  ( map.getType (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^map = map.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^map = map.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( map.getType (  )  >= Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( map.getType (  )  < Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^for  ( Node n = map.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Argument_Swapping]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Argument_Swapping]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^key != null; n = key.getNext (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^for  ( Node key = n.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^prototypeObjLits.add ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  < Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  > Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^map = map.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Variable_Misuse]^switch  ( map.getType (  )  )  {^347^^^^^332^362^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[BugLab_Argument_Swapping]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[BugLab_Argument_Swapping]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[BugLab_Wrong_Operator]^if  ( prop != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
