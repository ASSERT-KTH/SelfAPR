[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^parent.replaceChild ( n, new Node ( Token.GETPROP, right, left )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[buglab_swap_variables]^parent.replaceChild ( n, new Node ( Token.GETPROP,  right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[buglab_swap_variables]^parent.replaceChild ( n, new Node ( Token.GETPROP, left )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[buglab_swap_variables]^parent.replaceChild ( n, new Node ( Token. left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.GETPROP, left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[buglab_swap_variables]^parent.replaceChild ( left, new Node ( Token.GETPROP, n, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
