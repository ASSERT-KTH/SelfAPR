[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Wrong_Operator]^if  ( right.getType (  )  == Token.STRING || NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Wrong_Operator]^if  ( right.getType (  )  <= Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.GETPROP, right, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.GETPROP, left, parent )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Argument_Swapping]^parent.replaceChild ( n, new Node ( Token.GETPROP, right, left )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^n.removeChild ( right ) ;^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^53^^^^^45^59^n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Argument_Swapping]^parent.replaceChild ( left, new Node ( Token.GETPROP, n, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Argument_Swapping]^parent.replaceChild ( right, new Node ( Token.GETPROP, left, n )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.GETPROP, parent, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^Node right = parent.getNext (  ) ;^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^switch  ( right.getType (  )  )  {^46^^^^^45^59^switch  ( n.getType (  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^48^^^^^45^59^Node left = n.getFirstChild (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^Node right = right.getNext (  ) ;^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^NodeUtil.isValidPropertyName ( parent.getString (  )  )  )  {^51^^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[BugLab_Variable_Misuse]^parent.replaceChild ( right, new Node ( Token.GETPROP, left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
