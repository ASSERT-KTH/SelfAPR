[BugLab_Wrong_Literal]^this ( ast, ast.getSourceFile (  ) .getName (  ) , true ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^this ( ast, ast.getSourceFile (  ) .getName (  ) , findRequire ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^this ( isExtern, ast.getSourceFile (  ) .getName (  ) , ast ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.name = name;^59^^^^^57^61^this.name = inputName;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Literal]^this ( file, true ) ;^64^^^^^63^65^this ( file, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile)   JSSourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.isExtern = findRequire;^70^^^^^67^71^this.isExtern = isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.findRequire = isExtern;^133^^^^^132^136^this.findRequire = findRequire;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^return inputName;^75^^^^^74^76^return name;^[CLASS] CompilerInput DepsFinder  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^return compiler.getAstRoot ( ast ) ;^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( getAstRoot ( compiler )  == null )  {^105^^^^^104^113^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Literal]^DepsFinder deps = new DepsFinder ( compiler, false ) ;^106^^^^^104^113^DepsFinder deps = new DepsFinder ( compiler, true ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^requires.addAll ( deps.types.types ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^requires.addAll ( deps ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( getAstRoot ( compiler )  == null )  {^117^^^^^116^125^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Literal]^DepsFinder deps = new DepsFinder ( compiler, true ) ;^118^^^^^116^125^DepsFinder deps = new DepsFinder ( compiler, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^provides.addAll ( deps ) ;^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( name != null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( className == null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^types.add ( name ) ;^145^^^^^138^149^types.add ( className ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^String className = isExtern ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^String className = parent ? codingConvention.extractClassNameIfRequire ( n, findRequire ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^String className = findRequire ? parent.extractClassNameIfRequire ( n, codingConvention ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^: n.extractClassNameIfProvide ( codingConvention, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^: codingConvention.extractClassNameIfProvide ( parent, n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( this.module == null || module == null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( module == null && this.module == null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( module != null || this.module != null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( module == null || this.module != null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( module == null || this.module == null || this.module != module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Variable_Misuse]^return findRequire;^195^^^^^194^196^return isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( className == null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Variable_Misuse]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Variable_Misuse]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^String className = n ? codingConvention.extractClassNameIfRequire ( findRequire, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^String className = parent ? codingConvention.extractClassNameIfRequire ( n, findRequire ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^String className = findRequire ? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^139^^^^^138^149^switch  ( n.getType (  )  )  {^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^? parent.extractClassNameIfRequire ( n, codingConvention ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Variable_Misuse]^: codingConvention.extractClassNameIfProvide ( parent, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^: codingConvention.extractClassNameIfProvide ( parent, n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[BugLab_Argument_Swapping]^: n.extractClassNameIfProvide ( codingConvention, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
