[buglab_swap_variables]^this ( isExtern, ast.getSourceFile (  ) .getName (  ) , ast ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[buglab_swap_variables]^this (  ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[buglab_swap_variables]^this ( ast, ast.getSourceFile (  ) .getName (  )  ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[buglab_swap_variables]^return compiler.getAstRoot ( ast ) ;^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse (  getAstRoot ( compiler ) , deps ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, getAstRoot ( compiler )  ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^requires.addAll ( deps ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse (  getAstRoot ( compiler ) , deps ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, getAstRoot ( compiler )  ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^provides.addAll ( deps.types.types ) ;^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^provides.addAll ( deps ) ;^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = n ? codingConvention.extractClassNameIfRequire ( findRequire, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = codingConvention ? findRequire.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^: n.extractClassNameIfProvide ( codingConvention, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^: codingConvention.extractClassNameIfProvide (  parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^: codingConvention.extractClassNameIfProvide ( parent, n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^: codingConvention.extractClassNameIfProvide ( n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^Preconditions.checkArgument ( this.module == null || module == null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^String className = parent ? codingConvention.extractClassNameIfRequire ( n, findRequire ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^String className = findRequire ? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^: n.extractClassNameIfProvide ( codingConvention, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^: codingConvention.extractClassNameIfProvide (  parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^: parent.extractClassNameIfProvide ( n, codingConvention ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[buglab_swap_variables]^: codingConvention.extractClassNameIfProvide ( n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
