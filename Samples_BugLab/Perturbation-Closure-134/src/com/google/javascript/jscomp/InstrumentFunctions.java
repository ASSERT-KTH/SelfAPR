[buglab_swap_variables]^TextFormat.merge ( builder, readable ) ;^93^^^^^78^108^TextFormat.merge ( readable, builder ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^TextFormat.merge (  builder ) ;^93^^^^^78^108^TextFormat.merge ( readable, builder ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^TextFormat.merge ( readable ) ;^93^^^^^78^108^TextFormat.merge ( readable, builder ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node initCodeRoot = templateFilename.parseSyntheticCode ( compiler + ":init", initCodeSource ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node initCodeRoot = compiler.parseSyntheticCode ( initCodeSource + ":init", templateFilename ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init" ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node initCodeRoot = initCodeSource.parseSyntheticCode ( templateFilename + ":init", compiler ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new RemoveCallback ( declarationsToRemove )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new RemoveCallback ( declarationsToRemove )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( declarationsToRemove, root, new RemoveCallback ( compiler )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new RemoveCallback ( declarationsToRemove )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new InstrumentCallback (  )  ) ;^139^^^^^124^154^NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new InstrumentCallback (  )  ) ;^139^^^^^124^154^NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new InstrumentCallback (  )  ) ;^139^^^^^124^154^NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token. Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameStr ) , Node.newString ( appNameSetter )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token.EXPR_RESULT ) ;^145^^^^^130^160^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token. call ) ;^145^^^^^130^160^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( n.contains ( removable.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( body, compiler, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^NodeTraversal.traverse (  body, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token.EXPR_RESULT ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token. call ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^return new Node ( Token. Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^return new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^return new Node ( Token.CALL, Node.newString ( Token.NAME, functionId ) , Node.newNumber ( reportFunctionExitName )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^cfa.process ( null ) ;^265^^^^^262^277^cfa.process ( null, block ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[buglab_swap_variables]^int id = n.getFunctionId ( functionNames ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( reportFunctionName )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token. Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token.EXPR_RESULT ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node expr = new Node ( Token. call ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^( new InstrumentReturns ( body )  ) .process ( id ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore (  beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore ( expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^317^^^^^302^332^addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( definedFunctionName )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token. Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore (  beforeChild ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^addingRoot.addChildBefore ( expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( n.contains ( removable.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] RemoveCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  removable  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^NodeTraversal.traverse ( body, compiler, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[buglab_swap_variables]^NodeTraversal.traverse (  body, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[buglab_swap_variables]^Node expr = new Node ( Token.EXPR_RESULT ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[buglab_swap_variables]^Node expr = new Node ( Token. call ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[buglab_swap_variables]^return new Node ( Token. Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[buglab_swap_variables]^return new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[buglab_swap_variables]^return new Node ( Token.CALL, Node.newString ( Token.NAME, functionId ) , Node.newNumber ( reportFunctionExitName )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[buglab_swap_variables]^cfa.process ( null ) ;^265^^^^^262^277^cfa.process ( null, block ) ;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[buglab_swap_variables]^int id = n.getFunctionId ( functionNames ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token. Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node expr = new Node ( Token.EXPR_RESULT ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node expr = new Node ( Token. call ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( reportFunctionName )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^( new InstrumentReturns ( body )  ) .process ( id ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore (  beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore ( expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^317^^^^^302^332^addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token. Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore (  beforeChild ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^addingRoot.addChildBefore ( expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[buglab_swap_variables]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( definedFunctionName )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
