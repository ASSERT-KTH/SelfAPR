[BugLab_Variable_Misuse]^this.templateFilename = reportFunctionExitName;^88^^^^^73^103^this.templateFilename = templateFilename;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^this.appNameStr = reportFunctionName;^89^^^^^74^104^this.appNameStr = appNameStr;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^TextFormat.merge ( readable, 2 ) ;^93^^^^^78^108^TextFormat.merge ( readable, builder ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^TextFormat.merge ( builder, readable ) ;^93^^^^^78^108^TextFormat.merge ( readable, builder ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + reportFunctionExitName )  ) ;^95^96^97^^^80^110^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + templateFilename )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at "   instanceof   templateFilename )  ) ;^95^96^97^^^80^110^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + templateFilename )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + line )  ) ;^95^96^97^^^80^110^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + templateFilename )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at "  <  templateFilename )  ) ;^95^96^97^^^80^110^compiler.report ( JSError.make ( RhinoErrorReporter.PARSE_ERROR, "Error reading instrumentation template protobuf at " + templateFilename )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^initCodeSourceBuilder.append ( reportFunctionName ) .append ( "\n" ) ;^111^^^^^96^126^initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^initCodeSourceBuilder.append ( reportFunctionExitName ) .append ( "\n" ) ;^111^^^^^96^126^initCodeSourceBuilder.append ( line ) .append ( "\n" ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] <init> [RETURN_TYPE] Readable)   AbstractCompiler compiler FunctionNames functionNames String templateFilename String appNameStr Readable readable [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  initCodeSourceBuilder  Builder  builder  Instrumentation  template  List  declarationsToRemove  removable  Readable  readable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  IOException  e  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( initCode != null && initCodeRoot.getFirstChild (  )  != null )  {^130^^^^^115^145^if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( initCodeRoot != null || initCodeRoot.getFirstChild (  )  != null )  {^130^^^^^115^145^if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( initCodeRoot == null && initCodeRoot.getFirstChild (  )  != null )  {^130^^^^^115^145^if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  == null )  {^130^^^^^115^145^if  ( initCodeRoot != null && initCodeRoot.getFirstChild (  )  != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^initCode = initCode.removeChildren (  ) ;^131^^^^^116^146^initCode = initCodeRoot.removeChildren (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^initCode = externs.removeChildren (  ) ;^131^^^^^116^146^initCode = initCodeRoot.removeChildren (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^initCode = root.removeChildren (  ) ;^131^^^^^116^146^initCode = initCodeRoot.removeChildren (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", templateFilename ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node initCodeRoot = initCodeSource.parseSyntheticCode ( templateFilename + ":init", compiler ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node initCodeRoot = templateFilename.parseSyntheticCode ( compiler + ":init", initCodeSource ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node initCodeRoot = compiler.parseSyntheticCode ( initCodeSource + ":init", templateFilename ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node initCodeRoot = compiler.parseSyntheticCode ( reportFunctionName + ":init", initCodeSource ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", reportFunctionExitName ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", reportFunctionName ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node initCodeRoot = compiler.parseSyntheticCode ( reportFunctionExitName + ":init", initCodeSource ) ;^128^129^^^^113^143^Node initCodeRoot = compiler.parseSyntheticCode ( templateFilename + ":init", initCodeSource ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( null )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, declarationsToRemove, new RemoveCallback ( root )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new RemoveCallback ( declarationsToRemove )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( declarationsToRemove, root, new RemoveCallback ( compiler )  ) ;^137^138^^^^122^152^NodeTraversal.traverse ( compiler, root, new RemoveCallback ( declarationsToRemove )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, initCodeRoot, new InstrumentCallback (  )  ) ;^139^^^^^124^154^NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new InstrumentCallback (  )  ) ;^139^^^^^124^154^NodeTraversal.traverse ( compiler, root, new InstrumentCallback (  )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( templateFilename )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameStr ) , Node.newString ( appNameSetter )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, root ) ;^145^^^^^130^160^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, templateFilename ) , Node.newString ( appNameStr )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( reportFunctionExitName )  ) ;^142^143^144^^^127^157^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, templateFilename ) , Node.newString ( appNameStr )  ) ;^143^144^^^^128^158^Node.newString ( Token.NAME, appNameSetter ) , Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( reportFunctionName )  ) ;^144^^^^^129^159^Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildrenToFront ( root ) ;^148^^^^^133^163^addingRoot.addChildrenToFront ( expr ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( templateFilename )  ) ;^144^^^^^129^159^Node.newString ( appNameStr )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( root != null )  {^152^^^^^137^167^if  ( initCode != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( initCode == null )  {^152^^^^^137^167^if  ( initCode != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildrenToFront ( root ) ;^154^^^^^139^169^addingRoot.addChildrenToFront ( initCode ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  addingRoot  call  expr  externs  initCode  initCodeRoot  root  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^174^^^^^173^182^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^parent.getParent (  ) .removeChild ( n ) ;^178^^^^^173^182^parent.getParent (  ) .removeChild ( parent ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( removable.contains ( parent.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( n.contains ( removable.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, expr, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( body, compiler, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( !allPathsReturn ( expr )  )  {^230^^^^^227^236^if  ( !allPathsReturn ( body )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, expr ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, body ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^body.addChildToBack ( call ) ;^233^^^^^227^236^body.addChildToBack ( expr ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] AbstractCompiler  compiler  boolean  Node  body  call  expr  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.2 )  {^240^^^^^239^251^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.RETURN )  {^240^^^^^239^251^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( returnRhs.getType (  )  != Token.RETURN )  {^240^^^^^239^251^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node returnRhs = parent.removeFirstChild (  ) ;^245^^^^^239^251^Node returnRhs = n.removeFirstChild (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node returnRhs = returnRhs.removeFirstChild (  ) ;^245^^^^^239^251^Node returnRhs = n.removeFirstChild (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^246^^^^^239^251^if  ( returnRhs != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( returnRhs == null )  {^246^^^^^239^251^if  ( returnRhs != null )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^call.addChildToBack ( parent ) ;^247^^^^^239^251^call.addChildToBack ( returnRhs ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^n.addChildToFront ( returnRhs ) ;^249^^^^^239^251^n.addChildToFront ( call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  call  n  parent  returnRhs  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^return new Node ( Token.CALL, Node.newString ( Token.NAME, functionId ) , Node.newNumber ( reportFunctionExitName )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return new Node ( Token.CALL, Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( functionId )  ) ;^255^256^^^^253^257^Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  boolean  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^264^^^^^262^277^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^cfa.process ( null, returnPathsParent ) ;^265^^^^^262^277^cfa.process ( null, block ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( returnPathsParent.getType (  )  != Token.RETURN )  {^272^^^^^262^277^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.RETURN )  {^272^^^^^262^277^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Literal]^return true;^273^^^^^262^277^return false;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Wrong_Literal]^return false;^276^^^^^262^277^return true;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( expr.getType (  )  != Token.FUNCTION )  {^283^^^^^268^298^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^283^^^^^268^298^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( call.getType (  )  != Token.FUNCTION )  {^283^^^^^268^298^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int id = functionNames.getFunctionId ( parent ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^int id = n.getFunctionId ( functionNames ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int id = functionNames.getFunctionId ( call ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( type < 0 )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( id <= 0 )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Literal]^if  ( id < id )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( type )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, line ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( reportFunctionName )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node body = call.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( id )  ) ;^296^297^^^^281^311^Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newNumber ( type )  ) ;^297^^^^^282^312^Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^body.addChildToFront ( parent ) ;^299^^^^^284^314^body.addChildToFront ( expr ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( id )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, n ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node body = expr.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( type )  ) .process ( body ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node body = expr.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^289^319^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^289^319^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( id )  ) .process ( expr ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^( new InstrumentReturns ( body )  ) .process ( id ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( id )  ) .process ( parent ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( call )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( id == Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type > Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type != Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot = expr;^324^^^^^315^330^addingRoot = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^beforeChild = parent;^327^^^^^315^330^beforeChild = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node beforeChild = parent;^320^^^^^315^330^Node beforeChild = n;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^322^^^^^315^330^int type = ancestor.getType (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^for  ( Node ancestor : call.getAncestors (  )  )  {^321^^^^^315^330^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( parent, beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, parent ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^317^^^^^302^332^addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildToFront ( n ) ;^318^^^^^303^333^addingRoot.addChildToFront ( expr ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( id == Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type != Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot = parent;^324^^^^^309^339^addingRoot = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^beforeChild = parent;^327^^^^^312^342^beforeChild = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( type )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( definedFunctionName )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( parent ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node beforeChild = parent;^320^^^^^305^335^Node beforeChild = n;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^322^^^^^307^337^int type = ancestor.getType (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, templateFilename ) , Node.newNumber ( id )  ) ;^310^311^^^^295^325^Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node.newNumber ( type )  ) ;^311^^^^^296^326^Node.newNumber ( id )  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( expr ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildToFront ( parent ) ;^318^^^^^303^333^addingRoot.addChildToFront ( expr ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^for  ( Node ancestor : call.getAncestors (  )  )  {^321^^^^^306^336^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int type = expr.getType (  ) ;^322^^^^^307^337^int type = ancestor.getType (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( parent, beforeChild ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, parent ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( expr )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type <= Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot = n;^324^^^^^315^330^addingRoot = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^beforeChild = expr;^327^^^^^315^330^beforeChild = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^322^^^^^315^330^int type = ancestor.getType (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^321^^^^^315^330^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( n, beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, n ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^if  ( type <= Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^beforeChild = n;^327^^^^^312^342^beforeChild = ancestor;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( n ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^321^^^^^306^336^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^322^^^^^307^337^int type = ancestor.getType (  ) ;^[CLASS] InstrumentFunctions RemoveCallback InstrumentReturns InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  List  declarationsToRemove  removable  String  appNameSetter  appNameStr  definedFunctionName  initCodeSource  line  reportFunctionExitName  reportFunctionName  templateFilename  int  functionId  id  type  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^if  ( removable.contains ( parent.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] RemoveCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  removable  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( n.contains ( removable.getString (  )  )  )  {^175^^^^^173^182^if  ( removable.contains ( n.getString (  )  )  )  {^[CLASS] RemoveCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  removable  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^parent.getParent (  ) .removeChild ( n ) ;^178^^^^^173^182^parent.getParent (  ) .removeChild ( parent ) ;^[CLASS] RemoveCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  removable  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^174^^^^^173^182^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] RemoveCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  removable  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, expr, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( body, compiler, this ) ;^228^^^^^227^236^NodeTraversal.traverse ( compiler, body, this ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, expr ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, body ) ;^232^^^^^227^236^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[BugLab_Variable_Misuse]^body.addChildToBack ( call ) ;^233^^^^^227^236^body.addChildToBack ( expr ) ;^[CLASS] InstrumentReturns  [METHOD] process [RETURN_TYPE] void   Node body [VARIABLES] int  functionId  Node  body  call  expr  boolean  
[BugLab_Variable_Misuse]^if  ( returnRhs.getType (  )  != Token.RETURN )  {^240^^^^^239^251^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.RETURN )  {^240^^^^^239^251^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^Node returnRhs = parent.removeFirstChild (  ) ;^245^^^^^239^251^Node returnRhs = n.removeFirstChild (  ) ;^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^Node returnRhs = returnRhs.removeFirstChild (  ) ;^245^^^^^239^251^Node returnRhs = n.removeFirstChild (  ) ;^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^246^^^^^239^251^if  ( returnRhs != null )  {^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Wrong_Operator]^if  ( returnRhs == null )  {^246^^^^^239^251^if  ( returnRhs != null )  {^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^call.addChildToBack ( parent ) ;^247^^^^^239^251^call.addChildToBack ( returnRhs ) ;^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^n.addChildToFront ( returnRhs ) ;^249^^^^^239^251^n.addChildToFront ( call ) ;^[CLASS] InstrumentReturns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  functionId  Node  call  n  parent  returnRhs  
[BugLab_Variable_Misuse]^return new Node ( Token.CALL, Node.newString ( Token.NAME, 3 ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[BugLab_Argument_Swapping]^return new Node ( Token.CALL, Node.newString ( Token.NAME, functionId ) , Node.newNumber ( reportFunctionExitName )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[BugLab_Variable_Misuse]^return new Node ( Token.CALL, Node.newString ( Token.NAME, 1 ) , Node.newNumber ( functionId )  ) ;^254^255^256^^^253^257^return new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionExitName ) , Node.newNumber ( functionId )  ) ;^[CLASS] InstrumentReturns  [METHOD] newReportFunctionExitNode [RETURN_TYPE] Node   [VARIABLES] int  functionId  boolean  
[BugLab_Wrong_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^264^^^^^262^277^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Variable_Misuse]^cfa.process ( null, returnPathsParent ) ;^265^^^^^262^277^cfa.process ( null, block ) ;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Variable_Misuse]^Node returnPathsParent = null.getImplicitReturn (  ) .getValue (  ) ;^268^^^^^262^277^Node returnPathsParent = cfg.getImplicitReturn (  ) .getValue (  ) ;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Variable_Misuse]^if  ( returnPathsParent.getType (  )  != Token.RETURN )  {^272^^^^^262^277^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.RETURN )  {^272^^^^^262^277^if  ( n.getType (  )  != Token.RETURN )  {^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Wrong_Literal]^return true;^273^^^^^262^277^return false;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Variable_Misuse]^cfg.getDirectedPredNodes ( n )  )  {^270^^^^^262^277^cfg.getDirectedPredNodes ( returnPathsParent )  )  {^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Wrong_Literal]^return false;^276^^^^^262^277^return true;^[CLASS] InstrumentReturns  [METHOD] allPathsReturn [RETURN_TYPE] boolean   Node block [VARIABLES] ControlFlowAnalysis  cfa  DiGraphNode  pred  boolean  int  functionId  Node  block  n  returnPathsParent  ControlFlowGraph  cfg  
[BugLab_Variable_Misuse]^if  ( call.getType (  )  != Token.FUNCTION )  {^283^^^^^268^298^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.FUNCTION )  {^283^^^^^268^298^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int id = functionNames.getFunctionId ( parent ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^int id = n.getFunctionId ( functionNames ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int id = functionNames.getFunctionId ( call ) ;^287^^^^^272^302^int id = functionNames.getFunctionId ( n ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( type < 0 )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( id <= 0 )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Literal]^if  ( id < 1 )  {^288^^^^^273^303^if  ( id < 0 )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( type )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( reportFunctionName )  ) ;^295^296^297^^^280^310^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, reportFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node expr = new Node ( Token.EXPR_RESULT, parent ) ;^298^^^^^283^313^Node expr = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = call.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node.newNumber ( type )  ) ;^297^^^^^282^312^Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^body.addChildToFront ( parent ) ;^299^^^^^284^314^body.addChildToFront ( expr ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = expr.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^294^^^^^279^309^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( type )  ) .process ( body ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^289^319^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = call.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^289^319^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( id )  ) .process ( expr ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^( new InstrumentReturns ( body )  ) .process ( id ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node body = expr.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^304^^^^^289^319^Node body = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^( new InstrumentReturns ( id )  ) .process ( n ) ;^305^^^^^290^320^( new InstrumentReturns ( id )  ) .process ( body ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( id == Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type != Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot = parent;^324^^^^^315^330^addingRoot = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^beforeChild = expr;^327^^^^^315^330^beforeChild = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node beforeChild = parent;^320^^^^^315^330^Node beforeChild = n;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^322^^^^^315^330^int type = ancestor.getType (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^321^^^^^315^330^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^322^^^^^315^330^int type = ancestor.getType (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( parent, beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, n ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^317^^^^^302^332^addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildToFront ( n ) ;^318^^^^^303^333^addingRoot.addChildToFront ( expr ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type == Token.BLOCK && type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type != Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot = parent;^324^^^^^309^339^addingRoot = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^beforeChild = expr;^327^^^^^312^342^beforeChild = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( type )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, id ) , Node.newNumber ( definedFunctionName )  ) ;^309^310^311^^^294^324^Node call = new Node ( Token.CALL, Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( parent ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node beforeChild = expr;^320^^^^^305^335^Node beforeChild = n;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int type = expr.getType (  ) ;^322^^^^^307^337^int type = ancestor.getType (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, 0 ) , Node.newNumber ( id )  ) ;^310^311^^^^295^325^Node.newString ( Token.NAME, definedFunctionName ) , Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node.newNumber ( type )  ) ;^311^^^^^296^326^Node.newNumber ( id )  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( n ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( call )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildToFront ( parent ) ;^318^^^^^303^333^addingRoot.addChildToFront ( expr ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^321^^^^^306^336^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( parent, beforeChild ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, parent ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( expr )  )  {^315^^^^^300^330^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^315^330^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^beforeChild = parent;^327^^^^^315^330^beforeChild = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( n, beforeChild ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot.addChildBefore ( expr, parent ) ;^329^^^^^315^330^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^if  ( id == Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Wrong_Operator]^if  ( type < Token.BLOCK || type == Token.SCRIPT )  {^323^^^^^308^338^if  ( type == Token.BLOCK || type == Token.SCRIPT )  {^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^addingRoot = n;^324^^^^^309^339^addingRoot = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^beforeChild = n;^327^^^^^312^342^beforeChild = ancestor;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node beforeChild = parent;^320^^^^^305^335^Node beforeChild = n;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^322^^^^^307^337^int type = ancestor.getType (  ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Variable_Misuse]^Node expr = NodeUtil.newExpr ( expr ) ;^312^^^^^297^327^Node expr = NodeUtil.newExpr ( call ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
[BugLab_Argument_Swapping]^addingRoot.addChildBefore ( beforeChild, expr ) ;^329^^^^^314^344^addingRoot.addChildBefore ( expr, beforeChild ) ;^[CLASS] InstrumentCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  addingRoot  ancestor  beforeChild  body  call  expr  n  parent  JSModule  module  int  id  type  
