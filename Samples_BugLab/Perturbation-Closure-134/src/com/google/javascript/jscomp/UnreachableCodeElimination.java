[BugLab_Wrong_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^69^^^^^65^76^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( n == null )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( parent != null )  {^90^^^^^89^118^if  ( parent == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^93^^^^^89^118^if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( parent == null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == finallyBlockull || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  || ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null && !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock != null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^n = parent;^107^^^^^102^108^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^104^^^^^102^108^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( finallyBlock, body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, parent ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^parent.replaceChild ( body, n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^n = parent;^107^^^^^89^118^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^Node catchOrFinallyBlock = parent.getNext (  ) ;^99^^^^^89^118^Node catchOrFinallyBlock = body.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^Node finallyBlock = parent.getNext (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^Node body = parent.getFirstChild (  ) ;^98^^^^^89^118^Node body = n.getFirstChild (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^Node finallyBlock = n.getNext (  ) ;^100^^^^^89^118^Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^( parent == null || !finallyBlock.hasChildren (  )  )  )  {^103^^^^^89^118^( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^104^^^^^89^118^n.removeChild ( body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, parent ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^parent.replaceChild ( body, n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == parentull || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^n = n;^107^^^^^102^108^n = body;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( finallyBlock.getType (  )  == Token.TRY )  {^97^^^^^89^118^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, body ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^GraphNode<Node, Branch> gNode = n.getNode ( curCfg ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^GraphNode<Node, Branch> gNode = curCfg.getNode ( parent ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( gNode != null )  {^111^^^^^89^118^if  ( gNode == null )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( finallyBlock )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^if  ( n.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( gNode )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE && ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( gNode.getAnnotation (  )  == GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Wrong_Operator]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements || !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^removeDeadExprStatementSafely ( finallyBlock, parent ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^removeDeadExprStatementSafely ( n, finallyBlock ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( parent )  )  )  {^115^^^^^89^118^( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^removeDeadExprStatementSafely ( finallyBlock, parent ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^removeDeadExprStatementSafely ( n, finallyBlock ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Argument_Swapping]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.EMPTY && ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK || !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  < Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^121^122^^^^120^143^if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Variable_Misuse]^( parent.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^122^^^^^120^143^( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^129^^^^^120^143^switch  ( n.getType (  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Variable_Misuse]^NodeUtil.redeclareVarsInsideBranch ( parent ) ;^137^^^^^120^143^NodeUtil.redeclareVarsInsideBranch ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Variable_Misuse]^logger.fine ( "Removing " + parent.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^logger.fine ( "Removing "  >>  n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Wrong_Operator]^logger.fine ( "Removing "  |  n.toString (  )  ) ;^140^^^^^120^143^logger.fine ( "Removing " + n.toString (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( n, parent ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
