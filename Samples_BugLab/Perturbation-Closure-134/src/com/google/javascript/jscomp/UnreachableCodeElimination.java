[buglab_swap_variables]^cfa.process ( null.getRootNode (  )  ) ;^70^^^^^65^76^cfa.process ( null, scope.getRootNode (  )  ) ;^[CLASS] UnreachableCodeElimination  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  removeNoOpStatements  Scope  scope  NodeTraversal  t  ControlFlowGraph  curCfg  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^85^^^^^84^86^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] UnreachableCodeElimination  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  externs  root  
[buglab_swap_variables]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( n == finallyBlockull || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild ( body, n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild (  body ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^105^^^^^102^108^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild ( body, n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild (  body ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^105^^^^^89^118^parent.replaceChild ( n, body ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^GraphNode<Node, Branch> gNode = n.getNode ( curCfg ) ;^110^^^^^89^118^GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^if  ( removeNoOpStatements.getAnnotation (  )  != GraphReachability.REACHABLE || ( gNode && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^114^115^^^^89^118^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely (  parent ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely ( n ) ;^116^^^^^114^117^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely ( parent, n ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely (  parent ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^removeDeadExprStatementSafely ( n ) ;^116^^^^^89^118^removeDeadExprStatementSafely ( n, parent ) ;^[CLASS] UnreachableCodeElimination  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  NodeTraversal  t  ControlFlowGraph  curCfg  Node  body  catchOrFinallyBlock  finallyBlock  n  parent  GraphNode  gNode  Logger  logger  Deque  cfgStack  
[buglab_swap_variables]^NodeUtil.removeChild ( n, parent ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild (  n ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild ( parent ) ;^142^^^^^120^143^NodeUtil.removeChild ( parent, n ) ;^[CLASS] UnreachableCodeElimination  [METHOD] removeDeadExprStatementSafely [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  removeNoOpStatements  Logger  logger  Deque  cfgStack  ControlFlowGraph  curCfg  Node  n  parent  
