[buglab_swap_variables]^makeLocalNamesUnique ( isCallInLoop, newFnNode ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^makeLocalNamesUnique (  isCallInLoop ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^makeLocalNamesUnique ( newFnNode ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, newFnNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode,  this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, this.safeNameIdSupplier, callNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, newFnNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode,  this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, this.safeNameIdSupplier, callNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( args, newFnNode, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments (  args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, namesToAlias, args, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode,  namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( namesToAlias, args, newFnNode, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args,  compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( compiler, args, namesToAlias, newFnNode.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, compiler, namesToAlias.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments ( namesToAlias, args, newBlock ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments (  args, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments ( newBlock, namesToAlias, args ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments ( newBlock,  namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments ( newBlock, args ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node inlineResult = aliasAndInlineArguments ( args, newBlock, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Preconditions.checkState ( inlineResult == newBlock ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( resultName, newBlock, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns (  resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock, needsDefaultResult, labelName, resultName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock,  labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock, labelName, resultName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock, resultName,  needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( needsDefaultResult, resultName, labelName, newBlock ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^Node injectableBlock = replaceReturns ( newBlock, resultName, needsDefaultResult, labelName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[buglab_swap_variables]^fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^143^144^145^146^^141^148^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^new InlineRenamer ( isCallInLoop.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", compiler )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_" )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^NodeTraversal.traverse ( fnNode, compiler, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^NodeTraversal.traverse (  fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[buglab_swap_variables]^return "JSCompiler_inline_label_" + safeNameIdSupplier + "_" + name.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[buglab_swap_variables]^Node newNode = NodeUtil.newVarNode ( newValue, name ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node newNode = NodeUtil.newVarNode (  newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node newNode = NodeUtil.newVarNode ( name ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^newVars.add ( 0 ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject ( newArgMap, null, fnTemplateRoot ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject (  null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^if  ( name.contains ( namesToAlias )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^if  ( namesToAliassToAlias.contains ( name )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Preconditions.checkState ( fnTemplateRoot == result ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject ( argMap, null, fnTemplateRoot ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject (  null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^Preconditions.checkState ( fnTemplateRoot == result ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[buglab_swap_variables]^convertLastReturnToStatement ( resultName, block ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^convertLastReturnToStatement (  resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^convertLastReturnToStatement ( block ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak ( labelName, null, resultName, block ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak (  null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak ( block, null, labelName, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak ( block, null,  labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak ( block, null, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^replaceReturnWithBreak ( resultName, null, block, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^addDummyAssignment ( resultName, block ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^addDummyAssignment (  resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^addDummyAssignment ( block ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[buglab_swap_variables]^Node resultNode = createAssignStatementNode ( retVal, resultName ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^Node resultNode = createAssignStatementNode (  retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^Node resultNode = createAssignStatementNode ( resultName ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement ( resultName, ret ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement (  resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement ( ret ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^block.replaceChild ( resultNode, ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^block.replaceChild (  resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^block.replaceChild ( ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN, expression, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN,  expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[buglab_swap_variables]^Node assign = new Node ( Token. nameNode, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[buglab_swap_variables]^resultNode = createAssignStatementNode ( retVal, resultName ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^resultNode = createAssignStatementNode (  retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^resultNode = createAssignStatementNode ( resultName ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[buglab_swap_variables]^if  ( currenturrent.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^for  ( Node current = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak (  current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, resultName, current, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c,  resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current,  labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( resultName, current, c, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, labelName, resultName, current ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.addChildBefore ( breakNode, resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.addChildBefore (  breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.addChildBefore ( resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^Node breakNode = new Node ( Token.BREAK ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^Node breakNode = new Node ( Token. name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement ( resultName, current ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement (  resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^Node resultNode = getReplacementReturnStatement ( current ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.replaceChild ( breakNode, current ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.replaceChild (  breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^parent.replaceChild ( current ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^for  ( Node current = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak (  current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, resultName, current, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c,  resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current,  labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, current, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( resultName, current, c, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[buglab_swap_variables]^c = replaceReturnWithBreak ( c, labelName, resultName, current ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
