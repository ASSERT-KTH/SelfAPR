[BugLab_Variable_Misuse]^Node newFnNode = newBlock.cloneTree (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node newFnNode = newFnNode.cloneTree (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^makeLocalNamesUnique ( newBlock, isCallInLoop ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^makeLocalNamesUnique ( newFnNode, needsDefaultResult ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^makeLocalNamesUnique ( isCallInLoop, newFnNode ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newBlock ) ;^71^72^^^^56^86^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.findModifiedParameters ( inlineResult ) ;^72^^^^^57^87^FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newBlock, callNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, newFnNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, this.safeNameIdSupplier, callNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, newFnNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.getFunctionCallParameterMap ( newBlock, callNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, newBlock, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, this.safeNameIdSupplier, callNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^if  ( needsDefaultResult )  {^77^^^^^62^92^if  ( hasArgs )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newBlock, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, 1, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( compiler, args, namesToAlias, newFnNode.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, compiler, namesToAlias, args.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( namesToAlias, args, newFnNode, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, compiler, namesToAlias.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, null, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( args, newFnNode, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, namesToAlias, args, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node newBlock = NodeUtil.getFunctionBody ( inlineResult ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node newBlock = NodeUtil.getFunctionBody ( newBlock ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^if  ( needsDefaultResult )  {^86^^^^^71^101^if  ( hasArgs )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node inlineResult = aliasAndInlineArguments ( newFnNode, args, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node inlineResult = aliasAndInlineArguments ( args, newBlock, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node inlineResult = aliasAndInlineArguments ( newBlock, namesToAlias, args ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node inlineResult = aliasAndInlineArguments ( namesToAlias, args, newBlock ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newFnNode == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newBlock == newFnNode ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Preconditions.checkState ( inlineResult == newBlock ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Wrong_Operator]^Preconditions.checkState ( newBlock != inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node inlineResult = aliasAndInlineArguments ( newBlock, null, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Wrong_Operator]^Preconditions.checkState ( newBlock < inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^if  ( needsDefaultResult )  {^97^^^^^82^112^if  ( isCallInLoop )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^fixUnitializedVarDeclarations ( inlineResult ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^fixUnitializedVarDeclarations ( newFnNode ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^String labelName = getLabelNameForFunction ( resultName ) ;^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node injectableBlock = replaceReturns ( newFnNode, resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node injectableBlock = replaceReturns ( newBlock, labelName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node injectableBlock = replaceReturns ( newBlock, resultName, resultName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, isCallInLoop ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node injectableBlock = replaceReturns ( needsDefaultResult, resultName, labelName, newBlock ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node injectableBlock = replaceReturns ( newBlock, needsDefaultResult, labelName, resultName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node injectableBlock = replaceReturns ( newBlock, labelName, resultName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Node injectableBlock = replaceReturns ( newBlock, fnName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Argument_Swapping]^Node injectableBlock = replaceReturns ( newBlock, resultName, needsDefaultResult, labelName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newFnNode != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Wrong_Operator]^Preconditions.checkState ( injectableBlock == null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^return newFnNode;^106^^^^^91^121^return injectableBlock;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isLoopStructure ( name )  )  {^117^^^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( c )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^Node came = n.getFirstChild (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^Node nameame = n.getFirstChild (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( name )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^for  ( Node name = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Variable_Misuse]^fixUnitializedVarDeclarations ( name ) ;^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[BugLab_Argument_Swapping]^new InlineRenamer ( isCallInLoop.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", compiler )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( fnNode, compiler, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[BugLab_Wrong_Operator]^String name =  ( fnName == null && fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Wrong_Operator]^String name =  ( fnName != null || fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Variable_Misuse]^return "JSCompiler_inline_label_" + fnName + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Argument_Swapping]^return "JSCompiler_inline_label_" + safeNameIdSupplier + "_" + name.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Wrong_Operator]^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  <=  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Wrong_Operator]^return "JSCompiler_inline_label_"  &&  name  &&  "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Wrong_Operator]^return "JSCompiler_inline_label_"  &&  name + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[BugLab_Variable_Misuse]^if  ( null == null || namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( newValueamesToAlias == null || namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^if  ( namesToAliassToAlias == null || name.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^if  ( namesToAlias == null && namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^if  ( namesToAlias != null || namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( 2.contains ( name )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^if  ( name.contains ( namesToAlias )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node newNode = NodeUtil.newVarNode ( name, result ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^Node newNode = NodeUtil.newVarNode ( newValue, name ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^newVars.add ( 0, result ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^return newValue;^213^^^^^198^228^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^String name = 1.getKey (  ) ;^192^^^^^177^207^String name = entry.getKey (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node result = FunctionArgumentInjector.inject ( newValue, null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^Node result = FunctionArgumentInjector.inject ( newArgMap, null, fnTemplateRoot ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^if  ( namesToAliassToAlias.contains ( name )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node result = FunctionArgumentInjector.inject ( result, null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( result == newValue ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( fnTemplateRoot == result ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( result != fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^fnTemplateRoot.addChildToFront ( result ) ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^return newValue;^177^^^^^162^192^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node result = FunctionArgumentInjector.inject ( newValue, null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^Node result = FunctionArgumentInjector.inject ( argMap, null, fnTemplateRoot ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node result = FunctionArgumentInjector.inject ( result, null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( result == newValue ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( fnTemplateRoot == result ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( result > fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( 1.contains ( name )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Literal]^newVars.add ( 1, newNode ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^return newNode;^177^^^^^162^192^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node newValue = 0.getValue (  ) .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newValue == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( result >= fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Node newNode = NodeUtil.newVarNode ( name, newNode ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newValue == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( result <= fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( root ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( resultName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Node root = newRoot;^244^^^^^229^259^Node root = block;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Literal]^boolean hasReturnAtExit = true;^246^^^^^231^261^boolean hasReturnAtExit = false;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( newRoot, Token.RETURN ) ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( returnCount >= 0 )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Literal]^if  ( returnCount > returnCount )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^if  ( resultMustBeSet )  {^252^^^^^237^267^if  ( hasReturnAtExit )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^convertLastReturnToStatement ( root, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^convertLastReturnToStatement ( block, labelName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Argument_Swapping]^convertLastReturnToStatement ( resultName, block ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( returnCount == 0 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^root = root;^273^^^^^258^288^root = newRoot;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Node label = new Node ( Token.0 ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Node newRoot = new Node ( Token.4 ) ;^269^^^^^254^284^Node newRoot = new Node ( Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^replaceReturnWithBreak ( newRoot, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Argument_Swapping]^replaceReturnWithBreak ( resultName, null, block, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Argument_Swapping]^replaceReturnWithBreak ( block, null, labelName, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^label.addChildToFront ( root ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^label.addChildToBack ( root ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^newRoot.addChildrenToBack ( root ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^hasReturnAtExit = hasReturnAtExit ( newRoot ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^convertLastReturnToStatement ( newRoot, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^replaceReturnWithBreak ( root, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, resultName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( returnCount >= 0 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Literal]^if  ( returnCount > 1 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Node label = new Node ( Token.2 ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^replaceReturnWithBreak ( block, null, labelName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Argument_Swapping]^replaceReturnWithBreak ( labelName, null, resultName, block ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^hasReturnAtExit = hasReturnAtExit ( root ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^if  ( resultMustBeSet && !hasReturnAtExit && labelName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( resultMustBeSet || !hasReturnAtExit || resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( resultMustBeSet || !hasReturnAtExit && resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Wrong_Operator]^if  ( resultMustBeSet && !hasReturnAtExit && resultName == null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^addDummyAssignment ( block, labelName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Argument_Swapping]^addDummyAssignment ( resultName, block ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^addDummyAssignment ( newRoot, resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^return newRoot;^283^^^^^268^298^return root;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( retVal.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^Node resultNode = createAssignStatementNode ( resultName, node ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Argument_Swapping]^Node resultNode = createAssignStatementNode ( retVal, resultName ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^Node resultNode = createAssignStatementNode ( resultName, resultNode ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^node.addChildrenToBack ( retVal ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^Node ret = resultNode.getLastChild (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^Node ret = ret.getLastChild (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( resultNode.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ret.getType (  )  != Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Argument_Swapping]^Node resultNode = getReplacementReturnStatement ( resultName, ret ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^Node resultNode = getReplacementReturnStatement ( resultNode, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^if  ( ret == null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Wrong_Operator]^if  ( resultNode != null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^block.replaceChild ( block, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^block.replaceChild ( ret, block ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^block.removeChild ( resultNode ) ;^319^^^^^312^323^block.removeChild ( ret ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^block.replaceChild ( resultNode, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Argument_Swapping]^block.replaceChild ( resultNode, ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, assign, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, nameNode, assign ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Argument_Swapping]^Node assign = new Node ( Token.ASSIGN, expression, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, expression, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, nameNode, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Variable_Misuse]^return NodeUtil.newExpr ( nameNode ) ;^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[BugLab_Variable_Misuse]^if  ( retVal.hasChildren (  )  )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^retVal = retVal.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Wrong_Operator]^if  ( resultName != null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^if  ( resultNode == null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Wrong_Operator]^if  ( retVal != null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^resultNode = createAssignStatementNode ( resultName, resultNode ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Argument_Swapping]^resultNode = createAssignStatementNode ( retVal, resultName ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^if  ( resultNode != null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Wrong_Operator]^if  ( retVal == null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^resultNode = NodeUtil.newExpr ( resultNode ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Variable_Misuse]^return retVal;^370^^^^^346^371^return resultNode;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[BugLab_Wrong_Operator]^return  ( block.getLastChild (  ) .getType (  )  != Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[BugLab_Variable_Misuse]^if  ( resultNode.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.4 )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  == Token.FUNCTION && current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  <= Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^return resultNode;^395^^^^^391^396^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^return parent;^395^^^^^389^419^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^|| resultNode.getType (  )  == Token.EXPR_RESULT )  {^392^^^^^389^419^|| current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^if  ( parenturrent.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^if  ( c.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  < Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( resultNode, current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( c, parent, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( c, current, labelName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( labelName, current, resultName, c ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( c, labelName, resultName, current ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^for  ( Node resultNode = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( c, resultNode, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( resultName, current, c, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^if  ( name != null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^if  ( resultNode == null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^parent.addChildBefore ( parent, breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^parent.addChildBefore ( resultNode, parent ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^parent.addChildBefore ( breakNode, resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^current = parent;^410^^^^^389^419^current = breakNode;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node breakNode = new Node ( Token.BREAK, resultNode ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node resultNode = getReplacementReturnStatement ( parent, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node resultNode = getReplacementReturnStatement ( current, labelName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^Node resultNode = getReplacementReturnStatement ( resultName, current ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, resultName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isStatementBlock ( resultNode )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isStatementBlock ( name )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node resultNode = getReplacementReturnStatement ( resultNode, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^parent.replaceChild ( resultNode, breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^parent.replaceChild ( current, resultNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^parent.replaceChild ( breakNode, current ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^parent.addChildBefore ( resultNode, resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^for  ( Node resultNode = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^for  ( Node current = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Wrong_Operator]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( resultNode, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( c, resultNode, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( resultName, current, c, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( labelName, current, resultName, c ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( c, resultName, current, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^current = resultNode;^410^^^^^389^419^current = breakNode;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Argument_Swapping]^c = replaceReturnWithBreak ( c, labelName, resultName, current ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^Node breakNode = new Node ( Token.BREAK, parent ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^for  ( Node c = parent.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^c = replaceReturnWithBreak ( c, current, resultName, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[BugLab_Variable_Misuse]^return resultNode;^418^^^^^389^419^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
