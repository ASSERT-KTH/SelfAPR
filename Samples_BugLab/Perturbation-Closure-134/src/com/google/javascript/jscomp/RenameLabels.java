[BugLab_Wrong_Literal]^boolean referenced = true;^246^^^^^241^251^boolean referenced = false;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( names.size (  )  < id )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Argument_Swapping]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( names.size (  )  <= currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^LabelInfo li = new LabelInfo ( id ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Argument_Swapping]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^int currentDepth = current.renameMap.size (  <  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Literal]^int currentDepth = current.renameMap.size (  )  + id;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^String newName = getNameForId ( id ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^Preconditions.checkState ( !current.renameMap.containsKey ( newName )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^current.renameMap.put ( newName, li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Argument_Swapping]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  &&  name  &&  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  <=  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^int currentDepth = current.renameMap.size (  ==  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Literal]^int currentDepth = current.renameMap.size (  )  + ;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Argument_Swapping]^current.renameMap.put ( li, name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  <=  name  <=  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  ==  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Wrong_Literal]^return false;^139^^^^^117^140^return true;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^149^^^^^148^159^switch  ( node.getType (  )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Node nameNode = nameNode.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( node != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( newNameNode != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( nameNode == null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( li == null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^nameNode.setString ( name ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Literal]^li.referenced = false;^175^^^^^165^183^li.referenced = true;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^String newName = getNameForId ( id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^String name = node.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newName.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name.length (  )  < 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name.length (  )  == 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Literal]^Preconditions.checkState ( name.length (  )  != -1 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Node nameNode = parent.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( referenced )  {^196^^^^^190^216^if  ( li.referenced )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( newChild.getType (  )  != Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^node.removeChild ( parent ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, parent ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( !name.equals ( name )  )  {^198^^^^^190^216^if  ( !name.equals ( newName )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^nameNode.setString ( name ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^String newName = getNameForId ( id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^if  ( newChild.getType (  )  != Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^Node newChild = parent.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^node.removeChild ( parent ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^parent.replaceChild ( newChild, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^namespaceStack.peek (  ) .renameMap.remove ( newName ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^return names.get ( currentDepth - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^return names.get ( id  >>  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Literal]^return names.get ( id - currentDepth ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Operator]^return names.get ( id  &&  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Wrong_Literal]^return names.get ( id  ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^return namespaceStackspaceStack.peek (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  < Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Argument_Swapping]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^if  ( names.size (  )  <= currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Argument_Swapping]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^int currentDepth = current.renameMap.size (  >>  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Literal]^int currentDepth = current.renameMap.size (  )  ;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Variable_Misuse]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Variable_Misuse]^Preconditions.checkState ( !current.renameMap.containsKey ( newName )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Variable_Misuse]^current.renameMap.put ( newName, li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Argument_Swapping]^current.renameMap.put ( li, name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Argument_Swapping]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "   instanceof   name   instanceof   " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  ^  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^int currentDepth = current.renameMap.size (  ^  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Literal]^int currentDepth = current.renameMap.size (  )  + ;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Variable_Misuse]^compiler.addToDebugLog ( "label renamed: " + name + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( "label renamed: "  >  name  >  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Wrong_Literal]^return false;^139^^^^^117^140^return true;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[BugLab_Argument_Swapping]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[BugLab_Variable_Misuse]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[BugLab_Variable_Misuse]^Node nameNode = nameNode.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^if  ( node != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^if  ( newNameNode != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^if  ( nameNode == null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^if  ( li == null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^nameNode.setString ( name ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Literal]^li.referenced = false;^175^^^^^165^183^li.referenced = true;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^String name = node.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newName.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name.length (  )  >= 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Literal]^Preconditions.checkState ( name.length (  )  != -1 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^if  ( !name.equals ( name )  )  {^176^^^^^165^183^if  ( !name.equals ( newName )  )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name.length (  )  < 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^Node nameNode = parent.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^if  ( li.referenced.referenced )  {^196^^^^^190^216^if  ( li.referenced )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^if  ( newChild.getType (  )  < Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^node.removeChild ( parent ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( newChild, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^nameNode.setString ( name ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^String newName = getNameForId ( 4 ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Wrong_Operator]^if  ( newChild.getType (  )  != Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^Node newChild = parent.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^node.removeChild ( parent ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( newChild, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[BugLab_Argument_Swapping]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[BugLab_Wrong_Operator]^return names.get ( id  >>  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[BugLab_Wrong_Literal]^return names.get ( id  ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[BugLab_Wrong_Operator]^return names.get ( id  &&  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[BugLab_Argument_Swapping]^return namespaceStackspaceStack.peek (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[BugLab_Argument_Swapping]^return name.peek (  ) .renameMap.get ( namespaceStack ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[BugLab_Wrong_Literal]^boolean referenced = true;^246^^^^^241^251^boolean referenced = false;^[CLASS] LabelInfo  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
