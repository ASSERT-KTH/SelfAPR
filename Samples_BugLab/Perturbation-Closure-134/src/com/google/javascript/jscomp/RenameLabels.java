[buglab_swap_variables]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^current.renameMap.put ( li, name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^current.renameMap.put (  li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^current.renameMap.put ( name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[buglab_swap_variables]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^visitLabel (  parent ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^visitLabel ( node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^if  ( li.referenced.referenced )  {^196^^^^^190^216^if  ( li.referenced )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild (  newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild ( newChild, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild (  newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^return name.peek (  ) .renameMap.get ( namespaceStack ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[buglab_swap_variables]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^current.renameMap.put ( li, name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^current.renameMap.put (  li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^current.renameMap.put ( name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[buglab_swap_variables]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[buglab_swap_variables]^visitLabel (  parent ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[buglab_swap_variables]^visitLabel ( node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[buglab_swap_variables]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild (  newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild (  newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild ( newChild, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[buglab_swap_variables]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[buglab_swap_variables]^return namespaceStackspaceStack.peek (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[buglab_swap_variables]^return name.peek (  ) .renameMap.get ( namespaceStack ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
