[buglab_swap_variables]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[buglab_swap_variables]^ancestor.replaceChild (  rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[buglab_swap_variables]^ancestor.replaceChild ( last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[buglab_swap_variables]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) ,  t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^if  ( valueNodeameNode.isQualifiedName (  )  && n.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[buglab_swap_variables]^ancestor.replaceChild (  rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[buglab_swap_variables]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[buglab_swap_variables]^ancestor.replaceChild ( last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[buglab_swap_variables]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^if  ( nameNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^if  ( nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) ,  t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[buglab_swap_variables]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
