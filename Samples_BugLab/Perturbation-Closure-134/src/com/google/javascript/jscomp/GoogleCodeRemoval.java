[BugLab_Variable_Misuse]^this.parent = node;^89^^^^^86^98^this.parent = assignNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^Node ancestor = parent;^91^^^^^86^98^Node ancestor = assignNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^ancestor = parent.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^} while  ( parent.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^assignAncestors.add ( node ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^lastAncestor = parent.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^Node rhs = nameNode.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^Node last = rhs;^105^^^^^103^116^Node last = parent;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Argument_Swapping]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^lastAncestor.removeChild ( rhs ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^last = node;^113^^^^^103^116^last = ancestor;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^ancestor.replaceChild ( parent, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^ancestor.replaceChild ( last, parent ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( rhs.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( nameNode.isQualifiedName (  )  && rhs.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( valueNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^if  ( nameNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^if  ( ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && nameNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Wrong_Operator]^if  ( nameNode.isQualifiedName (  )  || valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^abstractMethodAssignmentNodes.add ( nodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^n.getFirstChild (  ) , parent, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^abstractMethodAssignmentNodes.add ( parentew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node parentameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = parent.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node rhsameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = node.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( node.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( node.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^ABSTRACT_METHOD_NAME.equals ( rhs.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^n.getFirstChild (  ) , node, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^if  ( nodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^if  ( ABSTRACT_METHOD_NAMEameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && n.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^abstractMethodAssignmentNodes.add ( rhsew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = rhs.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( rhs.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Variable_Misuse]^ABSTRACT_METHOD_NAME.equals ( node.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[BugLab_Variable_Misuse]^this.node = parent;^88^^^^^86^98^this.node = nameNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^this.parent = node;^89^^^^^86^98^this.parent = assignNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^ancestor = parent.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^} while  ( node.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^assignAncestors.add ( node ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^lastAncestor = parent.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[BugLab_Variable_Misuse]^Node rhs = nameNode.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^Node rhs = rhs.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^Node last = rhs;^105^^^^^103^116^Node last = parent;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^ancestor.replaceChild ( last, parent ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Argument_Swapping]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^lastAncestor.removeChild ( parent ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^last = rhs;^113^^^^^103^116^last = ancestor;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^lastAncestor.removeChild ( rhs ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^ancestor.replaceChild ( rhs, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^if  ( nameNode.isQualifiedName (  )  && parent.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^if  ( parentameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( nameNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Wrong_Operator]^if  ( nameNode.isQualifiedName (  )  || valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^n.getFirstChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^Node valueNodeameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = parent.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^if  ( valueNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Variable_Misuse]^ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( valueNodeameNode.isQualifiedName (  )  && n.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[BugLab_Argument_Swapping]^if  ( ABSTRACT_METHOD_NAMEameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && n.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
