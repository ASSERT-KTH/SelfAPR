[BugLab_Variable_Misuse]^if  ( name.length (  )  == 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( functionName.length (  )  >= 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( functionName.length (  )  <= 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( functionName.length (  )  > 0 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Literal]^if  ( functionName.length (  )  == 1 )  {^80^^^^^65^95^if  ( functionName.length (  )  == 0 )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^} else if  ( rhs.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.null )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  != Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String name = namer.getName ( rhs ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^String name = parent.getName ( namer ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String name = namer.getName ( n ) ;^92^^^^^77^107^String name = namer.getName ( parent ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( functionName, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( rhsame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^namer.setFunctionName ( n, name ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^namer.setFunctionName ( nameame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String name = namer.getName ( parent ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^String name = lhs.getName ( namer ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( functionName, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( parentame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^namer.setFunctionName ( nameame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  >= Token.NAME )  {^89^^^^^74^104^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String name = namer.getName ( rhs ) ;^87^^^^^72^102^String name = namer.getName ( lhs ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^Node lhs = n.getFirstChild (  ) ;^86^^^^^71^101^Node lhs = parent.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  < Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( rhsame, n ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^namer.setFunctionName ( n, name ) ;^88^^^^^73^103^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^namer.setFunctionName ( parentame, n ) ;^93^^^^^78^108^namer.setFunctionName ( name, n ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( rhs.getType (  )  <= Token.OBJECTLIT )  {^105^^^^^90^120^if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( parent, namer.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( rhs, namer.getName ( parent )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^nameObjectLiteralMethods ( lhs, namer.getName ( rhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^nameObjectLiteralMethods ( namer, rhs.getName ( lhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^nameObjectLiteralMethods ( rhs, lhs.getName ( namer )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^Node functionNameNode = rhs.getFirstChild (  ) ;^78^^^^^63^93^Node functionNameNode = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String functionName = parent.getString (  ) ;^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^103^^^^^88^118^Node lhs = n.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^Node rhs = parent.getNext (  ) ;^104^^^^^89^119^Node rhs = lhs.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^switch  ( rhs.getType (  )  )  {^70^^^^^55^85^switch  ( n.getType (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^String functionName = rhs.getString (  ) ;^79^^^^^64^94^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.ASSIGN )  {^81^^^^^66^96^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( rhs, namer.getName ( rhs )  ) ;^106^^^^^91^121^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FunctionNamer  namer  String  functionName  name  boolean  NodeTraversal  t  Node  functionNameNode  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 != 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^Preconditions.checkState ( objectLiteral.getChildCount (  )    instanceof   2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( valueNode.getChildCount (  )  % 2 == 0 ) ;^115^^^^^100^130^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( keyNode.getType (  )  > Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( keyNode.getType (  )  != Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( keyNode.getType (  )  < Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( type <= Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( type != Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^nameObjectLiteralMethods ( name, valueNode ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^124^154^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( context.isEmpty (  )  )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^namer.setFunctionName ( valueNode, name ) ;^135^^^^^120^150^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String functionName = valueNode.getString (  ) ;^133^^^^^118^148^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( name.isEmpty (  )  )  {^134^^^^^119^149^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^} else if  ( type != Token.OBJECTLIT )  {^137^^^^^122^152^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = context.getCombinedName ( namer, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = keyNode.getCombinedName ( context, namer.getName ( namer )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^int type = objectLiteral.getType (  ) ;^129^^^^^114^144^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^117^147^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( name, namer.getName ( keyNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( context, namer.getName ( valueNode )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( type >= Token.FUNCTION )  {^130^^^^^115^145^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^for  ( Node keyNode = valueNode.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^for  ( Node valueNode = objectLiteral.getFirstChild (  ) ;^117^^^^^102^132^for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( keyNode.getType (  )  <= Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( keyNode.getType (  )  != Token.STRING )  {^125^^^^^117^142^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( type != Token.FUNCTION )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^if  ( type <= Token.FUNCTION )  {^130^^^^^117^142^if  ( type == Token.FUNCTION )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.OBJECTLIT )  {^137^^^^^117^142^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^nameObjectLiteralMethods ( name, valueNode ) ;^139^^^^^117^142^nameObjectLiteralMethods ( valueNode, name ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( name.isEmpty (  )  )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^117^142^Node functionNameNode = valueNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String functionName = valueNode.getString (  ) ;^133^^^^^117^142^String functionName = functionNameNode.getString (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^namer.setFunctionName ( valueNode, name ) ;^135^^^^^117^142^namer.setFunctionName ( name, valueNode ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( functionName, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = namer.getCombinedName ( keyNode, namer.getName ( context )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = keyNode.getCombinedName ( context, namer.getName ( namer )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^int type = objectLiteral.getType (  ) ;^129^^^^^117^142^int type = valueNode.getType (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( name, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^String name = namer.getCombinedName ( context, namer.getName ( valueNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = context.getCombinedName ( namer, namer.getName ( keyNode )  ) ;^127^^^^^117^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( context.isEmpty (  )  )  {^134^^^^^117^142^if  ( functionName.isEmpty (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Wrong_Operator]^} else if  ( type != Token.OBJECTLIT )  {^137^^^^^117^142^} else if  ( type == Token.OBJECTLIT )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = objectLiteral.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^117^142^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^keyNode = valueNode.getNext (  ) .getNext (  )  )  {^119^^^^^104^134^keyNode = keyNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = objectLiteral.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^106^136^Node valueNode = keyNode.getNext (  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.STRING )  {^125^^^^^110^140^if  ( keyNode.getType (  )  == Token.STRING )  {^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
[BugLab_Argument_Swapping]^String name = namer.getCombinedName ( keyNode, namer.getName ( context )  ) ;^127^^^^^112^142^String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[CLASS] AnonymousFunctionNamingCallback  [METHOD] nameObjectLiteralMethods [RETURN_TYPE] void   Node objectLiteral String context [VARIABLES] FunctionNamer  namer  String  context  functionName  name  boolean  int  type  Node  functionNameNode  keyNode  objectLiteral  valueNode  
