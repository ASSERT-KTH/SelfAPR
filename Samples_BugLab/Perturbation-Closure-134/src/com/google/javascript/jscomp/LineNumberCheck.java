[BugLab_Wrong_Literal]^private boolean requiresLineNumbers = true;^36^^^^^31^41^private boolean requiresLineNumbers = false;^[CLASS] LineNumberCheck   [VARIABLES] 
[BugLab_Wrong_Literal]^requiresLineNumbers = true;^43^^^^^42^46^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^45^^^^^42^46^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] LineNumberCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  DiagnosticType  MISSING_LINE_INFO  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.SCRIPT )  {^51^^^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.SCRIPT )  {^51^^^^^48^55^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Literal]^requiresLineNumbers = false;^52^^^^^48^55^requiresLineNumbers = true;^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Literal]^return false;^54^^^^^48^55^return true;^[CLASS] LineNumberCheck  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.null )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.SCRIPT )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getLineno (  )  == -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  > -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Literal]^if  ( n.getLineno (  )  == - )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( MISSING_LINE_INFO, n, t, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^JSError.make ( n, t, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^JSError.make ( t, MISSING_LINE_INFO, n, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, MISSING_LINE_INFO, n, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Variable_Misuse]^JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^JSError.make ( MISSING_LINE_INFO, n, t, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  < -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Literal]^if  ( n.getLineno (  )  == -2 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Literal]^requiresLineNumbers = true;^59^^^^^57^69^requiresLineNumbers = false;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  != -1 )  {^61^^^^^57^69^if  ( n.getLineno (  )  == -1 )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.SCRIPT )  {^58^^^^^57^69^if  ( n.getType (  )  == Token.SCRIPT )  {^[CLASS] LineNumberCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  requiresLineNumbers  NodeTraversal  t  DiagnosticType  MISSING_LINE_INFO  Node  n  parent  
