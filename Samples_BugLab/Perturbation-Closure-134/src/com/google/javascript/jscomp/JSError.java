[buglab_swap_variables]^this ( arguments, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, sourceName ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^this (  ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^this ( sourceName, ( arguments != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, node ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, arguments, null, type ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1,  null, arguments ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null ) ;^184^185^186^187^^182^188^this ( sourceName, ( node != null )  ? node.getLineno (  )  : -1, ( node != null )  ? node.getCharno (  )  : -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] <init> [RETURN_TYPE] String[])   String sourceName Node node DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  node  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( null, -1, -1, arguments, null, type ) ;^70^^^^^69^71^return new JSError ( null, -1, -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( null, -1, -1,  null, arguments ) ;^70^^^^^69^71^return new JSError ( null, -1, -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( null, -1, -1, type, null ) ;^70^^^^^69^71^return new JSError ( null, -1, -1, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( charno, lineno, sourceName, type, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError (  lineno, charno, type, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, charno, lineno, type, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName,  charno, type, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, type, charno, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno,  type, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type, lineno, charno, sourceName, null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno,  null, arguments ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( arguments, lineno, charno, type, null, sourceName ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, type, null ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, arguments, null, type ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, arguments, charno, type, null, lineno ) ;^84^^^^^82^85^return new JSError ( sourceName, lineno, charno, type, null, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( charno, lineno, sourceName, type, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError (  lineno, charno, type, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, charno, lineno, type, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName,  charno, type, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, arguments, type, level, charno ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno,  type, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type, lineno, charno, sourceName, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno,  level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, level, charno, type, lineno, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, type,  arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, arguments, level, type ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, type, level ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, type, charno, lineno, level, arguments ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, lineno, charno, type, arguments, level ) ;^98^^^^^96^99^return new JSError ( sourceName, lineno, charno, type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName int lineno int charno CheckLevel level DiagnosticType type  arguments [VARIABLES] String  description  sourceName  String[]  arguments  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( arguments, n, type, sourceName ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError (  n, type, arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return argumentsew JSError ( sourceName, n, type, n ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName,  type, arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return typeew JSError ( sourceName, n, n, arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n,  arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n, arguments, type ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n, type ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type, n, sourceName, arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return sourceNameew JSError ( n, n, type, arguments ) ;^111^^^^^109^112^return new JSError ( sourceName, n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( level, n.getLineno (  ) , n.getCharno (  ) , type, sourceName, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError (  n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return levelew JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, n, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , arguments, level, type ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) ,  level, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , level, type, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type,  arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type, n.getLineno (  ) , n.getCharno (  ) , sourceName, level, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return argumentsew JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, n ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return typeew JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , n, level, arguments ) ;^125^126^^^^122^127^return new JSError ( sourceName, n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   String sourceName Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( level.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, t, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) ype, level, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return levelew JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, n, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) .getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , t, level, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) ,  level, arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type,  arguments ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, arguments, level ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , arguments, level, type ) ;^139^140^^^^137^141^return new JSError ( t.getSourceName (  ) , n.getLineno (  ) , n.getCharno (  ) , type, level, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n CheckLevel level DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return tew JSError ( n.getSourceName (  ) , n, type, arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , nype, arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) ,  type, arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return typeew JSError ( t.getSourceName (  ) , n, n, arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n,  arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return argumentsew JSError ( t.getSourceName (  ) , n, type, n ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( t.getSourceName (  ) , n, type ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( arguments.getSourceName (  ) , n, type, t ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^return new JSError ( type.getSourceName (  ) , n, t, arguments ) ;^153^^^^^151^154^return new JSError ( t.getSourceName (  ) , n, type, arguments ) ;^[CLASS] JSError  [METHOD] make [RETURN_TYPE] JSError   NodeTraversal t Node n DiagnosticType type  arguments [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  type  CheckLevel  level  Node  n  String  description  sourceName  String[]  arguments  int  charno  lineNumber  lineno  
[buglab_swap_variables]^if  ( charno != jsError.charno.charno )  {^240^^^^^225^255^if  ( charno != jsError.charno )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError != charno.charno )  {^240^^^^^225^255^if  ( charno != jsError.charno )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( charno != jsError )  {^240^^^^^225^255^if  ( charno != jsError.charno )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError != lineNumber.lineNumber )  {^243^^^^^228^258^if  ( lineNumber != jsError.lineNumber )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError.lineNumber != lineNumber )  {^243^^^^^228^258^if  ( lineNumber != jsError.lineNumber )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( !description.equals ( jsError )  )  {^246^^^^^231^261^if  ( !description.equals ( jsError.description )  )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( level != jsError.level.level )  {^249^^^^^234^264^if  ( level != jsError.level )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError.level != level )  {^249^^^^^234^264^if  ( level != jsError.level )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( sourceName != null ? !sourceName.equals ( jsError.sourceName.sourceName ) : jsError != null )  {^252^253^^^^237^267^if  ( sourceName != null ? !sourceName.equals ( jsError.sourceName ) : jsError.sourceName != null )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError != null ? !sourceName.equals ( sourceName.sourceName ) : jsError.sourceName != null )  {^252^253^^^^237^267^if  ( sourceName != null ? !sourceName.equals ( jsError.sourceName ) : jsError.sourceName != null )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( jsError.sourceName != null ? !sourceName.equals ( sourceName ) : jsError.sourceName != null )  {^252^253^^^^237^267^if  ( sourceName != null ? !sourceName.equals ( jsError.sourceName ) : jsError.sourceName != null )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^if  ( !type.equals ( jsError.type.type )  )  {^256^^^^^241^271^if  ( !type.equals ( jsError.type )  )  {^[CLASS] JSError  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  DiagnosticType  type  CheckLevel  level  Object  o  String  description  sourceName  int  charno  lineNumber  lineno  JSError  jsError  
[buglab_swap_variables]^result = 31 * description + result.hashCode (  ) ;^267^^^^^264^273^result = 31 * result + description.hashCode (  ) ;^[CLASS] JSError  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] String  description  sourceName  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  result  
[buglab_swap_variables]^result = 31 * sourceName +  ( result != null ? sourceName.hashCode (  )  : 0 ) ;^268^^^^^264^273^result = 31 * result +  ( sourceName != null ? sourceName.hashCode (  )  : 0 ) ;^[CLASS] JSError  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] String  description  sourceName  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  result  
[buglab_swap_variables]^result = 31 * lineNumber + result;^269^^^^^264^273^result = 31 * result + lineNumber;^[CLASS] JSError  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] String  description  sourceName  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  result  
[buglab_swap_variables]^result = 31 * level + result.hashCode (  ) ;^270^^^^^264^273^result = 31 * result + level.hashCode (  ) ;^[CLASS] JSError  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] String  description  sourceName  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  result  
[buglab_swap_variables]^result = 31 * charno + result;^271^^^^^264^273^result = 31 * result + charno;^[CLASS] JSError  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] String  description  sourceName  boolean  DiagnosticType  type  CheckLevel  level  int  charno  lineNumber  lineno  result  
