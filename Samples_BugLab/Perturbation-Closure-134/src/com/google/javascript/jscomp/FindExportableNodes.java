[buglab_swap_variables]^export = NodeUtil.getFunctionName ( parent, n ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^export = NodeUtil.getFunctionName (  parent ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^export = NodeUtil.getFunctionName ( n ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = parentew GenerateNodeContext ( n, n, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext (  parent, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n,  n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^if  ( n != grandparentull && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^if  ( parent != null && grandparent.getType (  )  == Token.SCRIPT && grandparent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^if  ( grandparent != parentull && grandparent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext (  grandparent, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n,  parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n, grand parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext (  parent, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n,  n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext (  parent, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n,  n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^exports.put (  context ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^exports.put ( context, export ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^exports.put ( export ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext (  grandparent, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n,  parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = new GenerateNodeContext ( n, grand parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[buglab_swap_variables]^if  ( n != exportull )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
