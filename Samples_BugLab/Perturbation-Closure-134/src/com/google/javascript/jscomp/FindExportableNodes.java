[BugLab_Wrong_Operator]^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the "  ==  "global scope." ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[BugLab_Variable_Misuse]^this.node = scriptNode;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^this.scriptNode = node;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^this.contextNode = scriptNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^JSDocInfo docInfo = parent.getJSDocInfo (  ) ;^67^^^^^52^82^JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^JSDocInfo docInfo = scriptNode.getJSDocInfo (  ) ;^67^^^^^52^82^JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( docInfo != scriptNodeull && docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( docInfo != null || docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( docInfo == null && docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.this )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = NodeUtil.getFunctionName ( scriptNode, parent ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = NodeUtil.getFunctionName ( n, scriptNode ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^export = NodeUtil.getFunctionName ( parent, n ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = parentew GenerateNodeContext ( n, n, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( scriptNode != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && scriptNode.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( grandparent != scriptNodeull && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^if  ( n != grandparentull && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^if  ( parent != null && grandparent.getType (  )  == Token.SCRIPT && grandparent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^if  ( grandparent != parentull && grandparent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( grandparent != null || grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( grandparent == null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( grandparent != null && grandparent.getType (  )  != Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = parent.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = scriptNodeew GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, grandparent, scriptNode ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, scriptNode, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = scriptNode.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( scriptNode.getType (  )  == Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( scriptNode.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  || n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = scriptNode.getFirstChild (  ) .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = scriptNode.getFirstChild (  ) .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( export == null )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^exports.put ( context, export ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = scriptNode.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = scriptNodeew GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, scriptNode, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^context = new GenerateNodeContext ( n, grandparent, scriptNode ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^Node grandparent = scriptNode.getParent (  ) ;^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^switch  ( scriptNode.getType (  )  )  {^72^^^^^57^87^switch  ( n.getType (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( scriptNode.getType (  )  == Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( parent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = parent.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.null )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  <= Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = parent.getFirstChild (  ) .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  > Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( export != scriptNodeull )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^export = parent.getFirstChild (  ) .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^Node grandparent = node.getParent (  ) ;^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^return parent;^126^^^^^125^127^return node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^return parent;^130^^^^^129^131^return scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getScriptNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^return scriptNode;^134^^^^^133^135^return contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[BugLab_Variable_Misuse]^this.node = scriptNode;^120^^^^^119^123^this.node = node;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[BugLab_Variable_Misuse]^this.scriptNode = node;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[BugLab_Variable_Misuse]^this.contextNode = scriptNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[BugLab_Variable_Misuse]^return scriptNode;^126^^^^^125^127^return node;^[CLASS] GenerateNodeContext  [METHOD] getNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[BugLab_Variable_Misuse]^return node;^130^^^^^129^131^return scriptNode;^[CLASS] GenerateNodeContext  [METHOD] getScriptNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[BugLab_Variable_Misuse]^return scriptNode;^134^^^^^133^135^return contextNode;^[CLASS] GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
