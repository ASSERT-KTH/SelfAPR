[BugLab_Wrong_Operator]^Preconditions.checkArgument ( declaration.getType (  )  != Token.FUNCTION ) ;^311^^^^^304^314^Preconditions.checkArgument ( declaration.getType (  )  == Token.FUNCTION ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] StaticScope)   Factory factory Node declaration ConcreteType> parentScope [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( declaration.getJSType (  )  == null ) ;^312^^^^^304^314^Preconditions.checkArgument ( declaration.getJSType (  )  != null ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] StaticScope)   Factory factory Node declaration ConcreteType> parentScope [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ! ( instanceType  >  UnknownType )  ) ;^471^^^^^467^472^Preconditions.checkArgument ( ! ( instanceType instanceof UnknownType )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] ObjectType)   Factory factory ObjectType instanceType [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( alternatives.size (  )  >= 1 ) ;^563^^^^^562^565^Preconditions.checkArgument ( alternatives.size (  )  > 1 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] Set)   ConcreteType> alternatives [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^Preconditions.checkArgument ( alternatives.size (  )  > id ) ;^563^^^^^562^565^Preconditions.checkArgument ( alternatives.size (  )  > 1 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] Set)   ConcreteType> alternatives [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( id > 0 ) ;^662^^^^^659^663^Preconditions.checkArgument ( id >= 0 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] ConcreteType$ConcreteUniqueType(int)   int id [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^Preconditions.checkArgument ( id >= 1 ) ;^662^^^^^659^663^Preconditions.checkArgument ( id >= 0 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] ConcreteType$ConcreteUniqueType(int)   int id [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^if  ( this == null || types.size (  )  == 0 )  {^69^^^^^68^76^if  ( types == null || types.size (  )  == 0 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^if  ( types == null && types.size (  )  == 0 )  {^69^^^^^68^76^if  ( types == null || types.size (  )  == 0 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^if  ( types != null || types.size (  )  == 0 )  {^69^^^^^68^76^if  ( types == null || types.size (  )  == 0 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^if  ( types == null || types.size (  )  != 0 )  {^69^^^^^68^76^if  ( types == null || types.size (  )  == 0 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^} else if  ( types.size (  )  != 1 )  {^71^^^^^68^76^} else if  ( types.size (  )  == 1 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^} else if  ( types.size (  )  == id )  {^71^^^^^68^76^} else if  ( types.size (  )  == 1 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^return 4.iterator (  ) .next (  ) ;^72^^^^^68^76^return types.iterator (  ) .next (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^return ALL;^70^^^^^68^76^return NONE;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^} else if  ( types.size (  )  == 0 )  {^71^^^^^68^76^} else if  ( types.size (  )  == 1 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( Sets.newHashSet ( 1 )  ) ;^74^^^^^68^76^return new ConcreteUnionType ( Sets.newHashSet ( types )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( Sets.newHashSet ( null )  ) ;^74^^^^^68^76^return new ConcreteUnionType ( Sets.newHashSet ( types )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^} else if  ( null.size (  )  == 1 )  {^71^^^^^68^76^} else if  ( types.size (  )  == 1 )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] createForTypes [RETURN_TYPE] ConcreteType   ConcreteType> types [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  Collection  types  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^boolean isNone (  )  { return true; }^79^^^^^74^84^boolean isNone (  )  { return false; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isNone [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^boolean isFunction (  )  { return true; }^82^^^^^77^87^boolean isFunction (  )  { return false; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isFunction [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^boolean isInstance (  )  { return true; }^88^^^^^83^93^boolean isInstance (  )  { return false; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isInstance [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^boolean isUnion (  )  { return true; }^91^^^^^86^96^boolean isUnion (  )  { return false; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isUnion [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Literal]^boolean isAll (  )  { return true; }^94^^^^^89^99^boolean isAll (  )  { return false; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isAll [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Wrong_Operator]^boolean isSingleton (  )  { return !isNone (  )  || !isUnion (  )  && !isAll (  ) ; }^97^^^^^92^102^boolean isSingleton (  )  { return !isNone (  )  && !isUnion (  )  && !isAll (  ) ; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isSingleton [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  int  id  
[BugLab_Variable_Misuse]^} else if  ( equals ( NONE )  )  {^116^^^^^112^121^} else if  ( equals ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( this, NONE ) ;^119^^^^^112^121^return new ConcreteUnionType ( this, other ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^return NONE.unionWith ( this ) ;^115^^^^^112^121^return other.unionWith ( this ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^return other;^130^^^^^124^132^return NONE;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^} else if  ( equals ( NONE )  )  {^127^^^^^124^132^} else if  ( equals ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^return NONE.intersectWith ( this ) ;^126^^^^^124^132^return other.intersectWith ( this ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Variable_Misuse]^} else if  ( equals ( ALL )  )  {^127^^^^^124^132^} else if  ( equals ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  other  int  id  
[BugLab_Wrong_Operator]^} else if  (  ( type = filter.filter ( this )  )  == null )  {^148^^^^^138^155^} else if  (  ( type = filter.filter ( this )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^return filter.emptyList.emptyList;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^return filter;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^return null;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^if  (  ( alt = filter.filter ( type )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  (  ( type = filter.filter ( alt )  )  == null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^if  (  ( type = filter.filter ( other )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^if  (  ( type = alt.filter ( filter )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^if  (  ( filter = type.filter ( alt )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^} else if  (  ( filter = type.filter ( this )  )  != null )  {^148^^^^^138^155^} else if  (  ( type = filter.filter ( this )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^return 2.emptyList;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^return other.isFunction (  )  ? type.toFunction (  )  : null;^177^^^^^174^180^return type.isFunction (  )  ? type.toFunction (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getFunctions [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.isFunction (  )  ? type.toFunction (  )  : null;^177^^^^^176^178^return type.isFunction (  )  ? type.toFunction (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.isFunction (  )  ? type.toFunction (  )  : null;^177^^^^^176^178^return type.isFunction (  )  ? type.toFunction (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.isInstance (  )  ? type.toInstance (  )  : null;^186^^^^^183^189^return type.isInstance (  )  ? type.toInstance (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstances [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.isInstance (  )  ? type.toInstance (  )  : null;^186^^^^^185^187^return type.isInstance (  )  ? type.toInstance (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.isInstance (  )  ? type.toInstance (  )  : null;^186^^^^^185^187^return type.isInstance (  )  ? type.toInstance (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( other.isFunction (  )  )  {^195^^^^^192^201^if  ( type.isFunction (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getFunctionInstanceTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.toFunction (  ) .getInstanceType (  ) ;^196^^^^^192^201^return type.toFunction (  ) .getInstanceType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getFunctionInstanceTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.toFunction (  ) .getInstanceType (  ) ;^196^^^^^192^201^return type.toFunction (  ) .getInstanceType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getFunctionInstanceTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( other.isFunction (  )  )  {^195^^^^^194^199^if  ( type.isFunction (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.toFunction (  ) .getInstanceType (  ) ;^196^^^^^194^199^return type.toFunction (  ) .getInstanceType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.toFunction (  ) .getInstanceType (  ) ;^196^^^^^194^199^return type.toFunction (  ) .getInstanceType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( alt.isFunction (  )  )  {^195^^^^^194^199^if  ( type.isFunction (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( alt.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^204^214^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^if  ( type.isInstance (  ) || type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^204^214^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.toInstance (  ) ;^209^^^^^204^214^return type.toInstance (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.toInstance (  ) ;^209^^^^^204^214^return type.toInstance (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( other.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^204^214^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^&& other.toInstance (  ) .isFunctionPrototype (  )  )  {^208^^^^^204^214^&& type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^if  ( type.isInstance (  ) || type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^206^212^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.toInstance (  ) ;^209^^^^^206^212^return type.toInstance (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.toInstance (  ) ;^209^^^^^206^212^return type.toInstance (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^if  ( other.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^206^212^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^&& other.toInstance (  ) .isFunctionPrototype (  )  )  {^208^^^^^206^212^&& type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^217^225^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^217^225^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  == null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^217^225^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^&& alt.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^221^222^^^^217^225^&& type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^? alt.toFunction (  ) .getSuperclassType (  )  : null;^222^^^^^217^225^? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassTypes [RETURN_TYPE] List   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return other.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^219^223^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^219^223^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  == null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^219^223^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^&& alt.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^221^222^^^^219^223^&& type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^? other.toFunction (  ) .getSuperclassType (  )  : null;^222^^^^^219^223^? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  
[BugLab_Variable_Misuse]^return alt.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( id )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Argument_Swapping]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  == null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^&& toFunction (  ) .getParameterSlot ( id )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^232^233^^^^228^236^&& toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^? toFunction (  ) .getParameterSlot ( id )  : null;^233^^^^^228^236^? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^return alt.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( id )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Argument_Swapping]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  == null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^return other.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^&& toFunction (  ) .getParameterSlot ( id )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^232^233^^^^230^234^&& toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^? toFunction (  ) .getParameterSlot ( id )  : null;^233^^^^^230^234^? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^if  ( other.isInstance (  )  )  {^246^^^^^242^252^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = other.toInstance (  ) .getPropertySlot ( name ) ;^247^^^^^242^252^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = type.toInstance (  ) .getPropertySlot ( THIS_SLOT_NAME ) ;^247^^^^^242^252^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Argument_Swapping]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^242^252^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = alt.toInstance (  ) .getPropertySlot ( name ) ;^247^^^^^242^252^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^if  ( alt.isInstance (  )  )  {^246^^^^^244^250^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = other.toInstance (  ) .getPropertySlot ( name ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = type.toInstance (  ) .getPropertySlot ( THIS_SLOT_NAME ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Argument_Swapping]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^slot = alt.toInstance (  ) .getPropertySlot ( name ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^if  ( other.isInstance (  )  )  {^246^^^^^244^250^if  ( type.isInstance (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[BugLab_Variable_Misuse]^ConcreteType ret = type;^260^^^^^259^265^ConcreteType ret = NONE;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^ret = type.unionWith ( slot.getType (  )  ) ;^262^^^^^259^265^ret = ret.unionWith ( slot.getType (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Argument_Swapping]^ret = slot.unionWith ( ret.getType (  )  ) ;^262^^^^^259^265^ret = ret.unionWith ( slot.getType (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^for  ( StaticSlot<ConcreteType> slot : getPropertySlots ( THIS_SLOT_NAME )  )  {^261^^^^^259^265^for  ( StaticSlot<ConcreteType> slot : getPropertySlots ( name )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( 4.getType (  )  ) ;^262^^^^^259^265^ret = ret.unionWith ( slot.getType (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^return type;^264^^^^^259^265^return ret;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Wrong_Literal]^@Override boolean isNone (  )  { return false; }^269^^^^^264^274^@Override boolean isNone (  )  { return true; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isNone [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^@Override ConcreteType unionWith ( ConcreteType type )  { return other; }^271^^^^^266^276^@Override ConcreteType unionWith ( ConcreteType other )  { return other; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^@Override ConcreteType intersectWith ( ConcreteType other )  { return type; }^273^^^^^268^278^@Override ConcreteType intersectWith ( ConcreteType other )  { return NONE; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Wrong_Literal]^@Override boolean isFunction (  )  { return false; }^316^^^^^311^321^@Override boolean isFunction (  )  { return true; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isFunction [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( name ) ;^327^^^^^326^328^return getScope (  ) .getOwnSlot ( CALL_SLOT_NAME ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getCallSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( name ) ;^332^^^^^331^333^return getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getThisSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( name ) ;^337^^^^^336^338^return getScope (  ) .getOwnSlot ( RETURN_SLOT_NAME ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getReturnSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( getParameterName ( id )  ) ;^342^^^^^341^343^return getScope (  ) .getOwnSlot ( getParameterName ( index )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlot [RETURN_TYPE] StaticSlot   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[BugLab_Wrong_Literal]^int count = count;^347^^^^^346^354^int count = 0;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^if  ( count++ == id )  {^349^^^^^346^354^if  ( count++ == index )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^if  ( count++ >= index )  {^349^^^^^346^354^if  ( count++ == index )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^return declaration.getString (  ) ;^350^^^^^346^354^return n.getString (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^for  ( Node declaration = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^348^^^^^346^354^for  ( Node n = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^for  ( Node n = getFirstParameter (  ) ; n == null; n = n.getNext (  )  )  {^348^^^^^346^354^for  ( Node n = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^if  ( count++ <= index )  {^349^^^^^346^354^if  ( count++ == index )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^return n.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^358^^^^^357^359^return declaration.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getFirstParameter [RETURN_TYPE] Node   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^return  ( FunctionType )  n.getJSType (  ) ;^363^^^^^362^364^return  ( FunctionType )  declaration.getJSType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getJSType [RETURN_TYPE] FunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^if  ( prototypeType == null )  {^371^^^^^370^378^if  ( instanceType == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^if  ( instanceType != null )  {^371^^^^^370^378^if  ( instanceType == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^return prototypeType;^377^^^^^370^378^return instanceType;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^if  ( prototype == null )  {^382^^^^^381^387^if  ( prototypeType == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^if  ( prototypeType != null )  {^382^^^^^381^387^if  ( prototypeType == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^return prototype;^386^^^^^381^387^return prototypeType;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Argument_Swapping]^return  ( factory != null ) ? superConstructor.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  superConstructor  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^return  ( superConstructor == null ) ? factory.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  superConstructor  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Argument_Swapping]^? superConstructor.getConcreteFunction ( factory )  : null;^393^^^^^390^394^? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  superConstructor  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Operator]^if  ( bodyScope != null )  {^398^^^^^397^402^if  ( bodyScope == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Argument_Swapping]^bodyScope = declaration.createFunctionScope ( factory, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Argument_Swapping]^bodyScope = factory.createFunctionScope ( parentScope, declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Variable_Misuse]^bodyScope = factory.createFunctionScope ( n, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Argument_Swapping]^bodyScope = parentScope.createFunctionScope ( declaration, factory ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[BugLab_Wrong_Literal]^StringBuilder b = new StringBuilder ( count ) ;^411^^^^^410^439^StringBuilder b = new StringBuilder ( 32 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Literal]^StringBuilder b = new StringBuilder ( i ) ;^411^^^^^410^439^StringBuilder b = new StringBuilder ( 32 ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^if  ( hasKnownTypeOfThis && declaration != null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  ( hasKnownTypeOfThis || n != null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  ( hasKnownTypeOfThis && n == null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^if  ( declaration.getNext (  )  != null )  {^428^^^^^410^439^if  ( n.getNext (  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  ( n.getNext (  )  == null )  {^428^^^^^410^439^if  ( n.getNext (  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^for  ( int i = 0; declaration != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^for  ( indexnt i = 0; n != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^for  ( int i = 0; n == null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^String paramName = declaration.getString (  ) ;^424^^^^^410^439^String paramName = n.getString (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( name ) ;^425^^^^^410^439^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( paramName ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^b.append ( this.getType (  )  ) ;^426^^^^^410^439^b.append ( var.getType (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^getParameterSlot ( index ) .getType (  ) ;^427^^^^^410^439^getParameterSlot ( i ) .getType (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Literal]^for  ( int i = i; n != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^425^^^^^410^439^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( paramName ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  ( getReturnSlot (  ) .getType (  )  == null )  {^434^^^^^410^439^if  ( getReturnSlot (  ) .getType (  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Literal]^@Override boolean isInstance (  )  { return false; }^474^^^^^469^479^@Override boolean isInstance (  )  { return true; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isInstance [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return getScope (  ) .getSlot ( paramName ) ;^485^^^^^484^486^return getScope (  ) .getSlot ( propName ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlot [RETURN_TYPE] StaticSlot   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( getScope (  ) .getOwnSlot ( paramName )  != null )  {^493^^^^^492^513^if  ( getScope (  ) .getOwnSlot ( propName )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  ( getScope (  ) .getOwnSlot ( propName )  == null )  {^493^^^^^492^513^if  ( getScope (  ) .getOwnSlot ( propName )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^} else if  ( getImplicitPrototype (  )  == null )  {^508^^^^^492^513^} else if  ( getImplicitPrototype (  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return getImplicitPrototype (  ) .getInstanceTypeWithProperty ( paramName ) ;^509^^^^^492^513^return getImplicitPrototype (  ) .getInstanceTypeWithProperty ( propName ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return getImplicitPrototype (  ) .getInstanceTypeWithProperty ( name ) ;^509^^^^^492^513^return getImplicitPrototype (  ) .getInstanceTypeWithProperty ( propName ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  ( instanceType.getConstructor (  )  == null )  {^504^^^^^492^513^if  ( instanceType.getConstructor (  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  (  ( instanceTypetype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  (  ( prototypeType == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  (  ( instanceTypetype == null ) &&  ( proto.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  (  ( proto == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( prototype == null ) ||  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( prototype != null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  == null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  (  ( instanceType != proto )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  || ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( proto <= instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  && ! ( proto  >=  UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^prototype = factory.createConcreteInstance ( instanceType ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^prototype = proto.createConcreteInstance ( factory ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^ObjectType proto = proto.getImplicitPrototype (  ) ;^519^^^^^516^525^ObjectType proto = instanceType.getImplicitPrototype (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  (  ( instanceType != instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( proto == instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  && ! ( proto  ^  UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^&&  ( proto.getImplicitPrototype (  )  != null )  )  {^518^^^^^516^525^&&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return prototypeType;^524^^^^^516^525^return prototype;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( proto.isFunctionPrototypeType (  )  )  {^529^^^^^528^537^if  ( instanceType.isFunctionPrototypeType (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^return  ( factory != null ) ? constructor.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^return  ( constructor == null ) ? factory.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Variable_Misuse]^FunctionType constructor = proto.getConstructor (  ) ;^533^^^^^528^537^FunctionType constructor = instanceType.getConstructor (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^? constructor.getConcreteFunction ( factory )  : null;^535^^^^^528^537^? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Argument_Swapping]^return protoType.getConcreteFunction ( factory.getOwnerFunction (  )  ) ;^531^^^^^528^537^return factory.getConcreteFunction ( protoType.getOwnerFunction (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[BugLab_Wrong_Operator]^if  ( scope != null )  {^541^^^^^540^545^if  ( scope == null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^scope = factory.createInstanceScope ( proto ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^scope = instanceType.createInstanceScope ( factory ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^@Override public String toString (  )  { return proto.toString (  ) ; }^547^^^^^542^552^@Override public String toString (  )  { return instanceType.toString (  ) ; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Literal]^@Override boolean isUnion (  )  { return false; }^567^^^^^562^572^@Override boolean isUnion (  )  { return true; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isUnion [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( type.isSingleton (  )  )  {^572^^^^^571^595^if  ( other.isSingleton (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( type.isUnion (  )  )  {^580^^^^^571^595^} else if  ( other.isUnion (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ret.isNone (  )  || other.isAll (  )  ) ;^592^^^^^571^595^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( other.isNone (  )  && other.isAll (  )  ) ;^592^^^^^571^595^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return type.unionWith ( this ) ;^593^^^^^571^595^return other.unionWith ( this ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( otherUnion.containsAll ( alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^} else if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^alts.addAll ( otherUnion.alternatives.alternatives ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^} else if  ( otherUnion.alternatives.alternatives.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( null ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^ConcreteUnionType retUnion = other.toUnion (  ) ;^581^^^^^571^595^ConcreteUnionType otherUnion = other.toUnion (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( 2 ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^ConcreteUnionType typeUnion = other.toUnion (  ) ;^581^^^^^571^595^ConcreteUnionType otherUnion = other.toUnion (  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( alternatives.containsAll ( otherUnion.alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( alternatives.containsAll ( otherUnion )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( 0.containsAll ( otherUnion.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^} else if  ( alternatives.alternatives.containsAll ( otherUnion )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^alts.addAll ( otherUnion ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( 2 ) ;^589^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( ret.isUnion (  )  )  {^580^^^^^571^595^} else if  ( other.isUnion (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( otherUnion.alternatives.containsAll ( null )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( type.isNone (  )  || other.isAll (  )  ) ;^592^^^^^571^595^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( alternatives.contains ( type )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^alts.add ( type ) ;^577^^^^^571^595^alts.add ( other ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( other.contains ( alternatives )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^alts.add ( ret ) ;^577^^^^^571^595^alts.add ( other ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( null.contains ( other )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( this ) ;^578^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( 0 ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^} else if  ( otherUnion.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( null.containsAll ( otherUnion.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( otherUnion.alternatives.containsAll ( 1 )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( this ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^alts.addAll ( 1 ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( null ) ;^589^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( ret.isSingleton (  )  )  {^598^^^^^597^612^if  ( other.isSingleton (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( ret.isUnion (  )  )  {^604^^^^^597^612^} else if  ( other.isUnion (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return type.intersectWith ( this ) ;^610^^^^^597^612^return other.intersectWith ( this ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( other.isNone (  )  && other.isAll (  )  ) ;^609^^^^^597^612^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( type.isNone (  )  || other.isAll (  )  ) ;^609^^^^^597^612^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ret.isNone (  )  || other.isAll (  )  ) ;^609^^^^^597^612^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^types.retainAll ( type.toUnion (  ) .alternatives ) ;^606^^^^^597^612^types.retainAll ( other.toUnion (  ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^} else if  ( type.isUnion (  )  )  {^604^^^^^597^612^} else if  ( other.isUnion (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^types.retainAll ( ret.toUnion (  ) .alternatives ) ;^606^^^^^597^612^types.retainAll ( other.toUnion (  ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( alternatives.contains ( type )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return ret;^602^^^^^597^612^return NONE;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return type;^600^^^^^597^612^return other;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return type;^602^^^^^597^612^return NONE;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Argument_Swapping]^if  ( other.contains ( alternatives )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return ret.intersectWith ( this ) ;^610^^^^^597^612^return other.intersectWith ( this ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^types.retainAll ( other.toUnion (  ) .null ) ;^606^^^^^597^612^types.retainAll ( other.toUnion (  ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^if  ( alternatives.contains ( ret )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return  ( obj instanceof ConcreteUnionType ) || alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  Object  obj  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return  ( obj  !=  ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  Object  obj  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^&& 4.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^619^^^^^617^620^&& alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  Object  obj  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^names.add ( ret.toString (  )  ) ;^629^^^^^626^634^names.add ( type.toString (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return " ( " + Joiner.on ( "," ) .join ( names )  >>  + " ) ";^633^^^^^626^634^return " ( " + Joiner.on ( "," ) .join ( names )  + " ) ";^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Literal]^@Override boolean isAll (  )  { return false; }^639^^^^^634^644^@Override boolean isAll (  )  { return true; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] isAll [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^@Override ConcreteType intersectWith ( ConcreteType type )  { return other; }^643^^^^^638^648^@Override ConcreteType intersectWith ( ConcreteType other )  { return other; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return  ( o instanceof ConcreteUniqueType ) &&  ( index ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  Object  o  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return  ( o instanceof ConcreteUniqueType ) ||  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  Object  o  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return  ( o  ==  ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  Object  o  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^return  ( o instanceof ConcreteUniqueType ) &&  ( id <  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  Object  o  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^return ConcreteUniqueType.class.hashCode (  )  ^ index;^671^^^^^670^672^return ConcreteUniqueType.class.hashCode (  )  ^ id;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Variable_Misuse]^@Override public String toString (  )  { return "Unique$" + index; }^674^^^^^669^679^@Override public String toString (  )  { return "Unique$" + id; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^@Override public String toString (  ^  )  { return "Unique$" + id; }^674^^^^^669^679^@Override public String toString (  )  { return "Unique$" + id; }^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[BugLab_Wrong_Operator]^if  ( type.isInstance (  ) || type.toInstance (  ) .isFunctionPrototype (  )  )  {^207^208^^^^206^212^if  ( type.isInstance (  ) && type.toInstance (  ) .isFunctionPrototype (  )  )  {^[CLASS] 4  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteInstanceType   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^219^223^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] 5  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  == null ? type.toFunction (  ) .getSuperclassType (  )  : null;^220^221^222^^^219^223^return type.isFunction (  ) && type.toFunction (  ) .getSuperclassType (  )  != null ? type.toFunction (  ) .getSuperclassType (  )  : null;^[CLASS] 5  [METHOD] filter [RETURN_TYPE] ConcreteType$ConcreteFunctionType   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Argument_Swapping]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] 6  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Wrong_Operator]^return type.isFunction (  ) || toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] 6  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Wrong_Operator]^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  == null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] 6  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[BugLab_Variable_Misuse]^slot = type.toInstance (  ) .getPropertySlot ( this ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] 7  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] StaticSlot  slot  boolean  ConcreteType  type  
[BugLab_Argument_Swapping]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] 7  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] StaticSlot  slot  boolean  ConcreteType  type  
[BugLab_Wrong_Literal]^@Override boolean isNone (  )  { return false; }^269^^^^^264^274^@Override boolean isNone (  )  { return true; }^[CLASS] ConcreteNoneType  [METHOD] isNone [RETURN_TYPE] boolean   [VARIABLES] boolean  
[BugLab_Variable_Misuse]^@Override ConcreteType intersectWith ( ConcreteType other )  { return other; }^273^^^^^268^278^@Override ConcreteType intersectWith ( ConcreteType other )  { return NONE; }^[CLASS] ConcreteNoneType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] boolean  ConcreteType  other  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( declaration.getType (  )  != Token.FUNCTION ) ;^311^^^^^304^314^Preconditions.checkArgument ( declaration.getType (  )  == Token.FUNCTION ) ;^[CLASS] ConcreteFunctionType  [METHOD] <init> [RETURN_TYPE] StaticScope)   Factory factory Node declaration ConcreteType> parentScope [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( declaration.getJSType (  )  == null ) ;^312^^^^^304^314^Preconditions.checkArgument ( declaration.getJSType (  )  != null ) ;^[CLASS] ConcreteFunctionType  [METHOD] <init> [RETURN_TYPE] StaticScope)   Factory factory Node declaration ConcreteType> parentScope [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Literal]^@Override boolean isFunction (  )  { return false; }^316^^^^^311^321^@Override boolean isFunction (  )  { return true; }^[CLASS] ConcreteFunctionType  [METHOD] isFunction [RETURN_TYPE] boolean   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^327^^^^^326^328^return getScope (  ) .getOwnSlot ( CALL_SLOT_NAME ) ;^[CLASS] ConcreteFunctionType  [METHOD] getCallSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( RETURN_SLOT_NAME ) ;^332^^^^^331^333^return getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^[CLASS] ConcreteFunctionType  [METHOD] getThisSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^337^^^^^336^338^return getScope (  ) .getOwnSlot ( RETURN_SLOT_NAME ) ;^[CLASS] ConcreteFunctionType  [METHOD] getReturnSlot [RETURN_TYPE] StaticSlot   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Literal]^int count = count;^347^^^^^346^354^int count = 0;^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Variable_Misuse]^if  ( count++ == count )  {^349^^^^^346^354^if  ( count++ == index )  {^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Wrong_Operator]^if  ( count++ != index )  {^349^^^^^346^354^if  ( count++ == index )  {^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Variable_Misuse]^return declaration.getString (  ) ;^350^^^^^346^354^return n.getString (  ) ;^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Variable_Misuse]^for  ( Node declaration = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^348^^^^^346^354^for  ( Node n = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Wrong_Operator]^for  ( Node n = getFirstParameter (  ) ; n == null; n = n.getNext (  )  )  {^348^^^^^346^354^for  ( Node n = getFirstParameter (  ) ; n != null; n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] getParameterName [RETURN_TYPE] String   int index [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  int  count  index  
[BugLab_Variable_Misuse]^return n.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^358^^^^^357^359^return declaration.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] ConcreteFunctionType  [METHOD] getFirstParameter [RETURN_TYPE] Node   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return  ( FunctionType )  n.getJSType (  ) ;^363^^^^^362^364^return  ( FunctionType )  declaration.getJSType (  ) ;^[CLASS] ConcreteFunctionType  [METHOD] getJSType [RETURN_TYPE] FunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^if  ( prototypeType == null )  {^371^^^^^370^378^if  ( instanceType == null )  {^[CLASS] ConcreteFunctionType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Operator]^if  ( instanceType != null )  {^371^^^^^370^378^if  ( instanceType == null )  {^[CLASS] ConcreteFunctionType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return prototypeType;^377^^^^^370^378^return instanceType;^[CLASS] ConcreteFunctionType  [METHOD] getInstanceType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^if  ( instanceType == null )  {^382^^^^^381^387^if  ( prototypeType == null )  {^[CLASS] ConcreteFunctionType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Operator]^if  ( prototypeType != null )  {^382^^^^^381^387^if  ( prototypeType == null )  {^[CLASS] ConcreteFunctionType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^return instanceType;^386^^^^^381^387^return prototypeType;^[CLASS] ConcreteFunctionType  [METHOD] getPrototypeType [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Argument_Swapping]^return  ( factory != null ) ? superConstructor.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteFunctionType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  FunctionType  superConstructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  
[BugLab_Wrong_Operator]^return  ( superConstructor == null ) ? factory.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteFunctionType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  FunctionType  superConstructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  
[BugLab_Argument_Swapping]^? superConstructor.getConcreteFunction ( factory )  : null;^393^^^^^390^394^? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteFunctionType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  FunctionType  superConstructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  
[BugLab_Wrong_Operator]^if  ( bodyScope != null )  {^398^^^^^397^402^if  ( bodyScope == null )  {^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Argument_Swapping]^bodyScope = parentScope.createFunctionScope ( declaration, factory ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Argument_Swapping]^bodyScope = factory.createFunctionScope ( parentScope, declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Variable_Misuse]^bodyScope = factory.createFunctionScope ( n, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Argument_Swapping]^bodyScope = declaration.createFunctionScope ( factory, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[BugLab_Wrong_Literal]^StringBuilder b = new StringBuilder (  ) ;^411^^^^^410^439^StringBuilder b = new StringBuilder ( 32 ) ;^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Literal]^StringBuilder b = new StringBuilder ( i ) ;^411^^^^^410^439^StringBuilder b = new StringBuilder ( 32 ) ;^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Variable_Misuse]^if  ( hasKnownTypeOfThis && declaration != null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Argument_Swapping]^if  ( n && hasKnownTypeOfThis != null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^if  ( hasKnownTypeOfThis || n != null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^if  ( hasKnownTypeOfThis && n == null )  {^420^^^^^410^439^if  ( hasKnownTypeOfThis && n != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Variable_Misuse]^if  ( declaration.getNext (  )  != null )  {^428^^^^^410^439^if  ( n.getNext (  )  != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^if  ( n.getNext (  )  == null )  {^428^^^^^410^439^if  ( n.getNext (  )  != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; declaration != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; n == null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; n != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Variable_Misuse]^String paramName = declaration.getString (  ) ;^424^^^^^410^439^String paramName = n.getString (  ) ;^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( THIS_SLOT_NAME ) ;^425^^^^^410^439^StaticSlot<ConcreteType> var = getScope (  ) .getOwnSlot ( paramName ) ;^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^if  ( getReturnSlot (  ) .getType (  )  == null )  {^434^^^^^410^439^if  ( getReturnSlot (  ) .getType (  )  != null )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ! ( instanceType  ^  UnknownType )  ) ;^471^^^^^467^472^Preconditions.checkArgument ( ! ( instanceType instanceof UnknownType )  ) ;^[CLASS] ConcreteInstanceType  [METHOD] <init> [RETURN_TYPE] ObjectType)   Factory factory ObjectType instanceType [VARIABLES] ObjectType  instanceType  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Literal]^@Override boolean isInstance (  )  { return false; }^474^^^^^469^479^@Override boolean isInstance (  )  { return true; }^[CLASS] ConcreteInstanceType  [METHOD] isInstance [RETURN_TYPE] boolean   [VARIABLES] ObjectType  instanceType  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  ( getScope (  ) .getOwnSlot ( propName )  == null )  {^493^^^^^492^513^if  ( getScope (  ) .getOwnSlot ( propName )  != null )  {^[CLASS] ConcreteInstanceType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ObjectType  instanceType  ConcreteInstanceType  prototype  Factory  factory  String  propName  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^} else if  ( getImplicitPrototype (  )  == null )  {^508^^^^^492^513^} else if  ( getImplicitPrototype (  )  != null )  {^[CLASS] ConcreteInstanceType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ObjectType  instanceType  ConcreteInstanceType  prototype  Factory  factory  String  propName  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  ( instanceType.getConstructor (  )  == null )  {^504^^^^^492^513^if  ( instanceType.getConstructor (  )  != null )  {^[CLASS] ConcreteInstanceType  [METHOD] getInstanceTypeWithProperty [RETURN_TYPE] ConcreteType$ConcreteInstanceType   String propName [VARIABLES] ObjectType  instanceType  ConcreteInstanceType  prototype  Factory  factory  String  propName  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^if  (  ( instanceTypetype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Argument_Swapping]^if  (  ( instanceTypetype == null ) &&  ( proto.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( prototype == null ) ||  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( prototype != null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  == null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Argument_Swapping]^if  (  ( instanceType != proto )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  || ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( proto == instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  && ! ( proto  <=  UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Argument_Swapping]^prototype = proto.createConcreteInstance ( factory ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^prototype = factory.createConcreteInstance ( instanceType ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^ObjectType proto = proto.getImplicitPrototype (  ) ;^519^^^^^516^525^ObjectType proto = instanceType.getImplicitPrototype (  ) ;^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^if  (  ( instanceType != instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( proto < instanceType )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^if  (  ( proto != instanceType )  && ! ( proto  <  UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^&&  ( proto.getImplicitPrototype (  )  != null )  )  {^518^^^^^516^525^&&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^if  ( proto.isFunctionPrototypeType (  )  )  {^529^^^^^528^537^if  ( instanceType.isFunctionPrototypeType (  )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Argument_Swapping]^return  ( factory != null ) ? constructor.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Wrong_Operator]^return  ( constructor == null ) ? factory.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Variable_Misuse]^FunctionType constructor = proto.getConstructor (  ) ;^533^^^^^528^537^FunctionType constructor = instanceType.getConstructor (  ) ;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Argument_Swapping]^? constructor.getConcreteFunction ( factory )  : null;^535^^^^^528^537^? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Argument_Swapping]^return protoType.getConcreteFunction ( factory.getOwnerFunction (  )  ) ;^531^^^^^528^537^return factory.getConcreteFunction ( protoType.getOwnerFunction (  )  ) ;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[BugLab_Wrong_Operator]^if  ( scope != null )  {^541^^^^^540^545^if  ( scope == null )  {^[CLASS] ConcreteInstanceType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^scope = factory.createInstanceScope ( proto ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteInstanceType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Argument_Swapping]^scope = instanceType.createInstanceScope ( factory ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteInstanceType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Variable_Misuse]^@Override public String toString (  )  { return proto.toString (  ) ; }^547^^^^^542^552^@Override public String toString (  )  { return instanceType.toString (  ) ; }^[CLASS] ConcreteInstanceType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( alternatives.size (  )  >= 1 ) ;^563^^^^^562^565^Preconditions.checkArgument ( alternatives.size (  )  > 1 ) ;^[CLASS] ConcreteUnionType  [METHOD] <init> [RETURN_TYPE] Set)   ConcreteType> alternatives [VARIABLES] Set  alternatives  boolean  
[BugLab_Wrong_Literal]^@Override boolean isUnion (  )  { return false; }^567^^^^^562^572^@Override boolean isUnion (  )  { return true; }^[CLASS] ConcreteUnionType  [METHOD] isUnion [RETURN_TYPE] boolean   [VARIABLES] Set  alternatives  boolean  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( other.isNone (  )  && other.isAll (  )  ) ;^592^^^^^571^595^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^if  ( alternatives.containsAll ( otherUnion.alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^} else if  ( otherUnion.alternatives.alternatives.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( null ) ;^589^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^} else if  ( alternatives.alternatives.containsAll ( otherUnion )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^} else if  ( otherUnion.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^} else if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^alts.addAll ( otherUnion.alternatives.alternatives ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^alts.addAll ( otherUnion ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( 0 ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( 1 ) ;^589^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^if  ( otherUnion.containsAll ( alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^if  ( alternatives.containsAll ( otherUnion )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( null ) ;^587^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( 3 ) ;^589^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^} else if  ( otherUnion.alternatives.containsAll ( 3 )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Argument_Swapping]^if  ( other.contains ( alternatives )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^Set<ConcreteType> alts = Sets.newHashSet ( 4 ) ;^576^^^^^571^595^Set<ConcreteType> alts = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Variable_Misuse]^return new ConcreteUnionType ( 3 ) ;^578^^^^^571^595^return new ConcreteUnionType ( alts ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( other.isNone (  )  && other.isAll (  )  ) ;^609^^^^^597^612^Preconditions.checkArgument ( other.isNone (  )  || other.isAll (  )  ) ;^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[BugLab_Variable_Misuse]^types.retainAll ( other.toUnion (  ) .1 ) ;^606^^^^^597^612^types.retainAll ( other.toUnion (  ) .alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[BugLab_Argument_Swapping]^if  ( other.contains ( alternatives )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[BugLab_Variable_Misuse]^return other;^602^^^^^597^612^return NONE;^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[BugLab_Variable_Misuse]^Set<ConcreteType> types = Sets.newHashSet ( null ) ;^605^^^^^597^612^Set<ConcreteType> types = Sets.newHashSet ( alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[BugLab_Argument_Swapping]^return  ( alternatives instanceof ConcreteUnionType ) && obj.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  obj  Set  alternatives  alts  types  boolean  
[BugLab_Wrong_Operator]^return  ( obj instanceof ConcreteUnionType ) || alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  obj  Set  alternatives  alts  types  boolean  
[BugLab_Wrong_Operator]^return  ( obj  >=  ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  obj  Set  alternatives  alts  types  boolean  
[BugLab_Wrong_Operator]^return " ( " + Joiner.on ( "," ) .join ( names )  &&  + " ) ";^633^^^^^626^634^return " ( " + Joiner.on ( "," ) .join ( names )  + " ) ";^[CLASS] ConcreteUnionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  names  Set  alternatives  alts  types  boolean  ConcreteType  type  
[BugLab_Wrong_Operator]^return " ( " + Joiner.on ( "," ) .join ( names )  <  + " ) ";^633^^^^^626^634^return " ( " + Joiner.on ( "," ) .join ( names )  + " ) ";^[CLASS] ConcreteUnionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  names  Set  alternatives  alts  types  boolean  ConcreteType  type  
[BugLab_Wrong_Literal]^@Override boolean isAll (  )  { return false; }^639^^^^^634^644^@Override boolean isAll (  )  { return true; }^[CLASS] ConcreteAll  [METHOD] isAll [RETURN_TYPE] boolean   [VARIABLES] boolean  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( id < 0 ) ;^662^^^^^659^663^Preconditions.checkArgument ( id >= 0 ) ;^[CLASS] ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] ConcreteType$ConcreteUniqueType(int)   int id [VARIABLES] int  id  boolean  
[BugLab_Wrong_Literal]^Preconditions.checkArgument ( id >= id ) ;^662^^^^^659^663^Preconditions.checkArgument ( id >= 0 ) ;^[CLASS] ConcreteUniqueType  [METHOD] <init> [RETURN_TYPE] ConcreteType$ConcreteUniqueType(int)   int id [VARIABLES] int  id  boolean  
[BugLab_Wrong_Operator]^return  ( o instanceof ConcreteUniqueType ) ||  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] int  id  Object  o  boolean  
[BugLab_Wrong_Operator]^return  ( o  >=  ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] int  id  Object  o  boolean  
[BugLab_Wrong_Operator]^return  ( o instanceof ConcreteUniqueType ) &&  ( id <=  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] int  id  Object  o  boolean  
[BugLab_Wrong_Operator]^@Override public String toString (  <=  )  { return "Unique$" + id; }^674^^^^^669^679^@Override public String toString (  )  { return "Unique$" + id; }^[CLASS] ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  id  boolean  
