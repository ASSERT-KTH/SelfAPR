[buglab_swap_variables]^} else if  (  ( filter = type.filter ( this )  )  != null )  {^148^^^^^138^155^} else if  (  ( type = filter.filter ( this )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^return filter.emptyList.emptyList;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^return filter;^153^^^^^138^155^return filter.emptyList;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^if  (  ( type = alt.filter ( filter )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^if  (  ( alt = filter.filter ( type )  )  != null )  {^143^^^^^138^155^if  (  ( type = filter.filter ( alt )  )  != null )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getMatchingTypes [RETURN_TYPE] <C>   TypeFilter<C> filter [VARIABLES] Set  alternatives  C  type  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  TypeFilter  filter  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  int  id  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^228^236^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getParameterSlots [RETURN_TYPE] List   final int index [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[buglab_swap_variables]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[buglab_swap_variables]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^242^252^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertySlots [RETURN_TYPE] List   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[buglab_swap_variables]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  type  int  id  index  
[buglab_swap_variables]^ret = slot.unionWith ( ret.getType (  )  ) ;^262^^^^^259^265^ret = ret.unionWith ( slot.getType (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getPropertyType [RETURN_TYPE] ConcreteType   String name [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  slot  Set  alternatives  boolean  Node  declaration  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  id  index  
[buglab_swap_variables]^return  ( factory != null ) ? superConstructor.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  superConstructor  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^? superConstructor.getConcreteFunction ( factory )  : null;^393^^^^^390^394^? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  superConstructor  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^bodyScope = declaration.createFunctionScope ( factory, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope ( parentScope, declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope (  parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope ( declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^bodyScope = parentScope.createFunctionScope ( declaration, factory ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  id  index  
[buglab_swap_variables]^for  ( int i = 0; n != null; ++i = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^for  ( nnt i = 0; i != null; ++i, n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^for  ( int i = 0; n != null; ++ n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternatives  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  StaticSlot  var  boolean  hasKnownTypeOfThis  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^if  (  ( instanceTypetype == null ) &&  ( proto.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  (  ( instanceType != proto )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^prototype = proto.createConcreteInstance ( factory ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^return  ( factory != null ) ? constructor.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^? constructor.getConcreteFunction ( factory )  : null;^535^^^^^528^537^? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^return protoType.getConcreteFunction ( factory.getOwnerFunction (  )  ) ;^531^^^^^528^537^return factory.getConcreteFunction ( protoType.getOwnerFunction (  )  ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] Set  alternatives  FunctionPrototypeType  protoType  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  FunctionType  constructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  boolean  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  
[buglab_swap_variables]^scope = instanceType.createInstanceScope ( factory ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^} else if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^} else if  ( otherUnion.alternatives.alternatives.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^} else if  ( alternatives.alternatives.containsAll ( otherUnion )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^alts.addAll ( otherUnion.alternatives.alternatives ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  ( otherUnion.containsAll ( alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^alts.addAll ( otherUnion ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^} else if  ( otherUnion.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  ( other.contains ( alternatives )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  ( alternatives.containsAll ( otherUnion.alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  ConcreteUnionType  otherUnion  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^if  ( other.contains ( alternatives )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^return  ( alternatives instanceof ConcreteUnionType ) && obj.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  Object  obj  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^return  ( id instanceof ConcreteUniqueType ) &&  ( o ==  (  ( ConcreteUniqueType )  o ) .id ) ;^666^667^^^^665^668^return  ( o instanceof ConcreteUniqueType ) &&  ( id ==  (  ( ConcreteUniqueType )  o ) .id ) ;^[CLASS] ConcreteType TypeFilter 1 2 3 4 5 6 7 ConcreteNoneType ConcreteFunctionType ConcreteInstanceType ConcreteUnionType ConcreteAll ConcreteUniqueType  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] ConcreteInstanceType  instanceType  prototype  prototypeType  ObjectType  instanceType  proto  Set  alternatives  alts  types  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  scope  Factory  factory  List  $anonymous0  NO_FUNCTIONS  NO_INSTANCES  NO_SLOTS  emptyList  list  names  Object  o  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  name  paramName  propName  ConcreteType  ALL  NONE  alt  other  ret  type  int  count  i  id  index  
[buglab_swap_variables]^return index.isFunction (  ) && toFunction (  ) .getParameterSlot ( type )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^231^232^233^^^230^234^return type.isFunction (  ) && toFunction (  ) .getParameterSlot ( index )  != null ? toFunction (  ) .getParameterSlot ( index )  : null;^[CLASS] 6  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] boolean  ConcreteType  type  
[buglab_swap_variables]^slot = name.toInstance (  ) .getPropertySlot ( type ) ;^247^^^^^244^250^slot = type.toInstance (  ) .getPropertySlot ( name ) ;^[CLASS] 7  [METHOD] filter [RETURN_TYPE] StaticSlot   ConcreteType type [VARIABLES] StaticSlot  slot  boolean  ConcreteType  type  
[buglab_swap_variables]^return  ( factory != null ) ? superConstructor.getConcreteFunction ( superConstructor )  : null;^392^393^^^^390^394^return  ( superConstructor != null ) ? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteFunctionType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  FunctionType  superConstructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  
[buglab_swap_variables]^? superConstructor.getConcreteFunction ( factory )  : null;^393^^^^^390^394^? factory.getConcreteFunction ( superConstructor )  : null;^[CLASS] ConcreteFunctionType  [METHOD] getSuperclassType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  FunctionType  superConstructor  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  
[buglab_swap_variables]^bodyScope = parentScope.createFunctionScope ( declaration, factory ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope ( parentScope, declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope (  parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[buglab_swap_variables]^bodyScope = factory.createFunctionScope ( declaration ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[buglab_swap_variables]^bodyScope = declaration.createFunctionScope ( factory, parentScope ) ;^399^^^^^397^402^bodyScope = factory.createFunctionScope ( declaration, parentScope ) ;^[CLASS] ConcreteFunctionType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  boolean  Node  declaration  n  StaticScope  bodyScope  parentScope  
[buglab_swap_variables]^for  ( int i = 0; n != null; ++i = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[buglab_swap_variables]^for  ( int i = 0; n != null; ++ n = n.getNext (  )  )  {^423^^^^^410^439^for  ( int i = 0; n != null; ++i, n = n.getNext (  )  )  {^[CLASS] ConcreteFunctionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ConcreteInstanceType  instanceType  prototypeType  StaticSlot  var  boolean  hasKnownTypeOfThis  StringBuilder  b  Node  declaration  n  StaticScope  bodyScope  parentScope  Factory  factory  String  CALL_SLOT_NAME  RETURN_SLOT_NAME  THIS_SLOT_NAME  paramName  int  i  
[buglab_swap_variables]^if  (  ( instanceTypetype == null ) &&  ( proto.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[buglab_swap_variables]^if  (  ( instanceType == null ) &&  ( prototype.getImplicitPrototype (  )  != null )  )  {^517^518^^^^516^525^if  (  ( prototype == null ) &&  ( instanceType.getImplicitPrototype (  )  != null )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[buglab_swap_variables]^if  (  ( instanceType != proto )  && ! ( proto instanceof UnknownType )  )  {^520^^^^^516^525^if  (  ( proto != instanceType )  && ! ( proto instanceof UnknownType )  )  {^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[buglab_swap_variables]^prototype = proto.createConcreteInstance ( factory ) ;^521^^^^^516^525^prototype = factory.createConcreteInstance ( proto ) ;^[CLASS] ConcreteInstanceType  [METHOD] getImplicitPrototype [RETURN_TYPE] ConcreteType$ConcreteInstanceType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[buglab_swap_variables]^return  ( factory != null ) ? constructor.getConcreteFunction ( constructor )  : null;^534^535^^^^528^537^return  ( constructor != null ) ? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[buglab_swap_variables]^? constructor.getConcreteFunction ( factory )  : null;^535^^^^^528^537^? factory.getConcreteFunction ( constructor )  : null;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[buglab_swap_variables]^return protoType.getConcreteFunction ( factory.getOwnerFunction (  )  ) ;^531^^^^^528^537^return factory.getConcreteFunction ( protoType.getOwnerFunction (  )  ) ;^[CLASS] ConcreteInstanceType  [METHOD] getConstructorType [RETURN_TYPE] ConcreteType$ConcreteFunctionType   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  boolean  FunctionPrototypeType  protoType  StaticScope  scope  FunctionType  constructor  Factory  factory  
[buglab_swap_variables]^scope = instanceType.createInstanceScope ( factory ) ;^542^^^^^540^545^scope = factory.createInstanceScope ( instanceType ) ;^[CLASS] ConcreteInstanceType  [METHOD] getScope [RETURN_TYPE] StaticScope   [VARIABLES] ObjectType  instanceType  proto  ConcreteInstanceType  prototype  Factory  factory  boolean  StaticScope  scope  
[buglab_swap_variables]^if  ( alternatives.containsAll ( otherUnion.alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^} else if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^} else if  ( otherUnion.alternatives.alternatives.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^alts.addAll ( otherUnion.alternatives.alternatives ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^} else if  ( alternatives.alternatives.containsAll ( otherUnion )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^} else if  ( otherUnion.containsAll ( alternatives )  )  {^584^^^^^571^595^} else if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^alts.addAll ( otherUnion ) ;^588^^^^^571^595^alts.addAll ( otherUnion.alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^if  ( otherUnion.containsAll ( alternatives.alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^if  ( otherUnion.alternatives.containsAll ( alternatives )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^if  ( alternatives.containsAll ( otherUnion )  )  {^582^^^^^571^595^if  ( alternatives.containsAll ( otherUnion.alternatives )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^if  ( other.contains ( alternatives )  )  {^573^^^^^571^595^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteUnionType  [METHOD] unionWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] Set  alternatives  alts  boolean  ConcreteType  other  ConcreteUnionType  otherUnion  
[buglab_swap_variables]^if  ( other.contains ( alternatives )  )  {^599^^^^^597^612^if  ( alternatives.contains ( other )  )  {^[CLASS] ConcreteUnionType  [METHOD] intersectWith [RETURN_TYPE] ConcreteType   ConcreteType other [VARIABLES] ConcreteType  other  Set  alternatives  alts  types  boolean  
[buglab_swap_variables]^return  ( alternatives instanceof ConcreteUnionType ) && obj.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^618^619^^^^617^620^return  ( obj instanceof ConcreteUnionType ) && alternatives.equals (  (  ( ConcreteUnionType )  obj ) .alternatives ) ;^[CLASS] ConcreteUnionType  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  obj  Set  alternatives  alts  types  boolean  
