[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^46^70^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^46^70^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^46^70^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, numThreads, supplier, splitter )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler,  supplier, numThreads )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, numThreads, supplier )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter,  numThreads )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( splitter, compiler, supplier, numThreads )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass (  splitter, supplier, numThreads )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, supplier )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, root, supplier, numThreads )  ) .process ( externs, splitter ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, root, numThreads )  ) .process ( externs, supplier ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( root, externs ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process (  root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^( new ParallelCompilerPass ( supplier, splitter, compiler, numThreads )  ) .process ( externs, root ) ;^68^69^^^^46^70^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AstParallelizer  splitter  Node  externs  root  subtree  RemoveConstantRValuesCallback  cb  Supplier  supplier  int  numThreads  
[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] RemoveConstantExpressionsParallel 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  int  numThreads  Node  subtree  
[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^54^64^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] get [RETURN_TYPE] Task   [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null, cb, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null,  cb ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
[buglab_swap_variables]^NodeTraversal.traverse ( null, subtree ) ;^60^^^^^57^62^NodeTraversal.traverse ( null, subtree, cb ) ;^[CLASS] 1  [METHOD] processSubtree [RETURN_TYPE] Result   Node subtree [VARIABLES] boolean  Node  subtree  RemoveConstantRValuesCallback  cb  
