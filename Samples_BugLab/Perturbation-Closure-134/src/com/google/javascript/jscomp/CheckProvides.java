[buglab_swap_variables]^new NodeTraversal ( callback, compiler ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[buglab_swap_variables]^new NodeTraversal ( compiler ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[buglab_swap_variables]^new NodeTraversal (  callback ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[buglab_swap_variables]^new NodeTraversal ( compiler, root ) .traverse ( callback ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[buglab_swap_variables]^if  ( n != providedClassNameull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^provides.put ( n, providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^provides.put (  n ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^provides.put ( providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide (  parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^String providedClassName = parent.extractClassNameIfProvide ( n, codingConvention ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide ( n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^String providedClassName = n.extractClassNameIfProvide ( codingConvention, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide (  parent ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide ( n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitFunctionNode (  parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitFunctionNode ( n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitScriptNode (  n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^visitScriptNode ( t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[buglab_swap_variables]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put (  name ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put ( qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^JSError.make ( checkLevel, ctors.get ( ctorName ) , t, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[buglab_swap_variables]^provides.put ( n, providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^provides.put (  n ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^provides.put ( providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide (  parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^String providedClassName = codingConvention.extractClassNameIfProvide ( n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^String providedClassName = parent.extractClassNameIfProvide ( n, codingConvention ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide (  parent ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^codingConvention.extractClassNameIfProvide ( n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitFunctionNode (  parent ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitFunctionNode ( n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitScriptNode (  n ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^visitScriptNode ( t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[buglab_swap_variables]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put (  name ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^ctors.put ( qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make (  ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) ,  MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, ctors.get ( ctorName ) , checkLevel,  ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[buglab_swap_variables]^JSError.make ( checkLevel, ctors.get ( ctorName ) , t, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
