[BugLab_Variable_Misuse]^this.convention = codingConvention;^61^^^^^60^62^this.convention = convention;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] <init> [RETURN_TYPE] CodingConvention)   CodingConvention convention [VARIABLES] AbstractCompiler  compiler  boolean  Map  ctors  provides  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  
[BugLab_Variable_Misuse]^new CheckProvidesCallback ( convention ) ;^51^^^^^49^53^new CheckProvidesCallback ( codingConvention ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[BugLab_Variable_Misuse]^CheckProvidesCallback callback = new CheckProvidesCallback ( convention ) ;^50^51^^^^49^53^CheckProvidesCallback callback = new CheckProvidesCallback ( codingConvention ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[BugLab_Argument_Swapping]^new NodeTraversal ( callback, compiler ) .traverse ( root ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[BugLab_Variable_Misuse]^new NodeTraversal ( compiler, callback ) .traverse ( externs ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[BugLab_Argument_Swapping]^new NodeTraversal ( compiler, root ) .traverse ( callback ) ;^52^^^^^49^53^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  externs  root  CheckProvidesCallback  callback  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( providedClassName != parentull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^if  ( n != providedClassNameull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( providedClassName == null )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^provides.put ( providedClassName, parent ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^provides.put ( n, providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^String providedClassName = codingConvention.extractClassNameIfProvide ( n, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^String providedClassName = convention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^String providedClassName = parent.extractClassNameIfProvide ( n, codingConvention ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^66^^^^^65^80^switch  ( n.getType (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Argument_Swapping]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  parent  String  providedClassName  Map  ctors  provides  
[BugLab_Variable_Misuse]^JSDocInfo info = name.getJSDocInfo (  ) ;^84^^^^^82^103^JSDocInfo info = parent.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( info != nameull && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^name = parent.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^info = parent.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^name = name.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( parent != null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( name != null || name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( ctorName, ctors.get ( t ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Argument_Swapping]^JSError.make ( checkLevel, ctors.get ( ctorName ) , t, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvides CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  checkLevel  DiagnosticType  MISSING_PROVIDE_WARNING  CodingConvention  codingConvention  convention  Node  n  String  ctorName  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( providedClassName != parentull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( n != providedClassNameull )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( providedClassName == null )  {^70^^^^^65^80^if  ( providedClassName != null )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^provides.put ( providedClassName, parent ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^provides.put ( n, providedClassName ) ;^71^^^^^65^80^provides.put ( providedClassName, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^String providedClassName = codingConvention.extractClassNameIfProvide ( n, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^String providedClassName = convention.extractClassNameIfProvide ( n, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^String providedClassName = n.extractClassNameIfProvide ( codingConvention, parent ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^String providedClassName = codingConvention.extractClassNameIfProvide ( parent, n ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^String providedClassName = parent.extractClassNameIfProvide ( n, codingConvention ) ;^68^69^^^^65^80^String providedClassName = codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^66^^^^^65^80^switch  ( n.getType (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^codingConvention.extractClassNameIfProvide ( n, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^codingConvention.extractClassNameIfProvide ( parent, n ) ;^69^^^^^65^80^codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^visitFunctionNode ( parent, n ) ;^75^^^^^65^80^visitFunctionNode ( n, parent ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Variable_Misuse]^visitScriptNode ( t, parent ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Argument_Swapping]^visitScriptNode ( n, t ) ;^78^^^^^65^80^visitScriptNode ( t, n ) ;^[CLASS] CheckProvidesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  providedClassName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^85^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^if  ( n != infoull && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^90^^^^^82^103^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^name = parent.getFirstChild (  ) ;^91^^^^^82^103^name = n.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^info = parent.getJSDocInfo (  ) ;^89^^^^^82^103^info = n.getJSDocInfo (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^name = name.getFirstChild (  ) ;^86^^^^^82^103^name = parent.getFirstChild (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^if  ( parent != null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( name != null || name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Wrong_Operator]^if  ( name == null && name.isQualifiedName (  )  )  {^94^^^^^82^103^if  ( name != null && name.isQualifiedName (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^ctors.put ( qualifiedName, parent ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^ctors.put ( name, qualifiedName ) ;^99^^^^^82^103^ctors.put ( qualifiedName, name ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Variable_Misuse]^String qualifiedName = parent.getQualifiedName (  ) ;^95^^^^^82^103^String qualifiedName = name.getQualifiedName (  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitFunctionNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  CodingConvention  convention  Node  n  name  parent  Visibility  visibility  String  qualifiedName  JSDocInfo  info  Map  ctors  provides  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( ctors, t.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, ctors.get ( checkLevel ) , ctorName, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( checkLevel, ctors.get ( ctorName ) , t, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, MISSING_PROVIDE_WARNING.get ( ctorName ) , checkLevel, ctors, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Variable_Misuse]^JSError.make ( t, 0.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( checkLevel, ctors.get ( ctorName ) , t, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( t, ctorName.get ( ctors ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( MISSING_PROVIDE_WARNING, ctors.get ( ctorName ) , checkLevel, t, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Variable_Misuse]^for  ( String ctorName : null.keySet (  )  )  {^106^^^^^105^115^for  ( String ctorName : ctors.keySet (  )  )  {^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, checkLevel.get ( ctorName ) , ctors, MISSING_PROVIDE_WARNING, ctorName )  ) ;^108^109^110^^^105^115^compiler.report ( JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( t, ctors.get ( MISSING_PROVIDE_WARNING ) , checkLevel, ctorName, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
[BugLab_Argument_Swapping]^JSError.make ( t, ctors.get ( ctorName ) , MISSING_PROVIDE_WARNING, checkLevel, ctorName )  ) ;^109^110^^^^105^115^JSError.make ( t, ctors.get ( ctorName ) , checkLevel, MISSING_PROVIDE_WARNING, ctorName )  ) ;^[CLASS] CheckProvidesCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  ctorName  boolean  Map  ctors  provides  NodeTraversal  t  CodingConvention  convention  Node  n  
