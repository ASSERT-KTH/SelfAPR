[BugLab_Variable_Misuse]^this.reservedNames = null;^62^^^^^60^70^this.reservedNames = reservedNames;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^this.firstChars = reserveCharacters ( FIRST_CHAR, nonFirstChars ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^this.firstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^this.nonFirstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( nonFirstChars == null || reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( reservedCharacters == null || nameCount == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( reservedCharacters.length == null || reservedCharacters == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( reservedCharacters == null && reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( reservedCharacters != null || reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( reservedCharacters == null || reservedCharacters.length != 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( reservedCharacters == null || reservedCharacters.length == -1 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^return nonFirstChars;^81^^^^^79^88^return chars;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^return reservedCharacters;^81^^^^^79^88^return chars;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( nonFirstChars )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( reservedCharacters )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( prefix.length (  )  >= 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( prefix.length (  )  > -1 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( prefix.length (  )  > nameCount )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( !contains ( reservedCharacters, prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( !contains ( prefix, firstChars.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( !contains ( firstChars, prefix.charAt ( 1 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( reservedCharacters )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  >=  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  <  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Arrays.toString ( reservedCharacters )  ) ;^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( !contains ( nonFirstChars, prefix.charAt ( nameCount )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( !contains ( firstChars, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( !contains ( prefix, nonFirstChars.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( !contains ( pos, prefix.charAt ( nonFirstChars )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  >>  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  <<  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( reservedCharacters )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ^  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  |  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Arrays.toString ( reservedCharacters )  ) ;^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^for  ( int nameCount = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^for  ( int prefix = 1; pos < pos.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^for  ( int pos = 1; pos <= prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^for  ||  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^for  >>  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^for  ( int pos = ; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( !contains ( reservedCharacters, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( !contains ( nonFirstChars, pos.charAt ( prefix )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  >  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  >  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "   instanceof   "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Arrays.toString ( firstChars )  ) ;^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  <  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  <  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )   instanceof   ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  !=  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  <<  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  &  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^for  ( int pos = 0; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ||  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  <<  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( !contains ( nonFirstChars, prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( !contains ( firstChars, prefix.charAt ( nameCount )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )   instanceof   ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  >>  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^Arrays.toString ( nonFirstChars )  ) ;^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  >=  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ^  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( firstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  <=  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  &  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^for  ==  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  >=  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  &&  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ||  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ==  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^if  ( !contains ( firstChars, prefix.charAt ( pos )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( reservedCharacters[i] == c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( arr[i] < c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^return false;^111^^^^^108^115^return true;^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^for  ( posnt i = 0; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < nonFirstChars.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < pos; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^for  ( arrnt i = 0; i < i.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^for  ( arr.lengthnt i = 0; i < i; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^for  ( int i = pos; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( firstChars[i] == c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( arr[i] != c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^return true;^114^^^^^108^115^return false;^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^while  ( false )  {^121^^^^^120^148^while  ( true )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^while  ( i >= 0 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^while  ( i > pos )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^name += reservedCharacters[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= pos;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= firstChars.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^i /= nonFirstChars;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^i /= nonFirstChars.length.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = nameCount % nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % nameCount;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % reservedCharacters.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = nonFirstChars % i.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = nonFirstChars.length % i;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = i % nonFirstChars.length.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  ||  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( prefix.isEmpty (  )  )  {^126^^^^^120^148^if  ( name.isEmpty (  )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^name += reservedCharacters[pos];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= pos;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= reservedCharacters.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^i /= firstChars;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^i /= firstChars.length.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = nameCount % firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % nameCount;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = firstChars.length % i;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = i % firstChars;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = i % firstChars.length.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  !=  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^if  ( TokenStream.isKeyword ( prefix )  || reservedNames.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^if  ( TokenStream.isKeyword ( reservedNames )  || name.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^if  ( TokenStream.isKeyword ( name )  && reservedNames.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^name += chars[pos];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= chars.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^return prefix;^146^^^^^120^148^return name;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int i = pos;^124^^^^^120^148^int i = nameCount;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % reservedCharacters.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = firstChars % i.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  &  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Argument_Swapping]^int pos = i % nonFirstChars;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  >  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^while  ( nameCount > 0 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Literal]^while  ( i > -1 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^name += chars[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  |  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^name += nonFirstChars[pos];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^i /= nameCount;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % chars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  &&  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Variable_Misuse]^int pos = i % chars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[BugLab_Wrong_Operator]^int pos = i  ^  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
