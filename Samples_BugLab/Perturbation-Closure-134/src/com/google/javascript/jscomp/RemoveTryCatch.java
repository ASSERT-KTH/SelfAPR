[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[buglab_swap_variables]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^if  ( finallyBlock != tryNodesContainingReturnStatementsull && n.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild (  tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild (  block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^block.addChildAfter (  tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^block.addChildAfter ( tryBlock, finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^block.addChildAfter ( finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild (  tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[buglab_swap_variables]^if  ( tryNodesContainingReturnStatements != null && finallyBlock.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^if  ( finallyBlock != tryNodesContainingReturnStatementsull && n.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild (  tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild (  block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^block.addChildAfter (  tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^block.addChildAfter ( finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^for  ( Node parent = anc;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild (  tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
