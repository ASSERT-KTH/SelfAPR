[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new RemoveTryCatchCode (  )  ) ;^47^^^^^46^48^NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( info != null || info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( info == null && info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( finallyBlock != parentull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^if  ( tryNodesContainingReturnStatements != null && finallyBlock.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock != null || tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( n.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isStatementBlock ( tryBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block = tryBlock;^89^^^^^83^90^block = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( tryBlock, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, parent ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block = new Node ( Token.null ) ;^84^^^^^69^99^block = new Node ( Token.BLOCK ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( tryBlock, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, tryBlock ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock != null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block.addChildAfter ( tryBlock, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block.addChildAfter ( finallyBlock, parent ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^block.addChildAfter ( tryBlock, finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( anc.getType (  )  != Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node anc = n;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node n = parent;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( anc.getType (  )  != Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( parent ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^anc = n.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^JSDocInfo info = tryBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^Node tryBlock = parent.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^Node catchBlock = parent.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^Node finallyBlock = catchBlock == null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Literal]^boolean isInTryBlock = true;^100^^^^^85^115^boolean isInTryBlock = false;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node anc = tryBlock;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^switch  ( tryBlock.getType (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^Node catchBlock = n.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = tryBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.contains ( tryBlock )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^n.detachChildrefinallyBlock (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isStatementBlock ( finallyBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( finallyBlock, block ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block.addChildToFront ( parent ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, finallyBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Argument_Swapping]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block.addChildAfter ( parent, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^block.addChildAfter ( finallyBlock, n ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^anc != null && tryBlock.getType (  )  != Token.FUNCTION;^102^^^^^87^117^anc != null && anc.getType (  )  != Token.FUNCTION;^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatch RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  tryNodesContainingReturnStatements  boolean  isInTryBlock  JSDocInfo  info  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  
[BugLab_Wrong_Operator]^if  ( info != null || info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.shouldPreserveTry (  )  )  {^57^^^^^42^72^if  ( info != null && info.shouldPreserveTry (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent != null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( finallyBlock != parentull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  ( n != finallyBlockull && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  ( tryNodesContainingReturnStatements != null && finallyBlock.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( finallyBlock != null || tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^52^82^if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( n.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^NodeUtil.redeclareVarsInsideBranch ( parent ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isStatementBlock ( tryBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block = n;^89^^^^^83^90^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^parent.replaceChild ( finallyBlock, tryBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, finallyBlock ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^83^90^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, tryBlock ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^parent.replaceChild ( block, n ) ;^85^^^^^70^100^parent.replaceChild ( n, block ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block.addChildToFront ( parent ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( tryBlock != null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null )  {^93^^^^^78^108^if  ( finallyBlock != null )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block.addChildAfter ( tryBlock, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block.addChildAfter ( finallyBlock, parent ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( anc.getType (  )  != Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^for  ( Node anc = tryBlock;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^for  ( Node tryBlock = parent;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^for  ( Node parent = anc;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( anc.getType (  )  != Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.TRY )  {^104^^^^^101^108^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( parent ) ;^105^^^^^101^108^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block = n;^89^^^^^74^104^block = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^anc = tryBlock.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^JSDocInfo info = tryBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node tryBlock = parent.getFirstChild (  ) ;^61^^^^^46^76^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node catchBlock = n.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node finallyBlock = tryBlock != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Operator]^Node finallyBlock = catchBlock == null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Wrong_Literal]^boolean isInTryBlock = true;^100^^^^^85^115^boolean isInTryBlock = false;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^for  ( Node anc = n;^101^^^^^86^116^for  ( Node anc = parent;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^switch  ( tryBlock.getType (  )  )  {^52^^^^^37^67^switch  ( n.getType (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^JSDocInfo info = finallyBlock.getJSDocInfo (  ) ;^56^^^^^41^71^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node catchBlock = finallyBlock.getNext (  ) ;^62^^^^^47^77^Node catchBlock = tryBlock.getNext (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node finallyBlock = n != null ? catchBlock.getNext (  )  : null;^63^^^^^48^78^Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.contains ( finallyBlock )  )  {^68^^^^^53^83^tryNodesContainingReturnStatements.contains ( n )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent.hasOneChild (  )  )  {^73^^^^^58^88^if  ( catchBlock.hasOneChild (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^59^89^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^n.detachChildreparent (  ) ;^79^^^^^64^94^n.detachChildren (  ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isStatementBlock ( finallyBlock )  )  {^83^^^^^68^98^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block.addChildToFront ( n ) ;^86^^^^^71^101^block.addChildToFront ( tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^parent.replaceChild ( finallyBlock, tryBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, finallyBlock ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^parent.replaceChild ( tryBlock, n ) ;^88^^^^^73^103^parent.replaceChild ( n, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^block.addChildAfter ( parent, tryBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Argument_Swapping]^block.addChildAfter ( tryBlock, finallyBlock ) ;^94^^^^^79^109^block.addChildAfter ( finallyBlock, tryBlock ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^anc = parent.getParent (  )  )  {^103^^^^^88^118^anc = anc.getParent (  )  )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( tryBlock.getType (  )  == Token.TRY )  {^104^^^^^89^119^if  ( anc.getType (  )  == Token.TRY )  {^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
[BugLab_Variable_Misuse]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^90^120^tryNodesContainingReturnStatements.add ( anc ) ;^[CLASS] RemoveTryCatchCode  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isInTryBlock  NodeTraversal  t  Node  anc  block  catchBlock  finallyBlock  n  parent  tryBlock  JSDocInfo  info  
