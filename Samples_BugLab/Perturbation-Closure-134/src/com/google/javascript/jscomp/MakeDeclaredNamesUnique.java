[buglab_swap_variables]^Preconditions.checkState ( rootRenamer.getType (  )  != Token.FUNCTION || ! ( declarationRoot instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames (  null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( declarationRoot, null ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( renamer, null, functionBody ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames (  null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( functionBody, null ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^for  ( Node fnParams = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames (  null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( declarationRoot, null ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^if  ( parentame != null && !name.isEmpty (  )  && n != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^if  ( n != newNameull )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^n.setString ( newNameewName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^n.setString ( n ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^String newName = oldName.getReplacementName ( names ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( renamer, n, c ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames (  n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( n, c, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( c,  renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( c, renamer, n ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^findDeclaredNames ( c, n ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^NodeTraversal.traverse (  js, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put (  newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put ( var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put (  newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^nameMap.put ( var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^newName = getUniqueName (  id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^newName = getUniqueName ( name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^declarations.put (  newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^declarations.put ( name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[buglab_swap_variables]^nameUsage.setCount (  0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return nameUsage.add (  1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^declarations.put (  getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return namePrefixPrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return name + namePrefix + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return uniqueIdSupplierPrefix + name + "_" + name.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return new InlineRenamer (  namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return new InlineRenamer ( uniqueIdSupplier,  removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^return new InlineRenamer ( uniqueIdSupplier, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[buglab_swap_variables]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[buglab_swap_variables]^NodeTraversal.traverse (  js, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[buglab_swap_variables]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^nameMap.put (  newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^nameMap.put ( var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^nameMap.put (  newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^nameMap.put ( var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[buglab_swap_variables]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^newName = getUniqueName (  id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^newName = getUniqueName ( name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^declarations.put (  newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^declarations.put ( name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[buglab_swap_variables]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] ContextualRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Multiset  nameUsage  boolean  global  String  oldName  Map  declarations  
[buglab_swap_variables]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[buglab_swap_variables]^nameUsage.setCount (  0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[buglab_swap_variables]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[buglab_swap_variables]^return nameUsage.add (  1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[buglab_swap_variables]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[buglab_swap_variables]^declarations.put (  getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[buglab_swap_variables]^return namePrefixPrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[buglab_swap_variables]^return uniqueIdSupplier + name + "_" + namePrefix.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[buglab_swap_variables]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer (  namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer ( uniqueIdSupplier, removeConstness, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer ( uniqueIdSupplier,  removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer ( uniqueIdSupplier, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[buglab_swap_variables]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
