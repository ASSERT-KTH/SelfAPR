[BugLab_Wrong_Literal]^this.global = false;^304^^^^^303^306^this.global = true;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^this.global = true;^312^^^^^311^314^this.global = false;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer = renamer;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( functionBody.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( renamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( rootRenamer.getType (  )  != Token.FUNCTION || ! ( declarationRoot instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION && ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  == Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer  &&  ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer = 2.peek (  ) .forChildScope (  ) ;^70^^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  < Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer  <  ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( functionBody.getType (  )  == Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( declarationRoot.getType (  )  != Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( functionBody, null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( declarationRoot, null, rootRenamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^for  ( Node functionBody = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^for  ( Node fnParams = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^for  ( Node c = fnParams.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^for  ( Node c = functionBody.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String name = functionBody.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Node functionBody = fnParams.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Node fnParams = functionBody.getFirstChild (  ) .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( namePrefix ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Node functionBody = functionBody.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( fnParams, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( functionBody, null, rootRenamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( renamer, null, functionBody ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( functionBody, null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( declarationRoot, null, rootRenamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^nameStack.push ( rootRenamer ) ;^88^^^^^73^103^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( namePrefix != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^if  ( parentame != null && !name.isEmpty (  )  && n != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( name != null || !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( name == null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( name != null && !name.isEmpty (  )  && parent == null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( namePrefix ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String parentame = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String parentame = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^101^^^^^86^116^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^&& !NodeUtil.isFunctionDeclaration ( parent )  )  {^111^^^^^96^126^&& !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( namePrefix ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^nameStack.push ( rootRenamer ) ;^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( namePrefix ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^nameStack.push ( rootRenamer ) ;^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^return false;^131^^^^^116^146^return true;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( namePrefix != null )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^if  ( n != newNameull )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( newName == null )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( rootRenamer.stripConstIfReplaced (  )  )  {^141^^^^^135^160^if  ( renamer.stripConstIfReplaced (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^n.setString ( parentewName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^n.setString ( namePrefix ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^n.setString ( newNameewName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^n.setString ( n ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String parentewName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^136^^^^^135^160^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( oldName != null )  {^169^^^^^166^174^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( newName == null )  {^169^^^^^166^174^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return oldName;^170^^^^^166^174^return newName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = rootRenamer.getReplacementName ( oldName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = names.getReplacementName ( namePrefix ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^String newName = oldName.getReplacementName ( names ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = names.getReplacementName ( newName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( n == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( parent == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^if  ( n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n != parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^186^^^^^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Node parentameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( parent.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^188^^^^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^renamer.addDeclaredName ( parent.getString (  )  ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^for  ( Node c = parent.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( c, parent, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( c, n, rootRenamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( n, c, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( c, renamer, n ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^findDeclaredNames ( parent, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^findDeclaredNames ( renamer, n, c ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^|| nameNode.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^184^185^^^^180^197^|| parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^|| n == nameNode.getFirstChild (  )  )  {^185^^^^^180^197^|| n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( oldName.indexOf ( "$$" )  <= -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^if  ( oldName.indexOf ( "$$" )  != -2 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( var == null && var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^263^278^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^255^281^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = namePrefix.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^255^281^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^nameMap.put ( var, oldName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^250^280^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = namePrefix.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^249^279^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^nameMap.put ( var, oldName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( -1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^String oldName = parentNode.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( newName.indexOf ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^node.setString ( 0.get ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( oldName.indexOf ( "$$" )  == -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  < Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( -1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^node.setString ( null.get ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( removeConstness )  {^329^^^^^328^342^if  ( global )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^if  ( !declarations.containsKey ( oldName )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Wrong_Operator]^if  ( id == 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Wrong_Literal]^if  ( id != -1 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^newName = getUniqueName ( oldName, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Argument_Swapping]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^int id = incrementNameCount ( oldName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^declarations.put ( oldName, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^declarations.put ( name, oldName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Argument_Swapping]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Wrong_Literal]^if  ( id != id )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^reserveName ( oldName ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^return declarations.get ( newName ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Wrong_Operator]^return name  &&  "$$" + id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[BugLab_Variable_Misuse]^nameUsage.setCount ( oldName, 0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^nameUsage.setCount ( name, 1, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return oldNameUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^return nameUsage.add ( name, 2 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Literal]^return true;^366^^^^^365^367^return false;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( !declarations.containsKey ( oldName )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^declarations.put ( oldName, getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^if  ( oldName.isEmpty (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return oldName;^403^^^^^401^406^return name;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return oldNamePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return oldName + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return namePrefixPrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return name + namePrefix + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return uniqueIdSupplier + name + "_" + namePrefix.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  ^  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (   instanceof   ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Wrong_Operator]^return namePrefix  |  name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return declarations.get ( newName ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return new InlineRenamer ( uniqueIdSupplier, oldName, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return new InlineRenamer ( uniqueIdSupplier, namePrefix, global ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Argument_Swapping]^return new InlineRenamer ( uniqueIdSupplier, removeConstness, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^return global;^420^^^^^419^421^return removeConstness;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  < Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( oldName.indexOf ( "$$" )  == -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^if  ( oldName.indexOf ( "$$" )  != - )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( var == null && var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^263^278^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^255^281^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( , oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^255^281^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^nameMap.put ( var, oldName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Argument_Swapping]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Argument_Swapping]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^newName = newName;^265^^^^^250^280^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Argument_Swapping]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( -1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Argument_Swapping]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^249^279^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^node.setString ( oldName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^nameMap.put ( var, oldName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^String oldName = parentNode.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Variable_Misuse]^if  ( newName.indexOf ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  < Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Operator]^if  ( parentNode.getType (  )  < Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Argument_Swapping]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[BugLab_Wrong_Literal]^this.global = false;^304^^^^^303^306^this.global = true;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[BugLab_Wrong_Literal]^this.global = true;^312^^^^^311^314^this.global = false;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[BugLab_Variable_Misuse]^this.nameUsage = null;^313^^^^^311^314^this.nameUsage = nameUsage;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[BugLab_Variable_Misuse]^if  ( !declarations.containsKey ( newName )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Operator]^if  ( id <= 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Literal]^if  ( id != id )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Variable_Misuse]^newName = getUniqueName ( newName, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Argument_Swapping]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Variable_Misuse]^int id = incrementNameCount ( newName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Variable_Misuse]^declarations.put ( name, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Argument_Swapping]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Operator]^if  ( id >= 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Literal]^if  ( id != 1 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Variable_Misuse]^reserveName ( newName ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Operator]^if  ( id > 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Operator]^if  ( id == 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Wrong_Literal]^if  ( id != -1 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Variable_Misuse]^declarations.put ( newName, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[BugLab_Argument_Swapping]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] ContextualRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Multiset  nameUsage  boolean  global  String  oldName  Map  declarations  
[BugLab_Argument_Swapping]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[BugLab_Wrong_Operator]^return name  >=  "$$" + id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[BugLab_Wrong_Literal]^nameUsage.setCount ( name, -1, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[BugLab_Argument_Swapping]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[BugLab_Argument_Swapping]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[BugLab_Wrong_Literal]^return nameUsage.add ( name, 2 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[BugLab_Wrong_Literal]^return nameUsage.add ( name, null ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[BugLab_Wrong_Literal]^return true;^366^^^^^365^367^return false;^[CLASS] ContextualRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[BugLab_Variable_Misuse]^if  ( !declarations.containsKey ( namePrefix )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Variable_Misuse]^declarations.put ( namePrefix, getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Variable_Misuse]^return namePrefix;^403^^^^^401^406^return name;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Variable_Misuse]^if  ( namePrefix.isEmpty (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Argument_Swapping]^return uniqueIdSupplierPrefix + name + "_" + name.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Argument_Swapping]^return uniqueIdSupplier + name + "_" + namePrefix.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Wrong_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  !=  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Wrong_Operator]^return namePrefix  |  name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[BugLab_Variable_Misuse]^return declarations.get ( namePrefix ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Argument_Swapping]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Variable_Misuse]^return new InlineRenamer ( null, namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Variable_Misuse]^return new InlineRenamer ( uniqueIdSupplier, oldName, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Argument_Swapping]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Argument_Swapping]^return new InlineRenamer ( uniqueIdSupplier, removeConstness, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[BugLab_Argument_Swapping]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
