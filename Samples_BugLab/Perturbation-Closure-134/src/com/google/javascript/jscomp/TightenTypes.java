[BugLab_Wrong_Literal]^private boolean isNewCall = true;^384^^^^^379^389^private boolean isNewCall = false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [VARIABLES] 
[BugLab_Wrong_Literal]^private boolean isCallFunction = true;^385^^^^^380^390^private boolean isCallFunction = false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair   [VARIABLES] 
[BugLab_Variable_Misuse]^this.scope = topScope;^270^^^^^269^273^this.scope = scope;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] String)   ConcreteScope scope String name [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.name = propName;^271^^^^^269^273^this.name = name;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] String)   ConcreteScope scope String name [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.type = slot;^272^^^^^269^273^this.type = ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] String)   ConcreteScope scope String name [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.type = thisType;^321^^^^^319^325^this.type = type;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] ConcreteType)   ConcreteSlot slot ConcreteType type [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.expression = receiver;^335^^^^^333^339^this.expression = expr;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   ConcreteSlot slot Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( receiver ) ;^338^^^^^333^339^Preconditions.checkNotNull ( expr ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   ConcreteSlot slot Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^354^^^^^353^361^this.receiver = receiver;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.propName = firstArgument.getNext (  ) .getString (  ) ;^355^^^^^353^361^this.propName = receiver.getNext (  ) .getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.expression = receiver;^356^^^^^353^361^this.expression = expr;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( firstArgument ) ;^358^^^^^353^361^Preconditions.checkNotNull ( receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( name ) ;^359^^^^^353^361^Preconditions.checkNotNull ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( receiver ) ;^360^^^^^353^361^Preconditions.checkNotNull ( expr ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^391^^^^^390^393^this.receiver = receiver;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^392^^^^^390^393^this.firstArgument = firstArgument;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^464^^^^^462^467^this.receiver = receiver;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] List)   Node receiver ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.thisType = type;^465^^^^^462^467^this.thisType = thisType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] List)   Node receiver ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.isNewCall = isCallFunction;^488^^^^^486^494^this.isNewCall = isNewCall;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^489^^^^^486^494^this.receiver = receiver;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.propName = name;^490^^^^^486^494^this.propName = propName;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^491^^^^^486^494^this.firstArgument = firstArgument;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( firstArgument ) ;^493^^^^^486^494^Preconditions.checkNotNull ( receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^545^^^^^544^550^this.receiver = receiver;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.propName = name;^546^^^^^544^550^this.propName = propName;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^547^^^^^544^550^this.firstArgument = firstArgument;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( firstArgument ) ;^549^^^^^544^550^Preconditions.checkNotNull ( receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.scope = topScope;^579^^^^^578^581^this.scope = scope;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] TightenTypes$ConcreteScope,boolean)   ConcreteScope scope boolean inExterns [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.concrete = type;^1371^^^^^1370^1374^this.concrete = concrete;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] JSType)   ConcreteType concrete JSType jstype [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.hashcode = type.hashCode (  )  + getJSTypeHashCode (  ) ;^1373^^^^^1370^1374^this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] JSType)   ConcreteType concrete JSType jstype [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^this.hashcode = concrete.hashCode (  <<  )  + getJSTypeHashCode (  ) ;^1373^^^^^1370^1374^this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] JSType)   ConcreteType concrete JSType jstype [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope getTopScope (  )  { return scope; }^124^^^^^119^129^ConcreteScope getTopScope (  )  { return topScope; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getTopScope [RETURN_TYPE] TightenTypes$ConcreteScope   [VARIABLES] Set  allInstantiatedTypes  JSType  jstype  Node  expr  expression  firstArgument  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  List  actions  argTypes  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^topScope.initForExternRoot ( receiver ) ;^136^^^^^121^151^topScope.initForExternRoot ( externRoot ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^long maxIterations = i;^145^^^^^130^160^long maxIterations = 1000;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^long iterations = hashcode;^146^^^^^131^161^long iterations = 0;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Set<ConcreteScope> workSet = Sets.newHashSet ( varScope ) ;^148^^^^^133^163^Set<ConcreteScope> workSet = Sets.newHashSet ( topScope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^List<ConcreteScope> workList = Lists.newArrayList ( varScope ) ;^149^^^^^134^164^List<ConcreteScope> workList = Lists.newArrayList ( topScope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( slot.addConcreteType ( assign.type )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( assign.slot.addConcreteType ( type )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( assign.addConcreteType ( assign.slot.type )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( assign.type.slot.addConcreteType ( assign )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( topScope != scope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( varScope != topScope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( scope != varScope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( varScope != scope )  || !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( varScope <= scope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^workSet.add ( topScope ) ;^162^^^^^147^177^workSet.add ( varScope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^workList.add ( topScope ) ;^163^^^^^148^178^workList.add ( varScope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^changed = false;^159^^^^^144^174^changed = true;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteScope varScope = assign.slot.slot.getScope (  ) ;^160^^^^^145^175^ConcreteScope varScope = assign.slot.getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteScope varScope = assign.getScope (  ) ;^160^^^^^145^175^ConcreteScope varScope = assign.slot.getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope varScope = slot.getScope (  ) ;^160^^^^^145^175^ConcreteScope varScope = assign.slot.getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( varScope > scope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( hashcodent i = 0; i < workList.size (  ) ; ++i )  {^154^^^^^139^169^for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= workList.size (  ) ; ++i )  {^154^^^^^139^169^for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < workList.size (  ) ; ++i )  {^154^^^^^139^169^for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( assign.slot.addConcreteType ( thisType )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( assign.slot.slot.addConcreteType ( assign.type )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( assign.type.addConcreteType ( assign.slot )  )  {^158^^^^^143^173^if  ( assign.slot.addConcreteType ( assign.type )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( varScope != varScope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( varScope == scope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( varScope >= scope )  && !workSet.contains ( varScope )  )  {^161^^^^^146^176^if  (  ( varScope != scope )  && !workSet.contains ( varScope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope scope = workList.get ( hashcode ) ;^155^^^^^140^170^ConcreteScope scope = workList.get ( i ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteScope scope = i.get ( workList ) ;^155^^^^^140^170^ConcreteScope scope = workList.get ( i ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Action action : varScope.getActions (  )  )  {^156^^^^^141^171^for  ( Action action : scope.getActions (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Assignment assign : action.getAssignments ( varScope )  )  {^157^^^^^142^172^for  ( Assignment assign : action.getAssignments ( scope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( Assignment assign : scope.getAssignments ( action )  )  {^157^^^^^142^172^for  ( Assignment assign : action.getAssignments ( scope )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^changed = true;^153^^^^^138^168^changed = false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < 2.size (  ) ; ++i )  {^154^^^^^139^169^for  ( int i = 0; i < workList.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ++iterations != iterations, NON_HALTING_ERROR_MSG ) ;^169^170^^^^154^184^Preconditions.checkState ( ++iterations != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ++iterations != maxIterations, propName ) ;^169^170^^^^154^184^Preconditions.checkState ( ++iterations != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Preconditions.checkState ( ++iterations != NON_HALTING_ERROR_MSG, maxIterations ) ;^169^170^^^^154^184^Preconditions.checkState ( ++iterations != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ++iterations == maxIterations, NON_HALTING_ERROR_MSG ) ;^169^170^^^^154^184^Preconditions.checkState ( ++iterations != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] process [RETURN_TYPE] void   Node externRoot Node jsRoot [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  long  iterations  maxIterations  Assignment  assign  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^public StaticScope<ConcreteType> getParentScope (  )  { return varScope; }^191^^^^^186^196^public StaticScope<ConcreteType> getParentScope (  )  { return parent; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getParentScope [RETURN_TYPE] StaticScope   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return slots.get ( propName ) ;^195^^^^^194^196^return slots.get ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return name.get ( slots ) ;^195^^^^^194^196^return slots.get ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> var = getOwnSlot ( propName ) ;^200^^^^^199^208^StaticSlot<ConcreteType> var = getOwnSlot ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^199^208^if  ( var != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( varScope != null )  {^203^^^^^199^208^} else if  ( parent != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( parent == null )  {^203^^^^^199^208^} else if  ( parent != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return parent.getSlot ( propName ) ;^204^^^^^199^208^return parent.getSlot ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return varScope.getSlot ( name ) ;^204^^^^^199^208^return parent.getSlot ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return name.getSlot ( parent ) ;^204^^^^^199^208^return parent.getSlot ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  StaticSlot  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return  ( slot != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return  ( thisVar != null )  ? thisVar.getType (  )  : varScope;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return  ( ConcreteType.NONE != null )  ? thisVar.getType (  )  : thisVar;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return  ( thisVar == null )  ? thisVar.getType (  )  : ConcreteType.NONE;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^slots.put ( propName, new ConcreteSlot ( this, name )  ) ;^223^^^^^222^224^slots.put ( name, new ConcreteSlot ( this, name )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] declareSlot [RETURN_TYPE] void   String name Node declaration [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot var = new ConcreteSlot ( this, propName ) ;^228^^^^^227^231^ConcreteSlot var = new ConcreteSlot ( this, name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] declareSlot [RETURN_TYPE] void   String name Node declaration ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^slots.put ( propName, var ) ;^230^^^^^227^231^slots.put ( name, var ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] declareSlot [RETURN_TYPE] void   String name Node declaration ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( receiver ) ;^238^^^^^237^245^Preconditions.checkNotNull ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( receiver.getType (  )  == Token.FUNCTION )  {^239^^^^^237^245^if  ( decl.getType (  )  == Token.FUNCTION )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( decl.getType (  )  == Token.varScope )  {^239^^^^^237^245^if  ( decl.getType (  )  == Token.FUNCTION )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( decl.getType (  )  <= Token.FUNCTION )  {^239^^^^^237^245^if  ( decl.getType (  )  == Token.FUNCTION )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^decl = firstArgument.getLastChild (  ) ;^240^^^^^237^245^decl = decl.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^decl = receiver.getLastChild (  ) ;^240^^^^^237^245^decl = decl.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( jsRoot.getType (  )  == Token.BLOCK ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( decl.getType (  )  == Token.varScope ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( decl.getType (  )  >= Token.BLOCK ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( receiver.getType (  )  == Token.BLOCK ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, jsRoot, new CreateScope ( this, false )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( decl, compiler, new CreateScope ( this, false )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( receiver ) ;^249^^^^^248^253^Preconditions.checkNotNull ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( receiver.getType (  )  == Token.BLOCK ) ;^250^^^^^248^253^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( decl.getType (  )  == Token.varScope ) ;^250^^^^^248^253^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( decl.getType (  )  != Token.BLOCK ) ;^250^^^^^248^253^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^252^^^^^248^253^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, firstArgument, new CreateScope ( this, true )  ) ;^252^^^^^248^253^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( decl, compiler, new CreateScope ( this, true )  ) ;^252^^^^^248^253^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^void addAction ( Action actions )  { action.add ( action ) ; }^256^^^^^251^261^void addAction ( Action action )  { actions.add ( action ) ; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addAction [RETURN_TYPE] void   Action action [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return getTypeOfThis (  <<  ) .toString (  )  + " " + getSlots (  ) ;^259^^^^^258^260^return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return getTypeOfThis (  ) .toString (  )   >  " " + getSlots (  ) ;^259^^^^^258^260^return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope getScope (  )  { return varScope; }^276^^^^^271^281^ConcreteScope getScope (  )  { return scope; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getScope [RETURN_TYPE] TightenTypes$ConcreteScope   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^@Override public String getName (  )  { return propName; }^279^^^^^274^284^@Override public String getName (  )  { return name; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^@Override public ConcreteType getType (  )  { return thisType; }^281^^^^^276^286^@Override public ConcreteType getType (  )  { return type; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getType [RETURN_TYPE] ConcreteType   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^public boolean isTypeInferred (  )  { return false; }^284^^^^^279^289^public boolean isTypeInferred (  )  { return true; }^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType origType = type;^291^^^^^290^294^ConcreteType origType = this.type;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.type = thisType.unionWith ( type ) ;^292^^^^^290^294^this.type = origType.unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.type = origType.unionWith ( thisType ) ;^292^^^^^290^294^this.type = origType.unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^this.type = type.unionWith ( origType ) ;^292^^^^^290^294^this.type = origType.unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return !this.type.equals ( type ) ;^293^^^^^290^294^return !this.type.equals ( origType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return getName (  ==  )  + ": " + getType (  ) ;^297^^^^^296^298^return getName (  )  + ": " + getType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return getName (  )   <=  ": " + getType (  ) ;^297^^^^^296^298^return getName (  )  + ": " + getType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( varScope, expression )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.newArrayList ( new Assignment ( var, inferConcreteType ( scope, expression )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, firstArgument )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( expression, scope )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( expression, inferConcreteType ( scope, slot )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new Assignment ( slot, inferConcreteType ( varScope, expression )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new Assignment ( var, inferConcreteType ( scope, expression )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new Assignment ( slot, inferConcreteType ( scope, firstArgument )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^new Assignment ( scope, inferConcreteType ( slot, expression )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^new Assignment ( expression, inferConcreteType ( scope, slot )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, receiver )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( scope, inferConcreteType ( slot, expression )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^new Assignment ( slot, inferConcreteType ( expression, scope )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  origType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^370^^^^^369^379^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^370^^^^^369^379^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, jsRoot ) ;^370^^^^^369^379^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType exprType = inferConcreteType ( varScope, expression ) ;^371^^^^^369^379^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType exprType = inferConcreteType ( scope, receiver ) ;^371^^^^^369^379^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType exprType = inferConcreteType ( expression, scope ) ;^371^^^^^369^379^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, type )  ) ;^376^^^^^369^379^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, exprType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^: type.getPropertySlots ( propName )  )  {^375^^^^^369^379^: recvType.getPropertySlots ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^: recvType.getPropertySlots ( name )  )  {^375^^^^^369^379^: recvType.getPropertySlots ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^: propName.getPropertySlots ( recvType )  )  {^375^^^^^369^379^: recvType.getPropertySlots ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, thisType )  ) ;^376^^^^^369^379^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, exprType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  StaticSlot  prop  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^this.propName = name;^396^^^^^395^398^this.propName = propName;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setPropName [RETURN_TYPE] TightenTypes$FunctionCallBuilder   String propName [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ! ( isCallFunction && isNewCall ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ! ( isNewCall && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Preconditions.checkState ( ! ( isNew && isCallFunction ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ! ( isCallFunction || isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^isNewCall = isNewCall;^405^^^^^401^407^isNewCall = isNew;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^isCallFunction = false;^417^^^^^413^419^isCallFunction = true;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] setIsCallFunction [RETURN_TYPE] TightenTypes$FunctionCallBuilder   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNew )  {^422^^^^^421^427^if  ( isCallFunction )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isCallFunction, receiver, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, receiver, name, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, receiver, propName, jsRoot ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( receiver, isNewCall, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, firstArgument, propName, receiver ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, receiver, firstArgument, propName ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( firstArgument, receiver, propName, isNewCall ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNew, receiver, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, jsRoot, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, receiver, propName, receiver ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( propName, receiver, isNewCall, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new NativeCallFunctionCall ( externRoot, propName, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new NativeCallFunctionCall ( receiver, name, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new NativeCallFunctionCall ( receiver, propName, externRoot ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( firstArgument, propName, receiver ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( receiver, firstArgument, propName ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( propName, receiver, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, firstArgument, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, propName, receiver, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new NativeCallFunctionCall ( firstArgument, propName, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( var != null )  {^444^^^^^434^450^if  ( variable != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( variable == null )  {^444^^^^^434^450^if  ( variable != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment ( var, argTypes.get ( i )  )  ) ;^445^^^^^434^450^assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment ( variable, argTypes.get ( hashcode )  )  ) ;^445^^^^^434^450^assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^assigns.add ( new Assignment ( i, argTypes.get ( variable )  )  ) ;^445^^^^^434^450^assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^assigns.add ( new Assignment ( argTypes, variable.get ( i )  )  ) ;^445^^^^^434^450^assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^assigns.add ( new Assignment ( variable, i.get ( argTypes )  )  ) ;^445^^^^^434^450^assigns.add ( new Assignment ( variable, argTypes.get ( i )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( hashcodent i = 0; i < argTypes.size (  ) ; ++i )  {^440^^^^^434^450^for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( argTypesnt i = 0; i < i.size (  ) ; ++i )  {^440^^^^^434^450^for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > argTypes.size (  ) ; ++i )  {^440^^^^^434^450^for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( hashcode ) ;^441^^^^^434^450^ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteSlot variable =  ( ConcreteSlot )  i.getParameterSlot ( fType ) ;^441^^^^^434^450^ConcreteSlot variable =  ( ConcreteSlot )  fType.getParameterSlot ( i ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment (  ( ConcreteSlot )  fType.getThisSlot (  ) , type )  ) ;^439^^^^^434^450^assigns.add ( new Assignment (  ( ConcreteSlot )  fType.getThisSlot (  ) , thisType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^assigns.add ( new Assignment (  ( ConcreteSlot )  thisType.getThisSlot (  ) , fType )  ) ;^439^^^^^434^450^assigns.add ( new Assignment (  ( ConcreteSlot )  fType.getThisSlot (  ) , thisType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^for  ( int i = i; i < argTypes.size (  ) ; ++i )  {^440^^^^^434^450^for  ( int i = 0; i < argTypes.size (  ) ; ++i )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType fType : type.getFunctions (  )  )  {^437^^^^^434^450^for  ( ConcreteFunctionType fType : recvType.getFunctions (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getFunctionCallAssignments [RETURN_TYPE] List   ConcreteType recvType ConcreteType thisType ConcreteType> argTypes [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteFunctionType  fType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( inferConcreteType ( varScope, receiver ) , thisType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( inferConcreteType ( scope, externRoot ) , thisType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , recvType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( receiver, scope ) , thisType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( scope, argTypes ) , thisType, receiver ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , argTypes, thisType ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , type, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( thisType, receiver ) , scope, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( inferConcreteType ( scope, firstArgument ) , thisType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^498^^^^^483^513^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, externRoot ) ;^498^^^^^483^513^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^498^^^^^483^513^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( propName == null )  {^502^^^^^487^517^if  ( propName != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^thisType = type;^503^^^^^488^518^thisType = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = type.getPropertyType ( propName ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = thisType.getPropertyType ( name ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^recvType = propName.getPropertyType ( thisType ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = recvType.getPropertyType ( propName ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isAll (  )  )  {^507^^^^^492^522^if  ( recvType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.isAll (  )  )  {^507^^^^^492^522^if  ( recvType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^523^^^^^508^538^if  ( added )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^thisType = recvType.unionWith ( instType ) ;^520^^^^^505^535^thisType = thisType.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^thisType = instType.unionWith ( thisType ) ;^520^^^^^505^535^thisType = thisType.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^boolean added = thisType.add ( allInstantiatedTypes ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^: type.getFunctionInstanceTypes (  )  )  {^519^^^^^504^534^: recvType.getFunctionInstanceTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^thisType = type.unionWith ( instType ) ;^520^^^^^505^535^thisType = thisType.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^boolean added = allInstantiatedTypes.add ( type ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^boolean added = allInstantiatedTypes.add ( recvType ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^boolean added = this.add ( thisType ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node externRoot = firstArgument; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node arg = jsRoot; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( Node firstArgument = arg; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^for  ( Node arg = firstArgument; arg == null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( varScope, arg )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, receiver )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, externRoot )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^argTypes.add ( inferConcreteType ( arg, scope )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node jsRoot = firstArgument; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node arg = receiver; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node firstArgument = firstArgument; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, firstArgument )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( type, thisType, argTypes ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( recvType, type, argTypes ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( recvType, thisType, 1 ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( thisType, recvType, argTypes ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( recvType, argTypes, thisType ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( argTypes, thisType, recvType ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( varScope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType thisType =  ( expression != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType thisType =  ( scope != null ) ? inferConcreteType ( firstArgument, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^ConcreteType thisType =  ( firstArgument == null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^? inferConcreteType ( varScope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^554^555^^^^552^570^? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^? inferConcreteType ( firstArgument, scope ) : getTopScope (  ) .getTypeOfThis (  ) ;^554^555^^^^552^570^? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, jsRoot ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( varScope, receiver ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, expression ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( recvType instanceof ConcreteInstanceType || (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( recvType  &&  ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = thisType.getPropertyType ( name ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^recvType = propName.getPropertyType ( thisType ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = recvType.getPropertyType ( propName ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^recvType = type.getPropertyType ( propName ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node externRoot = firstArgument.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( Node firstArgument = arg.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( varScope, arg )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, receiver )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^argTypes.add ( inferConcreteType ( arg, scope )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, jsRoot )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^arg = jsRoot.getNext (  )  )  {^566^^^^^552^570^arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node arg = externRoot.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node arg = jsRoot.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^arg = externRoot.getNext (  )  )  {^566^^^^^552^570^arg = arg.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, firstArgument )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, externRoot )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( type, thisType, argTypes ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( recvType, type, argTypes ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( thisType, recvType, argTypes ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( argTypes, thisType, recvType ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( recvType, argTypes, thisType ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  firstArgument  jsRoot  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  origType  recvType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^590^^^^^575^605^if  ( inExterns )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  != nameull )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( nameame.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, nameame.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( nameame, n.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( nameNode, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( jsRootame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRootame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRoot.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( firstArgument, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( firstArgumentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^name, lhs.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhsame.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( name.getString (  ) , n, createType ( name, varScope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n, createType ( n, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( scopeame.getString (  ) , n, createType ( name, n )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( scope.getString (  ) , n, createType ( name, name )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRoot.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRootame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  != nameull )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( nameame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( jsRoot, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiverame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, nameame.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( nameame, n.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( firstArgument, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNew )  {^607^^^^^592^622^if  ( inExterns )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isNone (  )  )  {^611^^^^^596^626^if  ( type.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( varScope != null )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( scope != lhsull )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( n != scopeull )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( scope == null )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  || type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( type.isNone (  )  && type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createType ( nameNode.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isNone (  )  || type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createUnionWithSubTypes ( recvType ) ;^620^^^^^605^635^type = createUnionWithSubTypes ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node firstArgumentameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgumentameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, thisType ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , nameNode, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( typeameNode.getString (  ) , n, n ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( type.getString (  ) , n, nameNode ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createType ( jsRoot.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiverameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , firstArgument.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , name.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createType ( firstArgument.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createUnionWithSubTypes ( thisType ) ;^620^^^^^605^635^type = createUnionWithSubTypes ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, retType ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameNodeameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( n.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createUnionWithSubTypes ( retType ) ;^620^^^^^605^635^type = createUnionWithSubTypes ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createType ( lhs.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , firstArgument ) ;^608^^^^^593^623^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , jsRoot.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^597^627^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode ) ;^608^^^^^593^623^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isNone (  )  )  {^611^^^^^596^626^if  ( type.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , jsRoot.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRootameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, recvType ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( scope != firstArgumentull )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isNone (  )  || type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , nameNode.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^597^627^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = createType ( receiver.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiverameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node nameameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( name )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNew && type.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( type && inExterns.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( inExterns || type.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( inExterns && type.getInstanceType (  )  == null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( jsRoot, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( n, varScope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteFunctionType type = createConcreteFunction ( scope, n ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( lhs, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( name.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( nameNode, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( firstArgument, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNewCall && type.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^647^^^^^632^662^if  ( inExterns )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( firstArgument, n.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhs, firstArgument.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, lhs.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( name, n.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getType (  )  == Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  != Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , jsRoot.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope =  ( ConcreteScope )  thisType.getScope (  ) ;^653^^^^^638^668^scope =  ( ConcreteScope )  type.getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( varScope == null )  break;^658^^^^^643^673^if  ( scope == null )  break;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( scope != null )  break;^658^^^^^643^673^if  ( scope == null )  break;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isNone (  )  || type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( type.isNone (  )  && type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isFunction (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.isFunctiofirstArgument (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( name.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null && ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  != null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   >  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^retType = createUnionWithSubTypes ( type ) ;^673^^^^^658^688^retType = createUnionWithSubTypes ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) firstArgument.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = retType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( type ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType newret = retType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( type ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( nameNode.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^|| ! ( firstArgument.getJSType (  )  instanceof FunctionType )  )  {^667^^^^^652^682^|| ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) nameNode.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = thisType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( recvType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  thisType.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, receiver, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, thisType ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  n.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, type, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, newret, n ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  newret.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, type ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  recvType.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   ==  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^retType = createUnionWithSubTypes ( thisType ) ;^673^^^^^658^688^retType = createUnionWithSubTypes ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , jsRoot ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope =  ( ConcreteScope )  recvType.getScope (  ) ;^653^^^^^638^668^scope =  ( ConcreteScope )  type.getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( retType.isFunction (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^|| ! ( nameNode.getJSType (  )  instanceof FunctionType )  )  {^667^^^^^652^682^|| ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) n.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^retType = createUnionWithSubTypes ( recvType ) ;^673^^^^^658^688^retType = createUnionWithSubTypes ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( thisType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType newret = recvType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, firstArgument, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, retType ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( name.getLastChild (  ) .getString (  ) , n, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , jsRoot, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getLastChild (  ) .getString (  ) , lhs, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , type, n ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getLastChild (  ) .getString (  ) , n, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  < Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , receiver.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  || type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isFunction (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.isFunctiojsRoot (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   >>  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) name.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRoot.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^|| ! ( receiver.getJSType (  )  instanceof FunctionType )  )  {^667^^^^^652^682^|| ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, jsRoot, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   ||  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getType (  )  == Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( receiver.getType (  )  != Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( receiver.getType (  )  > Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( receiver.getType (  )  <= Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( parentew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( receiverew FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  < Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( jsRootew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  != Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( nameew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( "call".equals ( lhs.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, jsRoot.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( n, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, firstArgument.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( n.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, jsRoot.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^first, firstArgument.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( n, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, lhs.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, n.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, jsRoot.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, name.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, firstArgument.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( lhs.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( jsRoot.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( receiver.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( n.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, jsRoot.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, name.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^first, jsRoot.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, n.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( name.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( nameNode.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node first = parent.getFirstChild (  ) ;^689^^^^^674^704^Node first = receiver.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node first = firstArgument.getFirstChild (  ) ;^689^^^^^674^704^Node first = receiver.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( "call".equals ( jsRoot.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, lhs.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^first, name.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( n, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, jsRoot.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, lhs.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, firstArgument.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( name.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^692^722^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( lhs.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, lhs.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( name, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^first, n.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( first.getType (  )  == Token.2 )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^first, jsRoot.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == firstArgument )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( n.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == parent )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.CATCH || parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  != n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^709^739^scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( receiver.getFirstChild (  )  != null )  {^731^^^^^716^746^if  ( n.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  )  == null )  {^731^^^^^716^746^if  ( n.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( firstArgumentew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new VariableAssignAction ( ( ConcreteSlot )  varScope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( scopeew VariableAssignAction ( ( ConcreteSlot )  n.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( ConcreteSlot )  varScope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^733^734^^^^718^748^( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( nameNodeame = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( receiver = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( nameame = n.getFirstChild (  ) ; n != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^for  ( name = n.getFirstChild (  ) ; name == null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRootame.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( jsRoot, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiverame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^name, firstArgument.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgumentame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgumentame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parent, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( nameNodeame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^584^614^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( parentame.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRootame.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( firstArgumentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^name, firstArgument.getFirstChild (  ) , n )  ) ;^599^^^^^584^614^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( nameame = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( firstArgument = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( name, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , firstArgument.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^597^627^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node lhs = jsRoot.getFirstChild (  ) ;^646^^^^^631^661^Node lhs = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , name ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = nameNode.getFirstChild (  ) ;^687^^^^^672^702^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node first = jsRoot.getFirstChild (  ) ;^689^^^^^674^704^Node first = receiver.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^switch  ( jsRoot.getType (  )  )  {^585^^^^^570^600^switch  ( n.getType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( receiverame = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhsame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( jsRootame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  )  {^611^^^^^596^626^if  ( type.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , receiver.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node jsRootameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node lhs = lhs.getFirstChild (  ) ;^646^^^^^631^661^Node lhs = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isNone (  )  || type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( receiver.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( firstArgument.getLastChild (  ) .getString (  ) , n, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , firstArgument, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, thisType ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^scope.declareSlot ( type.getLastChild (  ) .getString (  ) , n, lhs ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhs, nameNode.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhs, lhs.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = firstArgument.getFirstChild (  ) ;^687^^^^^672^702^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getType (  )  == Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( "call".equals ( name.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( parent.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, n.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( jsRoot, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setPropName ( jsRoot.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^692^722^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( parentew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^addAction ( receiverew FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  != Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( nameew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  <= Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( lhs, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( nameNodeew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( firstArgument, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^.setIsNewCall ( firstArgument.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^698^728^.setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^709^739^scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^709^739^scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( firstArgument.getFirstChild (  )  != null )  {^731^^^^^716^746^if  ( n.getFirstChild (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^addAction ( nameew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType.RETURN_SLOT_NAME ) , receiver.getFirstChild (  )  )  ) ;^734^^^^^719^749^ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Collection<Action> actions = getImplicitActions ( lhs ) ;^739^^^^^724^754^Collection<Action> actions = getImplicitActions ( n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Collection<Action> actions = getImplicitActions ( firstArgument ) ;^739^^^^^724^754^Collection<Action> actions = getImplicitActions ( n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( action != null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( actionss != null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( actions == null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Action  action  Set  allInstantiatedTypes  workSet  JSType  jstype  NodeTraversal  t  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ConcreteFunctionType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  actions  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( rhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( lhs.getFirstChild (  ) .getType (  )  <= Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  ^  parent.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for getref: " + jsRoot.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  ==  parent.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^"Bad LHS for getref: " + jsRoot.toStringTree (  )  ) ;^790^^^^^786^791^"Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new VariableAssignAction ( variable, rhs )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, name )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( new VariableAssignAction ( rhs, var )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( lhs, rhs )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, name )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( rhs, receiver )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new VariableAssignAction ( var, lhs )  ) ;^774^^^^^759^789^new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^new VariableAssignAction ( rhs, var )  ) ;^774^^^^^759^789^new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new PropertyAssignAction ( parent, rhs )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^new PropertyAssignAction ( receiver, name )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^new PropertyAssignAction ( rhs, receiver )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "   instanceof   parent.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for assignment: " + lhs.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for assignment: "  >=  parent.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( n.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot var =  ( ConcreteSlot )  varScope.getSlot ( lhs.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteSlot var =  ( ConcreteSlot )  lhs.getSlot ( scope.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = rhs.getFirstChild (  ) ;^777^^^^^762^792^Node receiver = lhs.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for getref: " + jsRoot.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  <<  parent.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for assignment: " + receiver.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for assignment: "  ^  parent.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^switch  ( jsRoot.getType (  )  )  {^767^^^^^752^782^switch  ( lhs.getType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( jsRoot.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( rhs.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( variable != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", n.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Preconditions.checkState ( lhs != null, "Type tightener could not find variable with name %s", var.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkState ( var == null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, jsRoot )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = n.getFirstChild (  ) ;^777^^^^^762^792^Node receiver = lhs.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( nameNode, rhs )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, parent )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( n.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( nameNode.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^"Bad LHS for getref: " + lhs.toStringTree (  )  ) ;^790^^^^^775^805^"Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^"Bad LHS for assignment: " + lhs.toStringTree (  )  ) ;^795^^^^^780^810^"Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( fun == null )  {^803^^^^^799^812^if  ( fun != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^thisType = createType ( jstype ) ;^804^^^^^799^812^thisType = createType ( jsThisType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( createType ( receiver, scope )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( createType ( arg, varScope )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^argTypes.add ( createType ( scope, arg )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( createType ( nameNode, scope )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^argTypes.add ( createType ( n, scope )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new ExternFunctionCall ( n, thisType, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new ExternFunctionCall ( receiver, type, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new ExternFunctionCall ( thisType, receiver, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new ExternFunctionCall ( receiver, argTypes, thisType ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return new ExternFunctionCall ( argTypes, thisType, receiver ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new ExternFunctionCall ( lhs, thisType, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return new ExternFunctionCall ( receiver, thisType, this ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  FunctionType  fun  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getJSType (  )  != null )  {^815^^^^^814^820^if  ( n.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( n.getJSType (  )  == null )  {^815^^^^^814^820^if  ( n.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return name.getJSType (  ) ;^816^^^^^814^820^return n.getJSType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return parent.getJSType (  ) ;^816^^^^^814^820^return n.getJSType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return rhs.getJSType (  ) ;^816^^^^^814^820^return n.getJSType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsRoot.getJSType (  )  != null )  {^815^^^^^814^820^if  ( n.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !inExterns && jsRoot.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !isNewCall && receiver.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( !inExterns || receiver.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( !inExterns && receiver.getType (  )  > Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, lhs.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromCall ( receiver, n.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( rhs, receiver.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, jsRoot.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( !inExterns || lhs.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( !inExterns && lhs.getType (  )  >= Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( jsRoot.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , name.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromProp ( n.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , lhs.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , rhs.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( name.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( rhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^lhs.getLastChild (  ) .getString (  ) , parent.getLastChild (  )  ) ;^846^^^^^826^851^lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( nameNode, receiver.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , jsRoot.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = parent.getFirstChild (  ) ;^834^^^^^826^851^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node lhs = nameNode.getFirstChild (  ) ;^841^^^^^826^851^Node lhs = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^switch  ( lhs.getType (  )  )  {^827^^^^^826^851^switch  ( n.getType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = lhs.getFirstChild (  ) ;^834^^^^^826^851^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !inExterns && name.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( name, receiver.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, name.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, rhs.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node lhs = lhs.getFirstChild (  ) ;^841^^^^^826^851^Node lhs = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !inExterns && name.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( n.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^lhs.getLastChild (  ) .getString (  ) , nameNode.getLastChild (  )  ) ;^846^^^^^826^851^lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  jsThisType  jstype  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = nameNode.getFirstChild (  ) ;^855^^^^^840^870^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node receiver = lhs.getFirstChild (  ) ;^855^^^^^840^870^Node receiver = n.getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jstype instanceof UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( recvType  |  UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( recvType  <=  UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( ! ( jstype instanceof FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( ! ( recvType  ^  FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( name, alt )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( n, recvType )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromCall ( alt, n )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( param, alt )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( ! ( recvType  ||  FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( lhs, alt )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( getJSType ( jsRoot.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^866^867^868^^^851^881^ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( getJSType ( parent.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^866^867^868^^^851^881^ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^getJSType ( parent.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^867^868^^^^852^882^getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^getJSType ( n.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^867^868^^^^852^882^getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^getJSType ( jsRoot.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^867^868^^^^852^882^getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^String prop = n.getLastChild (  ) .getString (  ) ;^869^^^^^854^884^String prop = receiver.getLastChild (  ) .getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^String prop = nameNode.getLastChild (  ) .getString (  ) ;^869^^^^^854^884^String prop = receiver.getLastChild (  ) .getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^String prop = jsRoot.getLastChild (  ) .getString (  ) ;^869^^^^^854^884^String prop = receiver.getLastChild (  ) .getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^while  ( nIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^while  ( argumentIter.hasNext (  )  && paramIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^while  ( arg.hasNext (  )  && paramIterumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^while  ( argIter.hasNext (  )  && paramumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^while  ( paramIter.hasNext (  )  || argumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( n.getJSType (  )  instanceof FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   &&  FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( nameNode, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , lhs.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( param, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , arg.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( lhs, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , n.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  rhs.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^871^901^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  lhs.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^871^901^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node param = null.next (  ) ;^882^^^^^867^897^Node param = paramIter.next (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( n, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( objType != null && ( objType.isPropertyInExterns ( propName )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( objType != jsRootull && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( prop != null && ( objType.isPropertyInExterns ( objType )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( objType != propull && ( objType.isPropertyInExterns ( n )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType != null || ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType == null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^while  ( paramIter.hasNext (  )  && nameumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^while  ( receiverIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^while  ( argumentIter.hasNext (  )  && paramIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^while  ( argIter.hasNext (  )  && paramumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^while  ( paramIter.hasNext (  )  || argumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( name.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   >=  FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , parent.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( lhs, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , rhs.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( param, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , arg.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  lhs.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( nameNode.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , name.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , n.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  nameNode.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  n.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( parent.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   !=  FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( n, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , jsRoot.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , lhs.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = param.children (  ) .iterator (  ) ;^878^^^^^870^891^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = jsRoot.children (  ) .iterator (  ) ;^878^^^^^870^891^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( rhs, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( nameNode, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  parent.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getJSType (  )  instanceof FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   >=  FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( parent, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return 0;^890^^^^^875^905^return actions;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = jsRoot.children (  ) .iterator (  ) ;^878^^^^^863^893^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^( objType.isPropertyInExterns ( propName )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^871^872^^^^856^886^( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^( prop.isPropertyInExterns ( objType )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^871^872^^^^856^886^( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = parent.children (  ) .iterator (  ) ;^878^^^^^863^893^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , parent.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  name.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^871^901^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^(  ( FunctionType )  nameNode.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^871^901^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  objType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Iterator  argumentIter  paramIter  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType instanceof UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( paramType  ==  UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( paramType  ||  UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( recvType instanceof FunctionType )  {^904^^^^^895^911^} else if  ( paramType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( paramType  <=  FunctionType )  {^904^^^^^895^911^} else if  ( paramType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( lhs, thisType, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( createExternFunctionCall ( thisType, arg, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( n, thisType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( createExternFunctionCall ( thisType, arg,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( lhs, thisType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( n, thisType, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( nameNode, thisType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( nameNode, thisType, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( n, thisType, paramAlt )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, recvType )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^getImplicitActionsFromArgument ( arg, thisType, recvType )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^getImplicitActionsFromArgument ( paramAlt, thisType, arg )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^getImplicitActionsFromArgument ( arg, paramAlt, thisType )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( paramType  >=  FunctionType )  {^904^^^^^895^911^} else if  ( paramType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( name, thisType, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( createExternFunctionCall ( name, thisType,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramType )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( paramAlt, thisType, arg )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^getImplicitActionsFromArgument ( n, thisType, paramAlt )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] Set  allInstantiatedTypes  workSet  JSType  alt  jsThisType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( paramType instanceof UnionType )  {^916^^^^^901^931^if  ( jsType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType  <=  UnionType )  {^916^^^^^901^931^if  ( jsType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( propName )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType != null || !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, propName, fnNode ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( prop, objType, fnNode ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, prop, lhs ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( paramAlt ) ;^932^^^^^916^937^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( recvType ) ;^932^^^^^916^937^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && type.hasProperty ( prop )  )  {^934^^^^^916^937^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && objType.hasProperty ( propName )  )  {^934^^^^^916^937^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^!objType.isUnknownType (  )  && prop.hasProperty ( objType )  )  {^934^^^^^916^937^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type != null )  {^920^^^^^905^935^if  ( altObj != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( altObj == null )  {^920^^^^^905^935^if  ( altObj != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.hasProperty ( prop )  )  {^923^^^^^908^938^if  ( altObj.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( altObj.hasProperty ( propName )  )  {^923^^^^^908^938^if  ( altObj.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( prop.hasProperty ( altObj )  )  {^923^^^^^908^938^if  ( altObj.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^found = false;^924^^^^^909^939^found = true;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, propName, fnNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( fnNode, prop, altObj )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( prop, altObj, fnNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, fnNode, prop )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, lhs )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^928^^^^^913^943^if  ( found )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^boolean found = true;^917^^^^^902^932^boolean found = false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType paramTypeObj = ObjectType.cast ( alt ) ;^919^^^^^904^934^ObjectType altObj = ObjectType.cast ( alt ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, n )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, name )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( propName )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( prop != null && !objType.isUnknownType (  )  && objType.hasProperty ( objType )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType != null || !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, prop, n ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, propName, fnNode ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, prop, lhs ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, propName, fnNode ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, prop, receiver ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType recvTypeObj = ObjectType.cast ( alt ) ;^919^^^^^904^934^ObjectType altObj = ObjectType.cast ( alt ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( paramType ) ;^932^^^^^917^947^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, receiver )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, nameNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( recvType ) ;^932^^^^^917^947^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && type.hasProperty ( prop )  )  {^934^^^^^919^949^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && objType.hasProperty ( propName )  )  {^934^^^^^919^949^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^!objType.isUnknownType (  )  && prop.hasProperty ( objType )  )  {^934^^^^^919^949^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( objType, prop, lhs ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( prop, objType, fnNode ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( propName ) ;^941^^^^^926^956^Set<ObjectType> types = getTypeRegistry (  ) .getTypesWithProperty ( prop ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( objType, prop, fnNode )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, propName, fnNode )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( prop, type, fnNode )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( fnNode, prop, type )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, lhs )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, fnNode, prop )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  altObj  objType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^JSType propType = thisType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^JSType propNameType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^JSType jsTypeType = prop.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsType.isPropertyInExterns ( propName )  && propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsType.isPropertyInExterns ( prop )  && paramAlt.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType.isPropertyInExterns ( prop )  || propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType instanceof FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType  <<  FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType instanceof FunctionType )  {^959^^^^^948^967^if  ( propType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( propType  >=  FunctionType )  {^959^^^^^948^967^if  ( propType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Action action = createExternFunctionCall ( n, thisType, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Action action = createExternFunctionCall ( fnNode, jsType, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( callType, thisType, fnNode ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( fnNode, callType, thisType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Action action = createExternFunctionCall ( lhs, thisType, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( thisType, fnNode, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType  ||  FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( propType  !=  FunctionType )  {^959^^^^^948^967^if  ( propType instanceof FunctionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Action action = createExternFunctionCall ( param, thisType, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( thisType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( prop.isPropertyInExterns ( jsType )  && propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] Action  action  Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  callType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  ObjectType  jsType  thisType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( n ) ;^972^^^^^971^985^Preconditions.checkNotNull ( name ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( jsRoot.getType (  )  == Token.NAME ) ;^973^^^^^971^985^Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( name.getType (  )  != Token.NAME ) ;^973^^^^^971^985^Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^973^^^^^971^985^Preconditions.checkArgument ( name.getType (  )  == Token.NAME ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( n.getJSType (  )  == null )  {^975^^^^^971^985^if  ( name.getJSType (  )  == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( name.getJSType (  )  != null )  {^975^^^^^971^985^if  ( name.getJSType (  )  == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return 3;^976^^^^^971^985^return ConcreteType.ALL;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( lhs.getJSType (  )  == null )  {^975^^^^^971^985^if  ( name.getJSType (  )  == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( lhs.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^979^980^^^^971^985^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( name.getFirstChild (  )  != null ) ||  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^979^980^^^^971^985^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( name.getFirstChild (  )  == null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^979^980^^^^971^985^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  != Token.FUNCTION )  )  {^979^980^^^^971^985^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteFunction ( n.getFirstChild (  ) , scope ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteFunction ( name.getFirstChild (  ) , varScope ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return createConcreteFunction ( scope.getFirstChild (  ) , name ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteFunction ( jsRoot.getFirstChild (  ) , scope ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteFunction ( param.getFirstChild (  ) , scope ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( nameNode.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^979^980^^^^971^985^if  (  ( name.getFirstChild (  )  != null ) &&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&&  ( parent.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^980^^^^^971^985^&&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&&  ( param.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^980^^^^^971^985^&&  ( name.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteFunction ( rhs.getFirstChild (  ) , scope ) ;^981^^^^^971^985^return createConcreteFunction ( name.getFirstChild (  ) , scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createType ( lhs.getJSType (  )  ) ;^984^^^^^971^985^return createType ( name.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createType ( jsRoot.getJSType (  )  ) ;^984^^^^^971^985^return createType ( name.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   Node name ConcreteScope scope [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isUnknownType (  )  || jsType.isEmptyType (  )  )  {^989^^^^^988^1014^if  ( jsType.isUnknownType (  )  || jsType.isEmptyType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType.isUnknownType (  )  && jsType.isEmptyType (  )  )  {^989^^^^^988^1014^if  ( jsType.isUnknownType (  )  || jsType.isEmptyType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isUnionType (  )  )  {^993^^^^^988^1014^if  ( jsType.isUnionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = recvType.unionWith ( createType ( alt )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( createType ( paramType )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^type = alt.unionWith ( createType ( type )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return recvType;^998^^^^^988^1014^return type;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = thisType.unionWith ( createType ( alt )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( createType ( recvType )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( createType ( propType )  ) ;^996^^^^^988^1014^type = type.unionWith ( createType ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return retType;^998^^^^^988^1014^return type;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( paramType.isUnionType (  )  )  {^993^^^^^988^1014^if  ( jsType.isUnionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( paramType.isFunctionType (  )  )  {^1001^^^^^988^1014^if  ( jsType.isFunctionType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( getConcreteFunction (  ( FunctionType )  jsType )  == null )  {^1002^^^^^988^1014^if  ( getConcreteFunction (  ( FunctionType )  jsType )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return 3;^1006^^^^^988^1014^return ConcreteType.ALL;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isObject (  )  )  {^1009^^^^^988^1014^if  ( jsType.isObject (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteInstance ( recvType.toObjectType (  )  ) ;^1010^^^^^988^1014^return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteInstance ( paramType.toObjectType (  )  ) ;^1010^^^^^988^1014^return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createConcreteInstance ( propType.toObjectType (  )  ) ;^1010^^^^^988^1014^return createConcreteInstance ( jsType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createType [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  retType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType ret = null;^1021^^^^^1020^1043^ConcreteType ret = ConcreteType.NONE;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType instanceof UnionType )  {^1022^^^^^1020^1043^if  ( jsType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType  ||  UnionType )  {^1022^^^^^1020^1043^if  ( jsType instanceof UnionType )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( instType != null || instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^1028^1029^1030^^^1020^1043^if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( instType == null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^1028^1029^1030^^^1020^1043^if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( instType != null && instType.getConstructor (  )  == null && instType.getConstructor (  ) .isInterface (  )  )  {^1028^1029^1030^^^1020^1043^if  ( instType != null && instType.getConstructor (  )  != null && instType.getConstructor (  ) .isInterface (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( recvType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = jsType.unionWith ( createUnionWithSubTypes ( createType ( ret )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( propType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( paramType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = implementor.unionWith ( createTypeWithSubTypes ( ret.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType instType = ObjectType.cast ( paramType ) ;^1027^^^^^1020^1043^ObjectType instType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ObjectType instType = ObjectType.cast ( recvType ) ;^1027^^^^^1020^1043^ObjectType instType = ObjectType.cast ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = retType.unionWith ( createTypeWithSubTypes ( alt )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( createTypeWithSubTypes ( recvType )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = alt.unionWith ( createTypeWithSubTypes ( ret )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType.unionWith ( createTypeWithSubTypes ( alt )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( createTypeWithSubTypes ( paramType )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = retType.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^1035^1036^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( implementor.getInstanceType (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.unionWith ( createTypeWithSubTypes ( alt )  ) ;^1024^^^^^1020^1043^ret = ret.unionWith ( createTypeWithSubTypes ( alt )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^1039^^^^^1020^1043^ret = ret.unionWith ( createUnionWithSubTypes ( createType ( jsType )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return retType;^1042^^^^^1020^1043^return ret;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeWithSubTypes [RETURN_TYPE] ConcreteType   JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  receiver  rhs  FunctionType  implementor  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  exprType  newret  origType  recvType  ret  retType  thisType  type  int  hashcode  i  ObjectType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  Collection  implementors  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( varScope ) ;^1047^^^^^1032^1062^Preconditions.checkNotNull ( scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( name ) ;^1048^^^^^1033^1063^Preconditions.checkNotNull ( expr ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( slot == null )  {^1054^^^^^1039^1069^if  ( slot != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( retType.isAll (  )  )  {^1096^^^^^1081^1111^if  ( recvType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType;^1097^^^^^1082^1112^ret = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( "prototype".equals ( prop )  )  {^1103^^^^^1088^1118^if  ( "prototype".equals ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( prop )  )  {^1107^1108^^^^1092^1122^} else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( "call".equals ( prop )  )  {^1112^^^^^1097^1127^} else if  ( "call".equals ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = retType;^1113^^^^^1098^1128^type = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type;^1113^^^^^1098^1128^type = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = targetType.unionWith ( superType.getPrototypeType (  )  ) ;^1110^^^^^1107^1114^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^1110^^^^^1107^1114^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^type = superType.unionWith ( type.getPrototypeType (  )  ) ;^1110^^^^^1107^1114^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType superType : thisType.getSuperclassTypes (  )  )  {^1109^^^^^1107^1114^for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = recvType.unionWith ( superType.getPrototypeType (  )  ) ;^1110^^^^^1107^1114^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = targetType;^1113^^^^^1098^1128^type = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = thisType.unionWith ( superType.getPrototypeType (  )  ) ;^1110^^^^^1095^1125^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^1110^^^^^1095^1125^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^type = superType.unionWith ( type.getPrototypeType (  )  ) ;^1110^^^^^1095^1125^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^} else if  ( propName.getCodingConvention (  ) .isSuperClassReference ( compiler )  )  {^1107^1108^^^^1092^1122^} else if  ( compiler.getCodingConvention (  ) .isSuperClassReference ( propName )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType superType : ret.getSuperclassTypes (  )  )  {^1109^^^^^1094^1124^for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = retType.unionWith ( superType.getPrototypeType (  )  ) ;^1110^^^^^1095^1125^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = ret.unionWith ( funType.getPrototypeType (  )  ) ;^1105^^^^^1090^1120^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^1105^^^^^1090^1120^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^type = funType.unionWith ( type.getPrototypeType (  )  ) ;^1105^^^^^1090^1120^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = thisType.unionWith ( superType.getPrototypeType (  )  ) ;^1110^^^^^1107^1114^type = type.unionWith ( superType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = thisType;^1113^^^^^1098^1128^type = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.isAll (  )  )  {^1127^^^^^1112^1142^if  ( targetType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type;^1128^^^^^1113^1143^ret = targetType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( ret.isAll (  )  )  {^1140^^^^^1125^1155^if  ( constructorType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( expr.getJSType (  )  != null )  || !expr.getJSType (  ) .isUnknownType (  )  )  {^1156^^^^^1141^1171^if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( expr.getJSType (  )  == null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^1156^^^^^1141^1171^if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType;^1160^^^^^1145^1175^ret = inst;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^JSType paramType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^1157^^^^^1142^1172^JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType inst = createConcreteInstance ( recvType.toObjectType (  )  ) ;^1158^^^^^1143^1173^ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^JSType lhsType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^1157^^^^^1142^1172^JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType inst = createConcreteInstance ( paramType.toObjectType (  )  ) ;^1158^^^^^1143^1173^ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^allInstantiatedTypes.add ( targetType ) ;^1159^^^^^1144^1174^allInstantiatedTypes.add ( inst ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = varScope.getTypeOfThis (  ) ;^1064^^^^^1049^1079^ret = scope.getTypeOfThis (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1070^^^^^1055^1085^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, param.getLastChild (  )  ) ;^1070^^^^^1055^1085^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = inferConcreteType ( expr, scope.getLastChild (  )  ) ;^1070^^^^^1055^1085^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, name.getLastChild (  )  ) ;^1074^^^^^1059^1089^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = inferConcreteType ( expr, scope.getLastChild (  )  ) ;^1074^^^^^1059^1089^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1080^^^^^1065^1095^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = inferConcreteType ( expr, scope.getLastChild (  )  ) ;^1080^^^^^1065^1095^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( varScope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1069^1099^ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, name.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1069^1099^ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = inferConcreteType ( expr, scope.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1069^1099^ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, lhs.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1074^1104^ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = inferConcreteType ( expr, scope.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1074^1104^ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type;^1097^^^^^1082^1112^ret = recvType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType;^1115^^^^^1100^1130^ret = type;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = retType;^1128^^^^^1113^1143^ret = targetType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1118^1148^ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( superType.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1118^1148^ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = funType.unionWith ( ret.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1118^1148^ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = targetType.unionWith ( instType ) ;^1146^^^^^1131^1161^ret = ret.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( inst ) ;^1146^^^^^1131^1161^ret = ret.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = instType.unionWith ( ret ) ;^1146^^^^^1131^1161^ret = ret.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createConcreteFunction ( param, scope ) ;^1152^^^^^1137^1167^ret = createConcreteFunction ( expr, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = createConcreteFunction ( scope, expr ) ;^1152^^^^^1137^1167^ret = createConcreteFunction ( expr, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = targetType;^1160^^^^^1145^1175^ret = inst;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = 3;^1162^^^^^1147^1177^ret = ConcreteType.ALL;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = instType;^1171^^^^^1156^1186^ret = inst;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> slot = varScope.getSlot ( expr.getString (  )  ) ;^1052^^^^^1037^1067^StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> slot = scope.getSlot ( lhs.getString (  )  ) ;^1052^^^^^1037^1067^StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^StaticSlot<ConcreteType> slot = expr.getSlot ( scope.getString (  )  ) ;^1052^^^^^1037^1067^StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1095^^^^^1080^1110^ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, prop.getFirstChild (  )  ) ;^1095^^^^^1080^1110^ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( expr, scope.getFirstChild (  )  ) ;^1095^^^^^1080^1110^ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Node prop = n.getLastChild (  ) ;^1100^^^^^1085^1115^Node prop = expr.getLastChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^String nameName = prop.getString (  ) ;^1101^^^^^1086^1116^String propName = prop.getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = thisType.getPropertyType ( propName ) ;^1102^^^^^1087^1117^ConcreteType type = recvType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = recvType.getPropertyType ( prop ) ;^1102^^^^^1087^1117^ConcreteType type = recvType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType type = propName.getPropertyType ( recvType ) ;^1102^^^^^1087^1117^ConcreteType type = recvType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType targetType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1125^1126^^^^1110^1140^ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType targetType = inferConcreteType ( scope, prop.getFirstChild (  )  ) ;^1125^1126^^^^1110^1140^ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType targetType = inferConcreteType ( expr, scope.getFirstChild (  )  ) ;^1125^1126^^^^1110^1140^ConcreteType targetType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType constructorType = inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1138^1139^^^^1123^1153^ConcreteType constructorType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType constructorType = inferConcreteType ( scope, lhs.getFirstChild (  )  ) ;^1138^1139^^^^1123^1153^ConcreteType constructorType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType constructorType = inferConcreteType ( expr, scope.getFirstChild (  )  ) ;^1138^1139^^^^1123^1153^ConcreteType constructorType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType inst = createConcreteInstance ( paramAlt.toObjectType (  )  ) ;^1158^^^^^1143^1173^ConcreteType inst = createConcreteInstance ( exprType.toObjectType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^StaticSlot<ConcreteType> slot = scope.getSlot ( n.getString (  )  ) ;^1052^^^^^1037^1067^StaticSlot<ConcreteType> slot = scope.getSlot ( expr.getString (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = 0.getType (  ) ;^1055^^^^^1040^1070^ret = slot.getType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, n.getLastChild (  )  ) ;^1070^^^^^1055^1085^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, nameNode.getLastChild (  )  ) ;^1070^^^^^1055^1085^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( varScope, expr.getLastChild (  )  ) ;^1074^^^^^1059^1089^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, lhs.getLastChild (  )  ) ;^1074^^^^^1059^1089^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, lhs.getLastChild (  )  ) ;^1080^^^^^1065^1095^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, name.getLastChild (  )  ) ;^1080^^^^^1065^1095^ret = inferConcreteType ( scope, expr.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, lhs.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1069^1099^ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, param.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1084^1085^^^^1069^1099^ret = inferConcreteType ( scope, expr.getFirstChild (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( varScope, expr.getLastChild (  )  )  ) ;^1085^^^^^1070^1100^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, lhs.getLastChild (  )  )  ) ;^1085^^^^^1070^1100^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^inferConcreteType ( expr, scope.getLastChild (  )  )  ) ;^1085^^^^^1070^1100^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, n.getLastChild (  )  )  ) ;^1085^^^^^1070^1100^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( varScope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1074^1104^ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = inferConcreteType ( scope, n.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^1089^1090^1091^^^1074^1104^ret = inferConcreteType ( scope, expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, nameNode.getLastChild (  )  )  ) ;^1090^1091^^^^1075^1105^expr.getFirstChild (  ) .getNext (  )  ) .unionWith ( inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( varScope, expr.getLastChild (  )  )  ) ;^1091^^^^^1076^1106^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, name.getLastChild (  )  )  ) ;^1091^^^^^1076^1106^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^inferConcreteType ( expr, scope.getLastChild (  )  )  ) ;^1091^^^^^1076^1106^inferConcreteType ( scope, expr.getLastChild (  )  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, lhs.getFirstChild (  )  ) ;^1095^^^^^1080^1110^ConcreteType recvType = inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( ret.isAll (  )  )  {^1096^^^^^1081^1111^if  ( recvType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^String parentName = prop.getString (  ) ;^1101^^^^^1086^1116^String propName = prop.getString (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType type = ret.getPropertyType ( propName ) ;^1102^^^^^1087^1117^ConcreteType type = recvType.getPropertyType ( propName ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType funType : type.getFunctions (  )  )  {^1104^^^^^1089^1119^for  ( ConcreteFunctionType funType : recvType.getFunctions (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^type = retType.unionWith ( funType.getPrototypeType (  )  ) ;^1105^^^^^1090^1120^type = type.unionWith ( funType.getPrototypeType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType superType : retType.getSuperclassTypes (  )  )  {^1109^^^^^1094^1124^for  ( ConcreteFunctionType superType : recvType.getSuperclassTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1126^^^^^1111^1141^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, param.getFirstChild (  )  ) ;^1126^^^^^1111^1141^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^inferConcreteType ( expr, scope.getFirstChild (  )  ) ;^1126^^^^^1111^1141^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, lhs.getFirstChild (  )  ) ;^1126^^^^^1111^1141^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isAll (  )  )  {^1127^^^^^1112^1142^if  ( targetType.isAll (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType funType : ret.getFunctions (  )  )  {^1132^^^^^1117^1147^for  ( ConcreteFunctionType funType : targetType.getFunctions (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^1133^^^^^1118^1148^ret = ret.unionWith ( funType.getReturnSlot (  ) .getType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( varScope, expr.getFirstChild (  )  ) ;^1139^^^^^1124^1154^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, lhs.getFirstChild (  )  ) ;^1139^^^^^1124^1154^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^inferConcreteType ( expr, scope.getFirstChild (  )  ) ;^1139^^^^^1124^1154^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^inferConcreteType ( scope, name.getFirstChild (  )  ) ;^1139^^^^^1124^1154^inferConcreteType ( scope, expr.getFirstChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^: ret.getFunctionInstanceTypes (  )  )  {^1145^^^^^1130^1160^: constructorType.getFunctionInstanceTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = retType.unionWith ( instType ) ;^1146^^^^^1131^1161^ret = ret.unionWith ( instType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createConcreteFunction ( name, scope ) ;^1152^^^^^1137^1167^ret = createConcreteFunction ( expr, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createConcreteFunction ( expr, varScope ) ;^1152^^^^^1137^1167^ret = createConcreteFunction ( expr, scope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( lhs.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^1156^^^^^1141^1171^if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( prop.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^1156^^^^^1141^1171^if  (  ( expr.getJSType (  )  != null )  && !expr.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^JSType parentType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^1157^^^^^1142^1172^JSType exprType = expr.getJSType (  ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^allInstantiatedTypes.add ( instType ) ;^1170^^^^^1155^1185^allInstantiatedTypes.add ( inst ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createTypeIntersection ( type, expr.getJSType (  )  ) ;^1177^^^^^1162^1192^return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return createTypeIntersection ( expr, ret.getJSType (  )  ) ;^1177^^^^^1162^1192^return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createTypeIntersection ( recvType, expr.getJSType (  )  ) ;^1177^^^^^1162^1192^return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createTypeIntersection ( ret, nameNode.getJSType (  )  ) ;^1177^^^^^1162^1192^return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return createTypeIntersection ( ret, param.getJSType (  )  ) ;^1177^^^^^1162^1192^return createTypeIntersection ( ret, expr.getJSType (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] inferConcreteType [RETURN_TYPE] ConcreteType   ConcreteScope scope Node expr [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  superType  ConcreteInstanceType  inst  instType  ObjectType  arrayType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  StaticSlot  slot  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteJSTypePair key = new ConcreteJSTypePair ( ret, jsType ) ;^1185^^^^^1170^1200^ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, paramAlt ) ;^1185^^^^^1170^1200^ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteJSTypePair key = new ConcreteJSTypePair ( jsType, concreteType ) ;^1185^^^^^1170^1200^ConcreteJSTypePair key = new ConcreteJSTypePair ( concreteType, jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteType ret = key.get ( typeIntersectionMemos ) ;^1186^^^^^1171^1201^ConcreteType ret = typeIntersectionMemos.get ( key ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType != null )  {^1187^^^^^1172^1202^if  ( ret != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( ret == null )  {^1187^^^^^1172^1202^if  ( ret != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return retType;^1188^^^^^1173^1203^return ret;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return origType;^1188^^^^^1173^1203^return ret;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( propType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsType == null || jsType.isUnknownType (  )  || ret.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( concreteType == null || jsType.isUnknownType (  )  || jsType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType == null && jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType != null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( targetType.isUnion (  )  || concreteType.isSingleton (  )  )  {^1193^^^^^1178^1208^} else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^} else if  ( concreteType.isUnion (  )  && concreteType.isSingleton (  )  )  {^1193^^^^^1178^1208^} else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createTypeWithSubTypes ( paramAlt ) ;^1197^^^^^1193^1198^ret = createTypeWithSubTypes ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type.isAll (  )  ) ;^1196^^^^^1193^1198^Preconditions.checkState ( concreteType.isAll (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = concreteType.intersectWith ( createTypeWithSubTypes ( recvType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = jsType.intersectWith ( createTypeWithSubTypes ( concreteType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = concreteType.intersectWith ( createTypeWithSubTypes ( paramAlt )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = concreteType.intersectWith ( createTypeWithSubTypes ( paramType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createTypeWithSubTypes ( recvType ) ;^1197^^^^^1182^1212^ret = createTypeWithSubTypes ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( type.isUnion (  )  || concreteType.isSingleton (  )  )  {^1193^^^^^1178^1208^} else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( recvType.isAll (  )  ) ;^1196^^^^^1181^1211^Preconditions.checkState ( concreteType.isAll (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ret.isAll (  )  ) ;^1196^^^^^1181^1211^Preconditions.checkState ( concreteType.isAll (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = recvType;^1192^^^^^1177^1207^ret = concreteType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( ret.isUnion (  )  || concreteType.isSingleton (  )  )  {^1193^^^^^1178^1208^} else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createTypeWithSubTypes ( recvType ) ;^1197^^^^^1193^1198^ret = createTypeWithSubTypes ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ret.isAll (  )  ) ;^1196^^^^^1193^1198^Preconditions.checkState ( concreteType.isAll (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type;^1192^^^^^1177^1207^ret = concreteType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsType == null || jsType.isUnknownType (  )  || recvType.isNone (  )  )  {^1191^^^^^1176^1206^if  ( jsType == null || jsType.isUnknownType (  )  || concreteType.isNone (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^} else if  ( retType.isUnion (  )  || concreteType.isSingleton (  )  )  {^1193^^^^^1178^1208^} else if  ( concreteType.isUnion (  )  || concreteType.isSingleton (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = targetType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = concreteType.intersectWith ( createTypeWithSubTypes ( propType )  ) ;^1194^^^^^1179^1209^ret = concreteType.intersectWith ( createTypeWithSubTypes ( jsType )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = createTypeWithSubTypes ( paramType ) ;^1197^^^^^1182^1212^ret = createTypeWithSubTypes ( jsType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = origType.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^1199^^^^^1184^1214^ret = ret.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = allInstantiatedTypes.intersectWith ( ConcreteType.createForTypes ( ret )  ) ;^1199^^^^^1184^1214^ret = ret.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = retType.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^1199^^^^^1184^1214^ret = ret.intersectWith ( ConcreteType.createForTypes ( allInstantiatedTypes )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.unionWith ( functionType ) ;^1205^^^^^1190^1220^ret = ret.unionWith ( functionType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = functionType.unionWith ( ret ) ;^1205^^^^^1190^1220^ret = ret.unionWith ( functionType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteFunctionType functionType : targetType.getFunctions (  )  )  {^1204^^^^^1189^1219^for  ( ConcreteFunctionType functionType : concreteType.getFunctions (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = origType.unionWith ( functionType ) ;^1205^^^^^1190^1220^ret = ret.unionWith ( functionType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = origType.unionWith ( prototype ) ;^1212^^^^^1197^1227^ret = ret.unionWith ( prototype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( instance ) ;^1212^^^^^1197^1227^ret = ret.unionWith ( prototype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = prototype.unionWith ( ret ) ;^1212^^^^^1197^1227^ret = ret.unionWith ( prototype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteInstanceType prototype : ret.getPrototypeTypes (  )  )  {^1211^^^^^1196^1226^for  ( ConcreteInstanceType prototype : concreteType.getPrototypeTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = type.unionWith ( prototype ) ;^1212^^^^^1197^1227^ret = ret.unionWith ( prototype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( !instance.instanceType.isInstanceType (  ) || !instance.isFunctionPrototype (  )  )  {^1218^1219^^^^1203^1233^if  ( !instance.instanceType.isInstanceType (  ) && !instance.isFunctionPrototype (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = thisType.unionWith ( instance ) ;^1220^^^^^1218^1221^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( prototype ) ;^1220^^^^^1218^1221^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = instance.unionWith ( ret ) ;^1220^^^^^1218^1221^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = origType.unionWith ( instance ) ;^1220^^^^^1218^1221^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = targetType.unionWith ( instance ) ;^1220^^^^^1205^1235^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ret = ret.unionWith ( prototype ) ;^1220^^^^^1205^1235^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ret = instance.unionWith ( ret ) ;^1220^^^^^1205^1235^ret = ret.unionWith ( instance ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( ConcreteInstanceType instance : ret.getInstances (  )  )  {^1217^^^^^1202^1232^for  ( ConcreteInstanceType instance : concreteType.getInstances (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^typeIntersectionMemos.put ( key, origType ) ;^1224^^^^^1209^1239^typeIntersectionMemos.put ( key, ret ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return retType;^1225^^^^^1210^1240^return ret;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createTypeIntersection [RETURN_TYPE] ConcreteType   ConcreteType concreteType JSType jsType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  functionType  ConcreteInstanceType  instance  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  ConcreteJSTypePair  key  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType funType = functionFromDeclaration.get ( lhs ) ;^1231^^^^^1229^1240^ConcreteFunctionType funType = functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteFunctionType funType = decl.get ( functionFromDeclaration ) ;^1231^^^^^1229^1240^ConcreteFunctionType funType = functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteFunctionType funType = functionFromDeclaration.get ( n ) ;^1231^^^^^1229^1240^ConcreteFunctionType funType = functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( funType != null )  {^1232^^^^^1229^1240^if  ( funType == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( n.getJSType (  )  != null )  {^1235^^^^^1229^1240^if  ( decl.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( decl.getJSType (  )  == null )  {^1235^^^^^1229^1240^if  ( decl.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^functionFromJSType.put (  ( FunctionType )  lhs.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^functionFromJSType.put (  ( FunctionType )  funType.getJSType (  ) , decl ) ;^1236^^^^^1229^1240^functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^functionFromJSType.put (  ( FunctionType )  n.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^funType = new ConcreteFunctionType ( this, parent, decl )  ) ;^1234^^^^^1229^1240^funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^funType = new ConcreteFunctionType ( this, n, parent )  ) ;^1234^^^^^1229^1240^funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^functionFromDeclaration.put ( name, funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^1233^1234^^^^1229^1240^functionFromDeclaration.put ( decl, funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^functionFromDeclaration.put ( parent, funType = new ConcreteFunctionType ( this, decl, decl )  ) ;^1233^1234^^^^1229^1240^functionFromDeclaration.put ( decl, funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( parent.getJSType (  )  != null )  {^1235^^^^^1229^1240^if  ( decl.getJSType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^functionFromJSType.put (  ( FunctionType )  parent.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^functionFromJSType.put (  ( FunctionType )  name.getJSType (  ) , funType ) ;^1236^^^^^1229^1240^functionFromJSType.put (  ( FunctionType )  decl.getJSType (  ) , funType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^funType = new ConcreteFunctionType ( this, lhs, parent )  ) ;^1234^^^^^1229^1240^funType = new ConcreteFunctionType ( this, decl, parent )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteFunctionType  funType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !instanceType.isFunctionType (  )  && instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^1245^1246^1247^^^1243^1254^Preconditions.checkArgument ( !instanceType.isFunctionType (  )  || instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteInstance [RETURN_TYPE] ConcreteInstanceType   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( !instanceType.isFunctionType (  )  || instanceType != getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^1245^1246^1247^^^1243^1254^Preconditions.checkArgument ( !instanceType.isFunctionType (  )  || instanceType == getTypeRegistry (  ) .getNativeType ( U2U_CONSTRUCTOR_TYPE )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteInstance [RETURN_TYPE] ConcreteInstanceType   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^ConcreteInstanceType instType = instanceType.get ( instanceFromJSType ) ;^1248^^^^^1243^1254^ConcreteInstanceType instType = instanceFromJSType.get ( instanceType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteInstance [RETURN_TYPE] ConcreteInstanceType   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( instType != null )  {^1249^^^^^1243^1254^if  ( instType == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createConcreteInstance [RETURN_TYPE] ConcreteInstanceType   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  instType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return functionFromDeclaration.get ( prop ) ;^1258^^^^^1257^1259^return functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return null.get ( decl ) ;^1258^^^^^1257^1259^return functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return decl.get ( functionFromDeclaration ) ;^1258^^^^^1257^1259^return functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return functionFromDeclaration.get ( rhs ) ;^1258^^^^^1257^1259^return functionFromDeclaration.get ( decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteFunction [RETURN_TYPE] ConcreteFunctionType   Node decl [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return functionType.get ( functionFromJSType ) ;^1263^^^^^1262^1264^return functionFromJSType.get ( functionType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteFunction [RETURN_TYPE] ConcreteFunctionType   FunctionType functionType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  functionType  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return instanceType.get ( instanceFromJSType ) ;^1268^^^^^1267^1269^return instanceFromJSType.get ( instanceType ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getConcreteInstance [RETURN_TYPE] ConcreteInstanceType   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( ConcreteFunctionType.CALL_SLOT_NAME, name ) ;^1275^^^^^1272^1287^scope.declareSlot ( ConcreteFunctionType.CALL_SLOT_NAME, decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( ConcreteFunctionType.THIS_SLOT_NAME, param ) ;^1276^^^^^1272^1287^scope.declareSlot ( ConcreteFunctionType.THIS_SLOT_NAME, decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, name ) ;^1277^^^^^1272^1287^scope.declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, decl ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node n = name.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node rhs = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^for  ( Node decl = n.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( name.getString (  ) , n ) ;^1281^^^^^1272^1287^scope.declareSlot ( n.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.declareSlot ( jsRoot.getString (  ) , n ) ;^1281^^^^^1272^1287^scope.declareSlot ( n.getString (  ) , n ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node n = lhs.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( Node n = param.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^1278^^^^^1272^1287^for  ( Node n = decl.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^n = param.getNext (  )  )  {^1280^^^^^1272^1287^n = n.getNext (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.initForScopeRoot ( n.getLastChild (  )  ) ;^1285^^^^^1272^1287^scope.initForScopeRoot ( decl.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^scope.initForScopeRoot ( name.getLastChild (  )  ) ;^1285^^^^^1272^1287^scope.initForScopeRoot ( decl.getLastChild (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return varScope;^1286^^^^^1272^1287^return scope;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createFunctionScope [RETURN_TYPE] StaticScope   Node decl ConcreteType> parent [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  StaticScope  parent  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( instanceType.getImplicitPrototype (  )  == null )  {^1293^^^^^1290^1303^if  ( instanceType.getImplicitPrototype (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createInstanceScope [RETURN_TYPE] StaticScope   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteScope scope = new ConcreteScope ( varScope ) ;^1298^^^^^1290^1303^ConcreteScope scope = new ConcreteScope ( parentScope ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createInstanceScope [RETURN_TYPE] StaticScope   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return varScope;^1302^^^^^1290^1303^return scope;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createInstanceScope [RETURN_TYPE] StaticScope   ObjectType instanceType [VARIABLES] Set  allInstantiatedTypes  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ObjectType  instanceType  ConcreteInstanceType  prototype  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( targetType.isInstance (  )  )  {^1313^^^^^1311^1318^if  ( type.isInstance (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set = getSubTypes ( retType.toInstance (  )  ) ;^1314^^^^^1311^1318^set = getSubTypes ( type.toInstance (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set = getSubTypes ( origType.toInstance (  )  ) ;^1314^^^^^1311^1318^set = getSubTypes ( type.toInstance (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set = getSubTypes ( recvType.toInstance (  )  ) ;^1314^^^^^1311^1318^set = getSubTypes ( type.toInstance (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set = getSubTypes ( thisType.toInstance (  )  ) ;^1314^^^^^1311^1318^set = getSubTypes ( type.toInstance (  )  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return ConcreteType.createForTypes ( set ) .unionWith ( recvType ) ;^1317^^^^^1311^1318^return ConcreteType.createForTypes ( set ) .unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return ConcreteType.createForTypes ( type ) .unionWith ( set ) ;^1317^^^^^1311^1318^return ConcreteType.createForTypes ( set ) .unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return ConcreteType.createForTypes ( set ) .unionWith ( ret ) ;^1317^^^^^1311^1318^return ConcreteType.createForTypes ( set ) .unionWith ( type ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] createUnionWithSubTypes [RETURN_TYPE] ConcreteType   ConcreteType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( type.getConstructorType (  )  != null )  {^1322^^^^^1321^1329^if  ( type.getConstructorType (  )  == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] Set   ConcreteInstanceType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteInstanceType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^getSubTypes ( set.getConstructorType (  ) .getJSType (  ) , type ) ;^1327^^^^^1321^1329^getSubTypes ( type.getConstructorType (  ) .getJSType (  ) , set ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] Set   ConcreteInstanceType type [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  ConcreteInstanceType  type  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( type.getSubTypes (  )  == null )  {^1336^^^^^1335^1359^if  ( type.getSubTypes (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( targetType.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^1339^1340^^^^1335^1359^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( concrete.isFunction (  ) || concrete.toFunction (  ) .getInstanceType (  )  != null )  {^1339^1340^^^^1335^1359^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  == null )  {^1339^1340^^^^1335^1359^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return true;^1354^^^^^1335^1359^return false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !set.contains ( recvType )  )  {^1342^^^^^1335^1359^if  ( !set.contains ( concrete )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( !getSubTypes ( set, sub )  )  {^1344^^^^^1335^1359^if  ( !getSubTypes ( sub, set )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return true;^1345^^^^^1335^1359^return false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set.add ( ret ) ;^1343^^^^^1335^1359^set.add ( concrete ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !getSubTypes ( type, set )  )  {^1344^^^^^1335^1359^if  ( !getSubTypes ( sub, set )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^concrete = recvType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^concrete = retType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^concrete = thisType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !set.contains ( ret )  )  {^1342^^^^^1335^1359^if  ( !set.contains ( concrete )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !getSubTypes ( sub, this )  )  {^1344^^^^^1335^1359^if  ( !getSubTypes ( sub, set )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set.add ( recvType ) ;^1343^^^^^1335^1359^set.add ( concrete ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^concrete = targetType.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^ConcreteType concrete = createType ( type ) ;^1338^^^^^1335^1359^ConcreteType concrete = createType ( sub ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^for  ( FunctionType sub : sub.getSubTypes (  )  )  {^1337^^^^^1335^1359^for  ( FunctionType sub : type.getSubTypes (  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( type.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^1339^1340^^^^1335^1359^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&& ret.toFunction (  ) .getInstanceType (  )  != null )  {^1340^^^^^1335^1359^&& concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^concrete = ret.toFunction (  ) .getInstanceType (  ) ;^1341^^^^^1335^1359^concrete = concrete.toFunction (  ) .getInstanceType (  ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !set.contains ( type )  )  {^1342^^^^^1335^1359^if  ( !set.contains ( concrete )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( recvType.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^1339^1340^^^^1335^1359^if  ( concrete.isFunction (  ) && concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^set.add ( type ) ;^1343^^^^^1335^1359^set.add ( concrete ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( sub.getSubTypes (  )  != null )  {^1336^^^^^1335^1359^if  ( type.getSubTypes (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&& type.toFunction (  ) .getInstanceType (  )  != null )  {^1340^^^^^1335^1359^&& concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&& recvType.toFunction (  ) .getInstanceType (  )  != null )  {^1340^^^^^1335^1359^&& concrete.toFunction (  ) .getInstanceType (  )  != null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( !set.contains ( retType )  )  {^1342^^^^^1335^1359^if  ( !set.contains ( concrete )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return false;^1358^^^^^1335^1359^return true;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getSubTypes [RETURN_TYPE] boolean   FunctionType type ConcreteType> set [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  FunctionType  sub  type  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return paramType != null ? jstype.hashCode (  )  : 0;^1377^^^^^1376^1378^return jstype != null ? jstype.hashCode (  )  : 0;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSTypeHashCode [RETURN_TYPE] int   [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return jstype == null ? jstype.hashCode (  )  : 0;^1377^^^^^1376^1378^return jstype != null ? jstype.hashCode (  )  : 0;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSTypeHashCode [RETURN_TYPE] int   [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return jstype != null ? jstype.hashCode (  )  : i;^1377^^^^^1376^1378^return jstype != null ? jstype.hashCode (  )  : 0;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] getJSTypeHashCode [RETURN_TYPE] int   [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( paramType == null || jstype == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  ( jsType == null || recvType == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  ( jstype == null || jsType == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType == null && jstype == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType != null || jstype == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( jsType == null || jstype != null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return propType.equals ( this.jstype ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return jsType.equals ( paramType ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return this.jstype.equals ( jsType ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return jsType.equals ( recvType ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return jstype == paramType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return recvType == jsType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return jsType == jstype;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^return jstype != jsType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return jstype == recvType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return paramAlt.equals ( this.jstype ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^return jsType.equals ( propType ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  ( o  >  ConcreteJSTypePair )  {^1390^^^^^1389^1398^if  ( o instanceof ConcreteJSTypePair )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( origType.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( origType ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( recvType )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( pair.concrete.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( this.concrete.equals ( pair.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( pair.jstype.equals ( this.concrete ) && equalsJSType ( pair.concrete )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Operator]^if  (  ( pair.concrete.equals ( this.concrete ) || equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return false;^1394^^^^^1389^1398^return true;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( recvType.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( type ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&& equalsJSType ( paramAlt )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^&& equalsJSType ( pair.jstype.jstype )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^&& equalsJSType ( pair )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( type.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( recvType ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( paramAlt )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( pair.jstype.concrete.equals ( this.concrete ) && equalsJSType ( pair )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^if  (  ( pair.equals ( this.concrete ) && equalsJSType ( pair.concrete.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^if  (  ( ret.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Variable_Misuse]^&& equalsJSType ( jstype )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Wrong_Literal]^return true;^1397^^^^^1389^1398^return false;^[CLASS] TightenTypes ConcreteScope ConcreteSlot Assignment VariableAssignAction PropertyAssignAction FunctionCallBuilder ExternFunctionCall FunctionCall NativeCallFunctionCall CreateScope ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Set  allInstantiatedTypes  set  types  workSet  JSType  alt  exprType  jsThisType  jsType  jstype  paramAlt  paramType  propType  recvType  Node  arg  decl  declaration  expr  expression  externRoot  first  firstArgument  fnNode  jsRoot  lhs  n  name  nameNode  param  parent  prop  receiver  rhs  String  NON_HALTING_ERROR_MSG  name  prop  propName  ConcreteType  concrete  concreteType  constructorType  exprType  inst  newret  origType  recvType  ret  retType  targetType  thisType  type  int  hashcode  i  AbstractCompiler  compiler  ConcreteSlot  slot  thisVar  var  variable  boolean  added  changed  found  inExterns  isCallFunction  isNew  isNewCall  ConcreteScope  parent  parentScope  scope  topScope  varScope  List  actions  argTypes  assigns  workList  Object  o  ConcreteJSTypePair  pair  Map  functionFromDeclaration  functionFromJSType  instanceFromJSType  slots  typeIntersectionMemos  
[BugLab_Argument_Swapping]^return name.get ( slots ) ;^195^^^^^194^196^return slots.get ( name ) ;^[CLASS] ConcreteScope  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] List  actions  String  name  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^199^208^if  ( var != null )  {^[CLASS] ConcreteScope  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] List  actions  StaticSlot  var  String  name  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Operator]^} else if  ( parent == null )  {^203^^^^^199^208^} else if  ( parent != null )  {^[CLASS] ConcreteScope  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] List  actions  StaticSlot  var  String  name  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Argument_Swapping]^return name.getSlot ( parent ) ;^204^^^^^199^208^return parent.getSlot ( name ) ;^[CLASS] ConcreteScope  [METHOD] getSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] List  actions  StaticSlot  var  String  name  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Variable_Misuse]^Collection<ConcreteSlot> getSlots (  )  { return null.values (  ) ; }^211^^^^^206^216^Collection<ConcreteSlot> getSlots (  )  { return slots.values (  ) ; }^[CLASS] ConcreteScope  [METHOD] getSlots [RETURN_TYPE] Collection   [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Variable_Misuse]^return  ( thisVar != null )  ? thisVar.getType (  )  : parent;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] ConcreteScope  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] List  actions  ConcreteSlot  thisVar  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Argument_Swapping]^return  ( ConcreteType.NONE != null )  ? thisVar.getType (  )  : thisVar;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] ConcreteScope  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] List  actions  ConcreteSlot  thisVar  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Operator]^return  ( thisVar == null )  ? thisVar.getType (  )  : ConcreteType.NONE;^218^^^^^214^219^return  ( thisVar != null )  ? thisVar.getType (  )  : ConcreteType.NONE;^[CLASS] ConcreteScope  [METHOD] getTypeOfThis [RETURN_TYPE] ConcreteType   [VARIABLES] List  actions  ConcreteSlot  thisVar  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Argument_Swapping]^slots.put ( var, name ) ;^230^^^^^227^231^slots.put ( name, var ) ;^[CLASS] ConcreteScope  [METHOD] declareSlot [RETURN_TYPE] void   String name Node declaration ConcreteType type [VARIABLES] ConcreteSlot  var  boolean  ConcreteScope  parent  Node  declaration  List  actions  String  name  Map  slots  ConcreteType  type  
[BugLab_Variable_Misuse]^if  ( decl.getType (  )  == Token.parent )  {^239^^^^^237^245^if  ( decl.getType (  )  == Token.FUNCTION )  {^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Wrong_Operator]^if  ( decl.getType (  )  != Token.FUNCTION )  {^239^^^^^237^245^if  ( decl.getType (  )  == Token.FUNCTION )  {^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( decl.getType (  )  == Token.parent ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( decl.getType (  )  >= Token.BLOCK ) ;^242^^^^^237^245^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Wrong_Literal]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( 0, decl, new CreateScope ( this, false )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( decl, compiler, new CreateScope ( this, false )  ) ;^244^^^^^237^245^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^[CLASS] ConcreteScope  [METHOD] initForScopeRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( decl.getType (  )  == Token.parent ) ;^250^^^^^248^253^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] ConcreteScope  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( decl.getType (  )  <= Token.BLOCK ) ;^250^^^^^248^253^Preconditions.checkArgument ( decl.getType (  )  == Token.BLOCK ) ;^[CLASS] ConcreteScope  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Wrong_Literal]^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, false )  ) ;^252^^^^^248^253^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[CLASS] ConcreteScope  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( decl, compiler, new CreateScope ( this, true )  ) ;^252^^^^^248^253^NodeTraversal.traverse ( compiler, decl, new CreateScope ( this, true )  ) ;^[CLASS] ConcreteScope  [METHOD] initForExternRoot [RETURN_TYPE] void   Node decl [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  Node  decl  
[BugLab_Argument_Swapping]^void addAction ( Action actions )  { action.add ( action ) ; }^256^^^^^251^261^void addAction ( Action action )  { actions.add ( action ) ; }^[CLASS] ConcreteScope  [METHOD] addAction [RETURN_TYPE] void   Action action [VARIABLES] List  actions  Action  action  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Operator]^return getTypeOfThis (   instanceof   ) .toString (  )  + " " + getSlots (  ) ;^259^^^^^258^260^return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[CLASS] ConcreteScope  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Operator]^return getTypeOfThis (  ) .toString (  )    instanceof   " " + getSlots (  ) ;^259^^^^^258^260^return getTypeOfThis (  ) .toString (  )  + " " + getSlots (  ) ;^[CLASS] ConcreteScope  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  actions  boolean  Map  slots  ConcreteScope  parent  
[BugLab_Wrong_Literal]^public boolean isTypeInferred (  )  { return false; }^284^^^^^279^289^public boolean isTypeInferred (  )  { return true; }^[CLASS] ConcreteSlot  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] String  name  boolean  ConcreteType  type  ConcreteScope  scope  
[BugLab_Variable_Misuse]^ConcreteType origType = type;^291^^^^^290^294^ConcreteType origType = this.type;^[CLASS] ConcreteSlot  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] String  name  boolean  ConcreteType  origType  type  ConcreteScope  scope  
[BugLab_Argument_Swapping]^this.type = type.unionWith ( origType ) ;^292^^^^^290^294^this.type = origType.unionWith ( type ) ;^[CLASS] ConcreteSlot  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] String  name  boolean  ConcreteType  origType  type  ConcreteScope  scope  
[BugLab_Variable_Misuse]^return !this.type.equals ( type ) ;^293^^^^^290^294^return !this.type.equals ( origType ) ;^[CLASS] ConcreteSlot  [METHOD] addConcreteType [RETURN_TYPE] boolean   ConcreteType type [VARIABLES] String  name  boolean  ConcreteType  origType  type  ConcreteScope  scope  
[BugLab_Wrong_Operator]^return getName (  &&  )  + ": " + getType (  ) ;^297^^^^^296^298^return getName (  )  + ": " + getType (  ) ;^[CLASS] ConcreteSlot  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] String  name  boolean  ConcreteType  origType  type  ConcreteScope  scope  
[BugLab_Wrong_Operator]^return getName (  )   >>  ": " + getType (  ) ;^297^^^^^296^298^return getName (  )  + ": " + getType (  ) ;^[CLASS] ConcreteSlot  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] String  name  boolean  ConcreteType  origType  type  ConcreteScope  scope  
[BugLab_Variable_Misuse]^this.expression = expression;^335^^^^^333^339^this.expression = expr;^[CLASS] VariableAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   ConcreteSlot slot Node expr [VARIABLES] ConcreteSlot  slot  Node  expr  expression  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( expression ) ;^338^^^^^333^339^Preconditions.checkNotNull ( expr ) ;^[CLASS] VariableAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   ConcreteSlot slot Node expr [VARIABLES] ConcreteSlot  slot  Node  expr  expression  boolean  
[BugLab_Variable_Misuse]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expr )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( scope, inferConcreteType ( slot, expression )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( expression, inferConcreteType ( scope, slot )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Variable_Misuse]^new Assignment ( slot, inferConcreteType ( scope, expr )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Argument_Swapping]^new Assignment ( slot, inferConcreteType ( expression, scope )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Argument_Swapping]^new Assignment ( scope, inferConcreteType ( slot, expression )  )  ) ;^343^^^^^341^344^new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Argument_Swapping]^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( expression, scope )  )  ) ;^342^343^^^^341^344^return Lists.newArrayList ( new Assignment ( slot, inferConcreteType ( scope, expression )  )  ) ;^[CLASS] VariableAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteSlot  slot  boolean  ConcreteScope  scope  Node  expr  expression  
[BugLab_Variable_Misuse]^this.receiver = expression;^354^^^^^353^361^this.receiver = receiver;^[CLASS] PropertyAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Node  expr  expression  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^this.propName = expression.getNext (  ) .getString (  ) ;^355^^^^^353^361^this.propName = receiver.getNext (  ) .getString (  ) ;^[CLASS] PropertyAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Node  expr  expression  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^this.expression = receiver;^356^^^^^353^361^this.expression = expr;^[CLASS] PropertyAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Node  expr  expression  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( expression ) ;^358^^^^^353^361^Preconditions.checkNotNull ( receiver ) ;^[CLASS] PropertyAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Node  expr  expression  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( receiver ) ;^360^^^^^353^361^Preconditions.checkNotNull ( expr ) ;^[CLASS] PropertyAssignAction  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node expr [VARIABLES] Node  expr  expression  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, expression ) ;^370^^^^^369^379^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^370^^^^^369^379^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Argument_Swapping]^ConcreteType exprType = inferConcreteType ( expression, scope ) ;^371^^^^^369^379^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Variable_Misuse]^ConcreteType exprType = inferConcreteType ( scope, receiver ) ;^371^^^^^369^379^ConcreteType exprType = inferConcreteType ( scope, expression ) ;^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Variable_Misuse]^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, recvType )  ) ;^376^^^^^369^379^assigns.add ( new Assignment (  ( ConcreteSlot )  prop, exprType )  ) ;^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Variable_Misuse]^: exprType.getPropertySlots ( propName )  )  {^375^^^^^369^379^: recvType.getPropertySlots ( propName )  )  {^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Argument_Swapping]^: propName.getPropertySlots ( recvType )  )  {^375^^^^^369^379^: recvType.getPropertySlots ( propName )  )  {^[CLASS] PropertyAssignAction  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Wrong_Literal]^private boolean isNewCall = true;^384^^^^^379^389^private boolean isNewCall = false;^[CLASS] FunctionCallBuilder  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Wrong_Literal]^private boolean isCallFunction = true;^385^^^^^380^390^private boolean isCallFunction = false;^[CLASS] FunctionCallBuilder  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] StaticSlot  prop  boolean  ConcreteScope  scope  Node  expr  expression  receiver  List  assigns  String  propName  ConcreteType  exprType  recvType  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^392^^^^^390^393^this.firstArgument = firstArgument;^[CLASS] FunctionCallBuilder  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver Node firstArgument [VARIABLES] boolean  isCallFunction  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ! ( isCallFunction && isNewCall ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] FunctionCallBuilder  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ! ( isNewCall && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] FunctionCallBuilder  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^Preconditions.checkState ( ! ( isNew && isCallFunction ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] FunctionCallBuilder  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ! ( isCallFunction || isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^402^403^^^^401^407^Preconditions.checkState ( ! ( isCallFunction && isNew ) , "A function call cannot be of the form: new Object.call (  ) " ) ;^[CLASS] FunctionCallBuilder  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^isNewCall = isNewCall;^405^^^^^401^407^isNewCall = isNew;^[CLASS] FunctionCallBuilder  [METHOD] setIsNewCall [RETURN_TYPE] TightenTypes$FunctionCallBuilder   boolean isNew [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Wrong_Literal]^isCallFunction = false;^417^^^^^413^419^isCallFunction = true;^[CLASS] FunctionCallBuilder  [METHOD] setIsCallFunction [RETURN_TYPE] TightenTypes$FunctionCallBuilder   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^422^^^^^421^427^if  ( isCallFunction )  {^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNew, receiver, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^return new FunctionCall ( isNewCall, receiver, propName, receiver ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( receiver, isNewCall, propName, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, firstArgument, propName, receiver ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( propName, receiver, isNewCall, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( firstArgument, receiver, propName, isNewCall ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, propName, receiver, firstArgument ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( propName, receiver, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( receiver, firstArgument, propName ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new NativeCallFunctionCall ( firstArgument, propName, receiver ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^return new NativeCallFunctionCall ( firstArgument, propName, firstArgument ) ;^423^^^^^421^427^return new NativeCallFunctionCall ( receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return new FunctionCall ( isNewCall, receiver, firstArgument, propName ) ;^425^^^^^421^427^return new FunctionCall ( isNewCall, receiver, propName, firstArgument ) ;^[CLASS] FunctionCallBuilder  [METHOD] build [RETURN_TYPE] TightenTypes$Action   [VARIABLES] boolean  isCallFunction  isNew  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( thisType, receiver ) , scope, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] ExternFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  boolean  ConcreteType  thisType  ConcreteScope  scope  Node  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( scope, argTypes ) , thisType, receiver ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] ExternFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  boolean  ConcreteType  thisType  ConcreteScope  scope  Node  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( argTypes, receiver ) , thisType, scope ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] ExternFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  boolean  ConcreteType  thisType  ConcreteScope  scope  Node  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( inferConcreteType ( receiver, scope ) , thisType, argTypes ) ;^470^471^^^^469^472^return getFunctionCallAssignments ( inferConcreteType ( scope, receiver ) , thisType, argTypes ) ;^[CLASS] ExternFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  boolean  ConcreteType  thisType  ConcreteScope  scope  Node  receiver  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^489^^^^^486^494^this.receiver = receiver;^[CLASS] FunctionCall  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] boolean  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^491^^^^^486^494^this.firstArgument = firstArgument;^[CLASS] FunctionCall  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] boolean  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( firstArgument ) ;^493^^^^^486^494^Preconditions.checkNotNull ( receiver ) ;^[CLASS] FunctionCall  [METHOD] <init> [RETURN_TYPE] Node)   boolean isNewCall Node receiver String propName Node firstArgument [VARIABLES] boolean  isNewCall  String  propName  Node  firstArgument  receiver  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, firstArgument ) ;^498^^^^^483^513^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^498^^^^^483^513^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Wrong_Operator]^if  ( propName == null )  {^502^^^^^487^517^if  ( propName != null )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^thisType = thisType;^503^^^^^488^518^thisType = recvType;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^recvType = recvType.getPropertyType ( propName ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^recvType = propName.getPropertyType ( thisType ) ;^504^^^^^489^519^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^if  ( thisType.isAll (  )  )  {^507^^^^^492^522^if  ( recvType.isAll (  )  )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^if  ( added )  {^516^^^^^501^531^if  ( isNewCall )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^thisType = 0;^517^^^^^502^532^thisType = ConcreteType.NONE;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^thisType = recvType.unionWith ( instType ) ;^520^^^^^505^535^thisType = thisType.unionWith ( instType ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^thisType = instType.unionWith ( thisType ) ;^520^^^^^505^535^thisType = thisType.unionWith ( instType ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^boolean added = allInstantiatedTypes.add ( recvType ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^boolean added = thisType.add ( allInstantiatedTypes ) ;^522^^^^^507^537^boolean added = allInstantiatedTypes.add ( thisType ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^: thisType.getFunctionInstanceTypes (  )  )  {^519^^^^^504^534^: recvType.getFunctionInstanceTypes (  )  )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^if  ( isNewCall )  {^523^^^^^508^538^if  ( added )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^for  ( Node receiver = firstArgument; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^for  ( Node arg = receiver; arg != null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Wrong_Operator]^for  ( Node arg = firstArgument; arg == null; arg = arg.getNext (  )  )  {^530^^^^^515^545^for  ( Node arg = firstArgument; arg != null; arg = arg.getNext (  )  )  {^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, receiver )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^argTypes.add ( inferConcreteType ( arg, scope )  ) ;^531^^^^^516^546^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( thisType, recvType, argTypes ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( recvType, argTypes, thisType ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( argTypes, thisType, recvType ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( recvType, recvType, argTypes ) ;^534^^^^^519^549^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] FunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] ConcreteInstanceType  instType  boolean  added  isNewCall  ConcreteScope  scope  Node  arg  firstArgument  receiver  List  argTypes  String  propName  ConcreteType  recvType  thisType  
[BugLab_Variable_Misuse]^this.receiver = firstArgument;^545^^^^^544^550^this.receiver = receiver;^[CLASS] NativeCallFunctionCall  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Node  firstArgument  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^this.firstArgument = receiver;^547^^^^^544^550^this.firstArgument = firstArgument;^[CLASS] NativeCallFunctionCall  [METHOD] <init> [RETURN_TYPE] Node)   Node receiver String propName Node firstArgument [VARIABLES] Node  firstArgument  receiver  String  propName  boolean  
[BugLab_Variable_Misuse]^ConcreteType thisType =  ( receiver != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^ConcreteType thisType =  ( scope != null ) ? inferConcreteType ( firstArgument, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Wrong_Operator]^ConcreteType thisType =  ( firstArgument == null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^553^554^555^^^552^570^ConcreteType thisType =  ( firstArgument != null ) ? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^? inferConcreteType ( scope, receiver ) : getTopScope (  ) .getTypeOfThis (  ) ;^554^555^^^^552^570^? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^? inferConcreteType ( firstArgument, scope ) : getTopScope (  ) .getTypeOfThis (  ) ;^554^555^^^^552^570^? inferConcreteType ( scope, firstArgument ) : getTopScope (  ) .getTypeOfThis (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^ConcreteType recvType = inferConcreteType ( receiver, scope ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^ConcreteType recvType = inferConcreteType ( scope, firstArgument ) ;^556^^^^^552^570^ConcreteType recvType = inferConcreteType ( scope, receiver ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^if  ( thisType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Wrong_Operator]^if  ( recvType instanceof ConcreteInstanceType || (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Wrong_Operator]^if  ( recvType  !=  ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^558^559^^^^552^570^if  ( recvType instanceof ConcreteInstanceType && (  ( ConcreteInstanceType )  recvType ) .isFunctionPrototype (  )  )  {^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^recvType = recvType.getPropertyType ( propName ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^recvType = propName.getPropertyType ( thisType ) ;^560^^^^^552^570^recvType = thisType.getPropertyType ( propName ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^for  ( Node receiver = firstArgument.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^for  ( Node arg = receiver.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^for  ( Node firstArgument = arg.getNext (  ) ;^564^^^^^552^570^for  ( Node arg = firstArgument.getNext (  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^argTypes.add ( inferConcreteType ( arg, scope )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^argTypes.add ( inferConcreteType ( scope, receiver )  ) ;^567^^^^^552^570^argTypes.add ( inferConcreteType ( scope, arg )  ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^arg = receiver.getNext (  )  )  {^566^^^^^552^570^arg = arg.getNext (  )  )  {^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( thisType, recvType, argTypes ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( recvType, argTypes, thisType ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^return getFunctionCallAssignments ( recvType, thisType, 3 ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Argument_Swapping]^return getFunctionCallAssignments ( argTypes, thisType, recvType ) ;^569^^^^^552^570^return getFunctionCallAssignments ( recvType, thisType, argTypes ) ;^[CLASS] NativeCallFunctionCall  [METHOD] getAssignments [RETURN_TYPE] Collection   ConcreteScope scope [VARIABLES] List  argTypes  String  propName  boolean  ConcreteType  recvType  thisType  ConcreteScope  scope  Node  arg  firstArgument  receiver  
[BugLab_Variable_Misuse]^if  ( receiver.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiverame.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  != nameull )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( nameame.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiverame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, nameame.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( nameame, n.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parent.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parentame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parent.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiverame.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n, createType ( n, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( scopeame.getString (  ) , n, createType ( name, n )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( scope.getString (  ) , n, createType ( name, name )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiver.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiverame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  != nameull )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( nameame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( name.getFirstChild (  )  == null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parent, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiverame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, nameame.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( nameame, n.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiver, name.getFirstChild (  ) , n )  ) ;^598^599^^^^583^613^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^name, receiver.getFirstChild (  ) , n )  ) ;^599^^^^^584^614^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  )  {^611^^^^^596^626^if  ( type.isNone (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( scope != receiverull )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( n != scopeull )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( scope == null )  {^615^^^^^600^630^if  ( scope != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  || type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( type.isNone (  )  && type.isAll (  )  )  {^617^^^^^602^632^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^type = createType ( receiver.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^type = createType ( parent.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^type = createUnionWithSubTypes ( retType ) ;^620^^^^^605^635^type = createUnionWithSubTypes ( type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node receiverameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( name.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiverameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, retType ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , nameNode, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^type = createType ( nameNode.getJSType (  )  ) ;^616^^^^^601^631^type = createType ( n.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , nameNode.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^597^627^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , parent.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , nameNode.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node parentameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNodeameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( type.getString (  ) , n, nameNode ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parent.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parentameNode.getString (  ) , n, type ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( typeameNode.getString (  ) , n, n ) ;^622^^^^^607^637^scope.declareSlot ( nameNode.getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , receiver ) ;^608^^^^^593^623^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , receiver.getFirstChild (  )  ) .getScope (  ) ;^613^614^^^^598^628^( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node nameNodeameNode = n.getLastChild (  ) ;^621^^^^^606^636^Node nameNode = n.getLastChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , receiver.getFirstChild (  )  ) .getScope (  ) ;^612^613^614^^^597^627^ConcreteScope scope = ( ConcreteScope )  inferConcreteType ( getTopScope (  ) , n.getFirstChild (  )  ) .getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( receiver )  )  {^630^^^^^615^645^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( inExterns || type.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( inExterns && type.getInstanceType (  )  == null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( nameNode, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^ConcreteFunctionType type = createConcreteFunction ( scope, n ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( receiver, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( type.getFirstChild (  ) .getString (  ) , n, n ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( type && inExterns.getInstanceType (  )  != null )  {^635^^^^^620^650^if  ( inExterns && type.getInstanceType (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parent.getFirstChild (  ) .getString (  ) , n, type ) ;^633^^^^^618^648^scope.declareSlot ( n.getFirstChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( receiver, n.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhs, parent.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addActions ( createAssignmentActions ( n, lhs.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiver.getType (  )  == Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  <= Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope =  ( ConcreteScope )  retType.getScope (  ) ;^653^^^^^638^668^scope =  ( ConcreteScope )  type.getScope (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , receiver.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( scope != null )  break;^658^^^^^643^673^if  ( scope == null )  break;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( retType.isNone (  )  || type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( type.isNone (  )  && type.isAll (  )  )  {^661^^^^^646^676^if  ( type.isNone (  )  || type.isAll (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( newret.isFunction (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( type.isFunctioreceiver (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiver.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null && ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  != null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   <<  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^retType = createUnionWithSubTypes ( type ) ;^673^^^^^658^688^retType = createUnionWithSubTypes ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) receiver.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( type ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^ConcreteType newret = retType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( type ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^|| ! ( receiver.getJSType (  )  instanceof FunctionType )  )  {^667^^^^^652^682^|| ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) nameNode.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType newret = newret.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( newret ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType newret = retType.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^674^675^^^^659^689^ConcreteType newret = type.toFunction (  ) .getReturnSlot (  ) .getType (  ) .unionWith ( retType ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  retType.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, retType ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  newret.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, type ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, newret, n ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )   &&  FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode.getFirstChild (  )  ) ;^651^652^^^^636^666^ConcreteType type = inferConcreteType ( getTopScope (  ) , lhs.getFirstChild (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , receiver ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( retType.isFunction (  )  )  {^665^^^^^650^680^if  ( type.isFunction (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( nameNode.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType retType = createType (  (  ( FunctionType ) parent.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^670^671^672^^^655^685^ConcreteType retType = createType (  (  ( FunctionType ) lhs.getJSType (  ) .restrictByNotNullOrUndefined (  )  ) .getReturnType (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, receiver, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, type ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^(  ( ConcreteScope )  n.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, type, newret ) ;^676^677^^^^661^691^(  ( ConcreteScope )  type.getScope (  )  ) .declareSlot ( ConcreteFunctionType.RETURN_SLOT_NAME, n, newret ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getLastChild (  ) .getString (  ) , n, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , parent, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, retType ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getLastChild (  ) .getString (  ) , lhs, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( type.getLastChild (  ) .getString (  ) , n, lhs ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  != Token.GETPROP )  {^650^^^^^635^665^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( receiver.getType (  )  <= Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( receiver.getType (  )  >= Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( receiverew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.null ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( receiverew FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  <= Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( parentew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  != Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( name, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^688^715^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setIsNewCall ( nameNode.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^688^715^.setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( "call".equals ( parent.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( parent.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( nameNode.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( first.getType (  )  == Token.3 )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  < Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, name.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( nameNode.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( receiver.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiver.getType (  )  == Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( parent.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^695^696^697^^^680^710^.setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^685^715^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, parent.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^700^701^702^^^692^703^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^694^695^696^697^^679^709^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getFirstChild (  ) .getNext (  ) .getString (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, parent.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( new FunctionCallBuilder ( receiver, first.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node first = parent.getFirstChild (  ) ;^689^^^^^674^704^Node first = receiver.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( "call".equals ( receiver.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( "call".equals ( nameNode.getNext (  ) .getString (  )  )  )  {^691^^^^^676^706^if  ( "call".equals ( first.getNext (  ) .getString (  )  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( nameNode, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( nameNode.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^692^722^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( parent.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^692^722^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^691^709^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.GETPROP )  {^692^^^^^677^707^if  ( first.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, name.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, name.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^692^703^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == nameNode )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( n.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == parent )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.CATCH || parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  >= Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  >= n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^709^739^scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^724^725^726^^^709^739^scope.declareSlot ( n.getString (  ) , n, createUnionWithSubTypes ( createType ( getTypeRegistry (  ) .getType ( "Error" )  ) .toInstance (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( nameNode.getFirstChild (  )  != null )  {^731^^^^^716^746^if  ( n.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  )  == null )  {^731^^^^^716^746^if  ( n.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( parentew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( scopeew VariableAssignAction ( ( ConcreteSlot )  n.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( receiverew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteFunctionType.RETURN_SLOT_NAME ) , receiver.getFirstChild (  )  )  ) ;^734^^^^^719^749^ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^for  ( receiverame = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^for  ( nameame = n.getFirstChild (  ) ; n != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^for  ( name = n.getFirstChild (  ) ; name == null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parentame.getFirstChild (  )  != null )  {^597^^^^^590^601^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parent, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( parentame, name.getFirstChild (  ) , n )  ) ;^598^599^^^^590^601^addActions ( createAssignmentActions ( name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiverame.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n ) ;^596^^^^^590^601^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^name, parent.getFirstChild (  ) , n )  ) ;^599^^^^^590^601^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parentame.getFirstChild (  )  != null )  {^597^^^^^582^612^if  ( name.getFirstChild (  )  != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^name, parent.getFirstChild (  ) , n )  ) ;^599^^^^^584^614^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiverame.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( n.getString (  ) , name ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^scope.declareSlot ( nameame.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( receiver.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^name, nameNode.getFirstChild (  ) , n )  ) ;^599^^^^^584^614^name, name.getFirstChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^for  ( nameNodeame = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^for  ( receiver = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( parent, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteFunctionType type = createConcreteFunction ( parent, scope ) ;^632^^^^^617^647^ConcreteFunctionType type = createConcreteFunction ( n, scope ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node lhs = receiver.getFirstChild (  ) ;^646^^^^^631^661^Node lhs = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node receiver = nameNode.getFirstChild (  ) ;^687^^^^^672^702^Node receiver = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^switch  ( nameNode.getType (  )  )  {^585^^^^^570^600^switch  ( n.getType (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^for  ( parent = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^589^^^^^574^604^for  ( name = n.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( parentame.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n, createType ( name, scope )  ) ;^594^^^^^579^609^scope.declareSlot ( name.getString (  ) , n, createType ( name, scope )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getString (  ) , n ) ;^596^^^^^581^611^scope.declareSlot ( name.getString (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , nameNode ) ;^608^^^^^593^623^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^ConcreteType type = inferConcreteType ( getTopScope (  ) , parent ) ;^660^^^^^645^675^ConcreteType type = inferConcreteType ( getTopScope (  ) , n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( parent.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^666^667^^^^651^681^if  ( lhs.getJSType (  )  == null || ! ( lhs.getJSType (  )  instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^scope.declareSlot ( nameNode.getLastChild (  ) .getString (  ) , n, type ) ;^679^^^^^664^694^scope.declareSlot ( lhs.getLastChild (  ) .getString (  ) , n, type ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addActions ( createAssignmentActions ( lhs, receiver.getLastChild (  ) , n )  ) ;^681^^^^^666^696^addActions ( createAssignmentActions ( lhs, n.getLastChild (  ) , n )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.GETPROP )  {^688^^^^^673^703^if  ( receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Node first = nameNode.getFirstChild (  ) ;^689^^^^^674^704^Node first = receiver.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^first, nameNode.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^701^702^^^^686^716^first, receiver.getNext (  )  ) .setIsCallFunction (  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, nameNode.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( first, name.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^706^707^708^^^691^721^addAction ( new FunctionCallBuilder ( first, receiver.getNext (  )  ) .setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setPropName ( receiver.getNext (  ) .getString (  )  ) .build (  )  ) ;^707^708^^^^692^722^.setPropName ( first.getNext (  ) .getString (  )  ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( nameNodeew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^addAction ( receiverew FunctionCallBuilder ( n, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  != Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( parentew FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  <= Token.NEW ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.2 ) .build (  )  ) ;^712^713^714^^^697^727^addAction ( new FunctionCallBuilder ( receiver, receiver.getNext (  )  ) .setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^.setIsNewCall ( parent.getType (  )  == Token.NEW ) .build (  )  ) ;^713^714^^^^698^728^.setIsNewCall ( n.getType (  )  == Token.NEW ) .build (  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( receiver.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^719^^^^^704^734^if  ( parent.getType (  )  == Token.CATCH && parent.getFirstChild (  )  == n )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^addAction ( nameNodeew VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^732^733^734^^^717^747^addAction ( new VariableAssignAction ( ( ConcreteSlot )  scope.getOwnSlot ( ConcreteFunctionType.RETURN_SLOT_NAME ) , n.getFirstChild (  )  )  ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Collection<Action> actions = getImplicitActions ( parent ) ;^739^^^^^724^754^Collection<Action> actions = getImplicitActions ( n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^Collection<Action> actions = getImplicitActions ( receiver ) ;^739^^^^^724^754^Collection<Action> actions = getImplicitActions ( n ) ;^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( action != null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Argument_Swapping]^if  ( actionss != null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Wrong_Operator]^if  ( actions == null )  {^740^^^^^725^755^if  ( actions != null )  {^[CLASS] CreateScope  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ConcreteFunctionType  type  Action  action  boolean  inExterns  NodeTraversal  t  ConcreteScope  scope  Node  first  lhs  n  name  nameNode  parent  receiver  Collection  actions  ConcreteType  newret  retType  type  
[BugLab_Variable_Misuse]^if  ( rhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^if  ( lhs.getFirstChild (  ) .getType (  )  != Token.REF_SPECIAL )  {^786^^^^^771^801^if  ( lhs.getFirstChild (  ) .getType (  )  == Token.REF_SPECIAL )  {^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  ==  parent.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  &&  parent.toStringTree (  )  ) ;^789^790^^^^786^791^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^"Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^790^^^^^786^791^"Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, receiver )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( new VariableAssignAction ( rhs, var )  ) ;^773^774^^^^758^788^return Lists.<Action>newArrayList ( new VariableAssignAction ( var, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( parent, rhs )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, parent )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( new PropertyAssignAction ( rhs, receiver )  ) ;^778^779^^^^763^793^return Lists.<Action>newArrayList ( new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^new VariableAssignAction ( var, receiver )  ) ;^774^^^^^759^789^new VariableAssignAction ( var, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^new VariableAssignAction ( rhs, var )  ) ;^774^^^^^759^789^new VariableAssignAction ( var, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^new PropertyAssignAction ( parent, rhs )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^new PropertyAssignAction ( receiver, parent )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^new PropertyAssignAction ( rhs, receiver )  ) ;^779^^^^^764^794^new PropertyAssignAction ( receiver, rhs )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  ==  parent.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^throw new AssertionError ( "Bad LHS for assignment: " + rhs.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for assignment: "  |  parent.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( rhs.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^ConcreteSlot var =  ( ConcreteSlot )  lhs.getSlot ( scope.getString (  )  ) ;^769^^^^^754^784^ConcreteSlot var =  ( ConcreteSlot )  scope.getSlot ( lhs.getString (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^Node receiver = rhs.getFirstChild (  ) ;^777^^^^^762^792^Node receiver = lhs.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for getref: "  &  parent.toStringTree (  )  ) ;^789^790^^^^774^804^throw new AssertionError ( "Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^throw new AssertionError ( "Bad LHS for assignment: "  <  parent.toStringTree (  )  ) ;^794^795^^^^779^809^throw new AssertionError ( "Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^switch  ( rhs.getType (  )  )  {^767^^^^^752^782^switch  ( lhs.getType (  )  )  {^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", rhs.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Argument_Swapping]^Preconditions.checkState ( lhs != null, "Type tightener could not find variable with name %s", var.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^Preconditions.checkState ( var == null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^770^771^772^^^755^785^Preconditions.checkState ( var != null, "Type tightener could not find variable with name %s", lhs.getString (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^"Bad LHS for getref: " + rhs.toStringTree (  )  ) ;^790^^^^^775^805^"Bad LHS for getref: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Variable_Misuse]^"Bad LHS for assignment: " + rhs.toStringTree (  )  ) ;^795^^^^^780^810^"Bad LHS for assignment: " + parent.toStringTree (  )  ) ;^[CLASS] CreateScope  [METHOD] createAssignmentActions [RETURN_TYPE] List   Node lhs Node rhs Node parent [VARIABLES] ConcreteSlot  var  boolean  inExterns  ConcreteScope  scope  Node  lhs  parent  receiver  rhs  
[BugLab_Wrong_Operator]^if  ( fun == null )  {^803^^^^^799^812^if  ( fun != null )  {^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Variable_Misuse]^argTypes.add ( createType ( receiver, scope )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Argument_Swapping]^argTypes.add ( createType ( scope, arg )  ) ;^806^^^^^799^812^argTypes.add ( createType ( arg, scope )  ) ;^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Variable_Misuse]^return new ExternFunctionCall ( arg, thisType, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Argument_Swapping]^return new ExternFunctionCall ( argTypes, thisType, receiver ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Argument_Swapping]^return new ExternFunctionCall ( thisType, receiver, argTypes ) ;^811^^^^^799^812^return new ExternFunctionCall ( receiver, thisType, argTypes ) ;^[CLASS] CreateScope  [METHOD] createExternFunctionCall [RETURN_TYPE] TightenTypes$ExternFunctionCall   Node receiver JSType jsThisType FunctionType fun [VARIABLES] boolean  inExterns  JSType  jsThisType  ConcreteScope  scope  Node  arg  receiver  FunctionType  fun  List  argTypes  ConcreteType  thisType  
[BugLab_Wrong_Operator]^if  ( n.getJSType (  )  == null )  {^815^^^^^814^820^if  ( n.getJSType (  )  != null )  {^[CLASS] CreateScope  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  n  
[BugLab_Variable_Misuse]^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Wrong_Operator]^if  ( !inExterns || receiver.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Wrong_Operator]^if  ( !inExterns && receiver.getType (  )  < Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( lhs, receiver.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, lhs.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Argument_Swapping]^return getImplicitActionsFromCall ( receiver, n.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^return getImplicitActionsFromCall ( n, n.getJSType (  )  ) ;^836^^^^^826^851^return getImplicitActionsFromCall ( n, receiver.getJSType (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Wrong_Operator]^if  ( !inExterns || lhs.getType (  )  == Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Wrong_Operator]^if  ( !inExterns && lhs.getType (  )  <= Token.GETPROP )  {^844^^^^^826^851^if  ( !inExterns && lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , receiver.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Argument_Swapping]^return getImplicitActionsFromProp ( n.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , lhs.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^return getImplicitActionsFromProp ( receiver.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^845^846^^^^826^851^return getImplicitActionsFromProp ( lhs.getFirstChild (  ) .getJSType (  ) , lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^lhs.getLastChild (  ) .getString (  ) , receiver.getLastChild (  )  ) ;^846^^^^^826^851^lhs.getLastChild (  ) .getString (  ) , n.getLastChild (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^Node receiver = lhs.getFirstChild (  ) ;^834^^^^^826^851^Node receiver = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^Node lhs = receiver.getFirstChild (  ) ;^841^^^^^826^851^Node lhs = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^switch  ( receiver.getType (  )  )  {^827^^^^^826^851^switch  ( n.getType (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^Node receiver = receiver.getFirstChild (  ) ;^834^^^^^826^851^Node receiver = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^if  ( !inExterns && n.getType (  )  == Token.GETPROP )  {^835^^^^^826^851^if  ( !inExterns && receiver.getType (  )  == Token.GETPROP )  {^[CLASS] CreateScope  [METHOD] getImplicitActions [RETURN_TYPE] Collection   Node n [VARIABLES] ConcreteScope  scope  boolean  inExterns  Node  lhs  n  receiver  
[BugLab_Variable_Misuse]^Node receiver = receiver.getFirstChild (  ) ;^855^^^^^840^870^Node receiver = n.getFirstChild (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( alt instanceof UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( recvType  <  UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( recvType  >=  UnionType )  {^856^^^^^841^871^if  ( recvType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^} else if  ( ! ( alt instanceof FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^} else if  ( ! ( recvType  ==  FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^return null;^861^^^^^846^876^return actions;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( receiver, alt )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromCall ( n, recvType )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromCall ( alt, n )  ) ;^859^^^^^844^874^actions.addAll ( getImplicitActionsFromCall ( n, alt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^} else if  ( ! ( recvType  <<  FunctionType )  )  {^862^^^^^847^877^} else if  ( ! ( recvType instanceof FunctionType )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^return 3;^861^^^^^846^876^return actions;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( getJSType ( param.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^866^867^868^^^851^881^ObjectType objType = ObjectType.cast ( getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^getJSType ( param.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^867^868^^^^852^882^getJSType ( receiver.getFirstChild (  )  ) .restrictByNotNullOrUndefined (  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^String prop = param.getLastChild (  ) .getString (  ) ;^869^^^^^854^884^String prop = receiver.getLastChild (  ) .getString (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^while  ( paramIter.hasNext (  )  && receiverumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^while  ( receiverIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^while  ( argumentIter.hasNext (  )  && paramIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^while  ( paramIter.hasNext (  )  || argumentIter.hasNext (  )  )  {^880^^^^^865^895^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( receiver.getJSType (  )  instanceof FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   <  FunctionType )  {^883^^^^^868^898^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( receiver, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , receiver.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( param, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , arg.getJSType (  )  )  ) ;^884^885^886^887^^869^899^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^(  ( FunctionType )  receiver.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^871^901^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^if  ( prop != null && ( objType.isPropertyInExterns ( objType )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType != null || ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType == null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^870^871^872^^^855^885^if  ( objType != null && ( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^while  ( paramIter.hasNext (  )  && receiverumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^while  ( receiverIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^while  ( argumentIter.hasNext (  )  && paramIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^while  ( argIter.hasNext (  )  && paramumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^while  ( paramIter.hasNext (  )  || argumentIter.hasNext (  )  )  {^880^^^^^870^891^while  ( paramIter.hasNext (  )  && argumentIter.hasNext (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   >=  FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( receiver, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , receiver.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( param, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , arg.getJSType (  )  )  ) ;^884^885^886^887^^870^891^actions.addAll ( getImplicitActionsFromArgument ( arg, (  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^(  ( FunctionType )  receiver.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^886^887^^^^870^891^(  ( FunctionType )  arg.getJSType (  )  ) .getTypeOfThis (  ) , param.getJSType (  )  )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( receiver.getJSType (  )  instanceof FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( arg.getJSType (  )   &  FunctionType )  {^883^^^^^870^891^if  ( arg.getJSType (  )  instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^return null;^890^^^^^870^891^return actions;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = receiver.children (  ) .iterator (  ) ;^878^^^^^870^891^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^Iterator<Node> argumentIter = receiver.children (  ) .iterator (  ) ;^878^^^^^863^893^Iterator<Node> argumentIter = n.children (  ) .iterator (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Argument_Swapping]^( prop.isPropertyInExterns ( objType )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^871^872^^^^856^886^( objType.isPropertyInExterns ( prop )  )  && (  ( FunctionType )  recvType ) .getParameters (  )  != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromCall [RETURN_TYPE] Collection   Node n JSType recvType [VARIABLES] ObjectType  objType  boolean  inExterns  JSType  alt  recvType  ConcreteScope  scope  Node  arg  n  param  receiver  Iterator  argumentIter  paramIter  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( paramAlt instanceof UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Wrong_Operator]^if  ( paramType  <  UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Wrong_Operator]^if  ( paramType  <=  UnionType )  {^897^^^^^895^911^if  ( paramType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Variable_Misuse]^} else if  ( paramAlt instanceof FunctionType )  {^904^^^^^895^911^} else if  ( paramType instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Wrong_Operator]^} else if  ( paramType  >=  FunctionType )  {^904^^^^^895^911^} else if  ( paramType instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( createExternFunctionCall ( thisType, arg, null )  ) ;^908^909^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType, null )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^return Lists.<Action>newArrayList ( createExternFunctionCall ( thisType, arg,  ( FunctionType )  paramType )  ) ;^905^906^^^^895^911^return Lists.<Action>newArrayList ( createExternFunctionCall ( arg, thisType,  ( FunctionType )  paramType )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramType )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( thisType, arg, paramAlt )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromArgument ( paramAlt, thisType, arg )  ) ;^900^901^^^^895^911^actions.addAll ( getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Variable_Misuse]^getImplicitActionsFromArgument ( arg, thisType, paramType )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^getImplicitActionsFromArgument ( thisType, arg, paramAlt )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^getImplicitActionsFromArgument ( arg, paramAlt, thisType )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Argument_Swapping]^getImplicitActionsFromArgument ( paramAlt, thisType, arg )  ) ;^901^^^^^895^911^getImplicitActionsFromArgument ( arg, thisType, paramAlt )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Variable_Misuse]^return 1;^903^^^^^895^911^return actions;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromArgument [RETURN_TYPE] Collection   Node arg ObjectType thisType JSType paramType [VARIABLES] ObjectType  thisType  List  actions  boolean  inExterns  JSType  paramAlt  paramType  ConcreteScope  scope  Node  arg  
[BugLab_Wrong_Operator]^if  ( jsType  <<  UnionType )  {^916^^^^^901^931^if  ( jsType instanceof UnionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( type != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^if  ( prop != null && !objType.isUnknownType (  )  && objType.hasProperty ( objType )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType != null || !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^916^937^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( prop, objType, fnNode ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^916^937^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( alt ) ;^932^^^^^916^937^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && type.hasProperty ( prop )  )  {^934^^^^^916^937^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^!objType.isUnknownType (  )  && prop.hasProperty ( objType )  )  {^934^^^^^916^937^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( altObj == null )  {^920^^^^^905^935^if  ( altObj != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( type.hasProperty ( prop )  )  {^923^^^^^908^938^if  ( altObj.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^if  ( prop.hasProperty ( altObj )  )  {^923^^^^^908^938^if  ( altObj.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Literal]^found = false;^924^^^^^909^939^found = true;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, fnNode, prop )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( fnNode, prop, altObj )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( prop, altObj, fnNode )  ) ;^921^922^^^^906^936^actions.addAll ( getImplicitActionsFromPropNonUnion ( altObj, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( inExterns )  {^928^^^^^913^943^if  ( found )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Literal]^boolean found = true;^917^^^^^902^932^boolean found = false;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^ObjectType jsTypeObj = ObjectType.cast ( alt ) ;^919^^^^^904^934^ObjectType altObj = ObjectType.cast ( alt ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( type != null )  {^920^^^^^905^935^if  ( altObj != null )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^if  ( type != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^if  ( prop != null && !objType.isUnknownType (  )  && objType.hasProperty ( objType )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType != null || !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Wrong_Operator]^if  ( objType == null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^933^934^^^^918^948^if  ( objType != null && !objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( prop, objType, fnNode ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^933^936^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^return 4;^929^^^^^914^944^return actions;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( fnNode, prop, objType ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( prop, objType, fnNode ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^return getImplicitActionsFromPropNonUnion ( objType, fnNode, prop ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^ObjectType objType = ObjectType.cast ( alt ) ;^932^^^^^917^947^ObjectType objType = ObjectType.cast ( jsType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^!objType.isUnknownType (  )  && type.hasProperty ( prop )  )  {^934^^^^^919^949^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^!objType.isUnknownType (  )  && prop.hasProperty ( objType )  )  {^934^^^^^919^949^!objType.isUnknownType (  )  && objType.hasProperty ( prop )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^return getImplicitActionsFromPropNonUnion ( type, prop, fnNode ) ;^935^^^^^920^950^return getImplicitActionsFromPropNonUnion ( objType, prop, fnNode ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^actions.addAll ( getImplicitActionsFromPropNonUnion ( objType, prop, fnNode )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( prop, type, fnNode )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, fnNode, prop )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Argument_Swapping]^actions.addAll ( getImplicitActionsFromPropNonUnion ( fnNode, prop, type )  ) ;^943^^^^^928^958^actions.addAll ( getImplicitActionsFromPropNonUnion ( type, prop, fnNode )  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromProp [RETURN_TYPE] Collection   JSType jsType String prop Node fnNode [VARIABLES] ObjectType  altObj  objType  type  boolean  found  inExterns  JSType  alt  jsType  Set  types  ConcreteScope  scope  Node  fnNode  List  actions  String  prop  
[BugLab_Variable_Misuse]^JSType propType = thisType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^JSType jsTypeType = prop.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^950^951^^^^948^967^JSType propType = jsType.getPropertyType ( prop ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^if  ( jsType.isPropertyInExterns ( propType )  && prop.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^if  ( jsType.isPropertyInExterns ( prop )  || propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Variable_Misuse]^if  ( thisType instanceof FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^if  ( jsType  <<  FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^if  ( propType  >  FunctionType )  {^959^^^^^948^967^if  ( propType instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Variable_Misuse]^Action action = createExternFunctionCall ( fnNode, jsType, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( thisType, fnNode, callType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( fnNode, callType, thisType ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^Action action = createExternFunctionCall ( callType, thisType, fnNode ) ;^962^963^^^^948^967^Action action = createExternFunctionCall ( fnNode, thisType, callType ) ;^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^if  ( jsType  !=  FunctionPrototypeType )  {^954^^^^^948^967^if  ( jsType instanceof FunctionPrototypeType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^if  ( propType  |  FunctionType )  {^959^^^^^948^967^if  ( propType instanceof FunctionType )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Variable_Misuse]^if  ( thisType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Argument_Swapping]^if  ( prop.isPropertyInExterns ( jsType )  && propType.isFunctionType (  )  )  {^952^^^^^948^967^if  ( jsType.isPropertyInExterns ( prop )  && propType.isFunctionType (  )  )  {^[CLASS] CreateScope  [METHOD] getImplicitActionsFromPropNonUnion [RETURN_TYPE] Collection   ObjectType jsType String prop Node fnNode [VARIABLES] ObjectType  jsType  thisType  Action  action  boolean  found  inExterns  JSType  propType  ConcreteScope  scope  Node  fnNode  FunctionType  callType  String  prop  
[BugLab_Wrong_Operator]^this.hashcode = concrete.hashCode (  >>  )  + getJSTypeHashCode (  ) ;^1373^^^^^1370^1374^this.hashcode = concrete.hashCode (  )  + getJSTypeHashCode (  ) ;^[CLASS] ConcreteJSTypePair  [METHOD] <init> [RETURN_TYPE] JSType)   ConcreteType concrete JSType jstype [VARIABLES] JSType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^return jstype == null ? jstype.hashCode (  )  : 0;^1377^^^^^1376^1378^return jstype != null ? jstype.hashCode (  )  : 0;^[CLASS] ConcreteJSTypePair  [METHOD] getJSTypeHashCode [RETURN_TYPE] int   [VARIABLES] JSType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Literal]^return jstype != null ? jstype.hashCode (  )  : ;^1377^^^^^1376^1378^return jstype != null ? jstype.hashCode (  )  : 0;^[CLASS] ConcreteJSTypePair  [METHOD] getJSTypeHashCode [RETURN_TYPE] int   [VARIABLES] JSType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^if  ( jstype == null || jsType == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^if  ( jsType == null && jstype == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^if  ( jsType != null || jstype == null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^if  ( jsType == null || jstype != null )  {^1381^^^^^1380^1386^if  ( jsType == null || jstype == null )  {^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^return jstype.equals ( this.jstype ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^return jsType.equals ( jstype ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^return this.jstype.equals ( jsType ) ;^1384^^^^^1380^1386^return jsType.equals ( this.jstype ) ;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^return jsType == jstype;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^return jstype <= jsType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^return jstype != jsType;^1382^^^^^1380^1386^return jstype == jsType;^[CLASS] ConcreteJSTypePair  [METHOD] equalsJSType [RETURN_TYPE] boolean   JSType jsType [VARIABLES] JSType  jsType  jstype  boolean  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^if  ( o  <<  ConcreteJSTypePair )  {^1390^^^^^1389^1398^if  ( o instanceof ConcreteJSTypePair )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^if  (  ( concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^if  (  ( pair.concrete.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^if  (  ( this.concrete.equals ( pair.concrete ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^if  (  ( pair.jstype.concrete.equals ( this.concrete ) && equalsJSType ( pair )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Operator]^if  (  ( pair.concrete.equals ( this.concrete ) || equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Literal]^return false;^1394^^^^^1389^1398^return true;^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^if  (  ( this.concrete.concrete.equals ( pair ) && equalsJSType ( pair.jstype )  )  )  {^1392^1393^^^^1389^1398^if  (  ( pair.concrete.equals ( this.concrete ) && equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Variable_Misuse]^&& equalsJSType ( jstype )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^&& equalsJSType ( pair.jstype.jstype )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Argument_Swapping]^&& equalsJSType ( pair )  )  )  {^1393^^^^^1389^1398^&& equalsJSType ( pair.jstype )  )  )  {^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
[BugLab_Wrong_Literal]^return true;^1397^^^^^1389^1398^return false;^[CLASS] ConcreteJSTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] Object  o  JSType  jsType  jstype  boolean  ConcreteJSTypePair  pair  ConcreteType  concrete  int  hashcode  
