[BugLab_Argument_Swapping]^super ( typeRegistry, convention ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^165^195^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^172^202^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[BugLab_Argument_Swapping]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  Pair  p  
[BugLab_Variable_Misuse]^if  ( right.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  == CALL || condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  != CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  != 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  >= CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  > CALL && condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Literal]^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  ==  )  {^195^^^^^193^217^if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( callee.getType (  )  != GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( callee.getType (  )  >= GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( rightType != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( paramType == null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( right.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && left.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( right.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && left.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( left.getType (  )  == STRING && "goog".equals ( left.getString (  )  )  && right.getType (  )  == NAME )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  == NAME || "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  >= NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  <= STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( restricter == null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return restrictParameter ( right, paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( restricter, paramType, blindScope, param, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( paramType, param, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( blindScope, paramType, param, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, paramType, restricter, blindScope, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( outcome, paramType, blindScope, restricter, param ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, restricter, blindScope, paramType, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, outcome, blindScope, restricter, paramType ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return restrictParameter ( left, paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( param.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^Function<Pair<JSType, Boolean>, JSType> restricter = right.get ( restricters.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^restricters.get ( left.getString (  )  ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^restricters.get ( param.getString (  )  ) ;^206^^^^^193^217^restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, paramType, blindScope, outcome, restricter ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, paramType, outcome, restricter, blindScope ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node right = param.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node right = right.getLastChild (  ) ;^202^^^^^193^217^Node right = callee.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( param.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  != NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  != STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return restrictParameter ( param, blindScope, paramType, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return restrictParameter ( param, paramType, blindScope, null, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^JSType rightType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^JSType blindScopeType =  getTypeIfRefinable ( param, param ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^JSType leftType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && param.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( STRING.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == left )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( left.getType (  )  == right && "goog".equals ( left.getString (  )  )  && NAME.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  <= NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node left = param.getFirstChild (  ) ;^201^^^^^193^217^Node left = callee.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && STRING.getType (  )  == right )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( 3 != null )  {^207^^^^^193^217^if  ( restricter != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node callee = right.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node param = right.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node callee = param.getFirstChild (  ) ;^196^^^^^193^217^Node callee = condition.getFirstChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node param = param.getLastChild (  ) ;^197^^^^^193^217^Node param = condition.getLastChild (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( right.getType (  )  == GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( callee.getType (  )  <= GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return restrictParameter ( param, paramType, blindScope, 0, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  >= STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return restrictParameter ( param, paramType, blindScope, 4, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( param.getType (  )  == GETPROP )  {^198^^^^^193^217^if  ( callee.getType (  )  == GETPROP )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return nextPreciserScopeKnowingConditionOutcome ( right, blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[BugLab_Argument_Swapping]^type = outcome.apply ( Pair.of ( type, restriction )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^type = restriction.apply ( Pair.of ( outcome, type )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^type = type.apply ( Pair.of ( restriction, outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( type == null )  {^226^^^^^219^233^if  ( type != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^231^^^^^219^233^return blindScope;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^229^^^^^219^233^return informed;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^227^^^^^219^233^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, parameter, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( type, parameter, informed ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( parameter, informed, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^180^^^^^177^181^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
[BugLab_Wrong_Operator]^return p.first != null ? null : p.first.visit ( visitor ) ;^187^^^^^184^188^return p.first == null ? null : p.first.visit ( visitor ) ;^[CLASS] 5  [METHOD] apply [RETURN_TYPE] JSType   Boolean> p [VARIABLES] boolean  Visitor  visitor  Pair  p  
