[buglab_swap_variables]^super ( typeRegistry, convention ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[buglab_swap_variables]^super (  typeRegistry ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[buglab_swap_variables]^super ( convention ) ;^125^^^^^110^140^super ( convention, typeRegistry ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] JSTypeRegistry  typeRegistry  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  CodingConvention  convention  Pair  p  
[buglab_swap_variables]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Map  restricters  
[buglab_swap_variables]^if  ( right.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && left.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^if  ( left.getType (  )  == STRING && "goog".equals ( left.getString (  )  )  && right.getType (  )  == NAME )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( restricter, paramType, blindScope, param, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter (  paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, restricter, blindScope, paramType, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param,  blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType, outcome, restricter, blindScope ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType,  restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType, blindScope,  outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType, blindScope, restricter ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( paramType, param, blindScope, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( blindScope, paramType, param, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType, restricter, blindScope, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, paramType, blindScope, outcome, restricter ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( outcome, paramType, blindScope, restricter, param ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^Function<Pair<JSType, Boolean>, JSType> restricter = right.get ( restricters.getString (  )  ) ;^205^206^^^^193^217^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, blindScope, paramType, restricter, outcome ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return restrictParameter ( param, outcome, blindScope, restricter, paramType ) ;^208^209^^^^193^217^return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^JSType blindScopeType =  getTypeIfRefinable ( param, param ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^JSType paramType =  getTypeIfRefinable (  blindScope ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^JSType paramType =  getTypeIfRefinable ( param ) ;^199^^^^^193^217^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^if  ( paramTypeType != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^if  ( STRING.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == left )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^if  ( param != null )  {^200^^^^^193^217^if  ( paramType != null )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^if  ( left.getType (  )  == right && "goog".equals ( left.getString (  )  )  && NAME.getType (  )  == STRING )  {^203^204^^^^193^217^if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome (  blindScope, outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( condition,  outcome ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope ) ;^215^216^^^^193^217^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  restricter  boolean  outcome  JSType  paramType  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  callee  condition  left  param  right  Map  restricters  FlowScope  blindScope  
[buglab_swap_variables]^type = outcome.apply ( Pair.of ( type, restriction )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^type = restriction.apply ( Pair.of ( outcome, type )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^type = restriction.apply ( Pair.of (  outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^type = restriction.apply ( Pair.of ( type )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^type = type.apply ( Pair.of ( restriction, outcome )  ) ;^223^^^^^219^233^type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( type, parameter, informed ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  parameter, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( parameter, informed, type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  type ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, type, parameter ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, parameter ) ;^228^^^^^219^233^declareNameInScope ( informed, parameter, type ) ;^[CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  [METHOD] restrictParameter [RETURN_TYPE] FlowScope   Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [VARIABLES] Function  restriction  JSType  type  boolean  outcome  Visitor  restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  Node  parameter  Map  restricters  FlowScope  blindScope  informed  
[buglab_swap_variables]^return type.isSubtype ( arrayType )  ? arrayType : null;^63^^^^^61^64^return arrayType.isSubtype ( type )  ? arrayType : null;^[CLASS] 1  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  type  JSType  arrayType  boolean  
