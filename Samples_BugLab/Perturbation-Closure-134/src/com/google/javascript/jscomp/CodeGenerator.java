[BugLab_Variable_Misuse]^cc = cc;^54^^^^^51^64^cc = consumer;^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset,boolean)   CodeConsumer consumer Charset outputCharset boolean validation [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( outputCharset == null || outputCharset == Charsets.null )  {^55^^^^^51^64^if  ( outputCharset == null || outputCharset == Charsets.US_ASCII )  {^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset,boolean)   CodeConsumer consumer Charset outputCharset boolean validation [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( outputCharset == null && outputCharset == Charsets.US_ASCII )  {^55^^^^^51^64^if  ( outputCharset == null || outputCharset == Charsets.US_ASCII )  {^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset,boolean)   CodeConsumer consumer Charset outputCharset boolean validation [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( outputCharset != null || outputCharset == Charsets.US_ASCII )  {^55^^^^^51^64^if  ( outputCharset == null || outputCharset == Charsets.US_ASCII )  {^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset,boolean)   CodeConsumer consumer Charset outputCharset boolean validation [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^this ( outputCharset, consumer, true ) ;^67^^^^^66^68^this ( consumer, outputCharset, true ) ;^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^this ( consumer, outputCharset, false ) ;^67^^^^^66^68^this ( consumer, outputCharset, true ) ;^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  Charset  outputCharset  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^this ( cc, null, false ) ;^71^^^^^70^72^this ( consumer, null, false ) ;^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] CodeConsumer)   CodeConsumer consumer [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^this ( consumer, null, true ) ;^71^^^^^70^72^this ( consumer, null, false ) ;^[CLASS] CodeGenerator Context  [METHOD] <init> [RETURN_TYPE] CodeConsumer)   CodeConsumer consumer [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, Context.STATEMENT ) ;^83^^^^^82^84^add ( n, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  CodeConsumer  cc  consumer  boolean  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  n  
[BugLab_Variable_Misuse]^int type = next.getType (  ) ;^91^^^^^76^106^int type = n.getType (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^String opstr = NodeUtil.opToStr ( precedence ) ;^92^^^^^77^107^String opstr = NodeUtil.opToStr ( type ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int childCount = next.getChildCount (  ) ;^93^^^^^78^108^int childCount = n.getChildCount (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node first = next.getFirstChild (  ) ;^94^^^^^79^109^Node first = n.getFirstChild (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node last = next.getLastChild (  ) ;^95^^^^^80^110^Node last = n.getLastChild (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( regexp != null && first != last )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( opstr != null && first != n )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( opstr != lastull && first != last )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( last != null && first != opstr )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( opstr != null && last != first )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( opstr != lastull && first != n )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( opstr != null || first != last )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( opstr == null && first != last )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( opstr != null && first == last )  {^98^^^^^83^113^if  ( opstr != null && first != last )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( last.getType (  )  == postProp && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( type.getType (  )  == last && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( last.getType (  )  == type || NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( last.getType (  )  != type && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( next )  && NodeUtil.isAssignmentOp ( last )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( next )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOtype ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.isAssignmentOp ( last )  && NodeUtil.isAssignmentOp ( n )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^} else if  ( NodeUtil.isAssignmentOp ( n )  || NodeUtil.isAssignmentOp ( last )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, p + 1, rhsContext ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type + 1, rhsContext ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p + 1, START_OF_EXPR ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( rhsContext, p + 1, last ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last + 1, rhsContext ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( last, rhsContext + 1, p ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( last, p , rhsContext ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, p, rhsContext ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, precedence, rhsContext ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last, rhsContext ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( rhsContext, p, last ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n, p, rhsContext ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type, rhsContext ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, STATEMENT ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( last, rhsContext, p ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, p + 1, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type + 1, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p + 1, context ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last + 1, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( last, rhsContext + 1, p ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( last, p + type, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, p, rhsContext ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type, rhsContext ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, START_OF_EXPR ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last, rhsContext ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( last, rhsContext, p ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOprecedence ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, precedence + 1, rhsContext ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p + 1, context ) ;^118^^^^^114^119^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, START_OF_EXPR ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int p = NodeUtil.precedence ( precedence ) ;^100^^^^^85^115^int p = NodeUtil.precedence ( type ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Context rhsContext = getContextForNoInOperator ( STATEMENT ) ;^106^^^^^91^121^Context rhsContext = getContextForNoInOperator ( context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^99^^^^^84^114^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 2 ) ;^99^^^^^84^114^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int p = NodeUtil.precedence ( postProp ) ;^100^^^^^85^115^int p = NodeUtil.precedence ( type ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( next, p, context ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, p, START_OF_EXPR ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( p, first, context ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( first, context, p ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addOp ( regexp, true ) ;^102^^^^^87^117^cc.addOp ( opstr, true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( opstr, false ) ;^102^^^^^87^117^cc.addOp ( opstr, true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^NodeUtil.isAssociative ( postProp )  )  {^112^^^^^97^127^NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n, p, rhsContext ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type, rhsContext ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, STATEMENT ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( rhsContext, p, last ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last, rhsContext ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( last, rhsContext, p ) ;^113^^^^^98^128^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( last )  && NodeUtil.isAssignmentOp ( last )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( n )  )  {^114^^^^^99^129^} else if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isAssignmentOp ( last )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, precedence + 1, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( rhsContext, p + 1, last ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( last.getType (  )  == precedence && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, context ) ;^116^^^^^101^131^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p + 1, START_OF_EXPR ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( last, p + postProp, rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, p, STATEMENT ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( rhsContext, p, last ) ;^113^^^^^111^119^addExpr ( last, p, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Context rhsContext = getContextForNoInOperator ( START_OF_EXPR ) ;^106^^^^^91^121^Context rhsContext = getContextForNoInOperator ( context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 2 ) ;^99^^^^^84^114^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 3 ) ;^99^^^^^84^114^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, type, context ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, p, STATEMENT ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( context, p, first ) ;^101^^^^^86^116^addLeftExpr ( first, p, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Context rhsContext = getContextForNoInOperator ( rhsContext ) ;^106^^^^^91^121^Context rhsContext = getContextForNoInOperator ( context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^111^112^^^^96^126^if  ( last.getType (  )  == type && NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^NodeUtil.isAssociative ( precedence )  )  {^112^^^^^97^127^NodeUtil.isAssociative ( type )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( last, p , rhsContext ) ;^118^^^^^103^133^addExpr ( last, p + 1, rhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.startSourceMapping ( next ) ;^123^^^^^108^138^cc.startSourceMapping ( n ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next != null )  {^137^^^^^122^152^if  ( catchblock != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( catchblock == null )  {^137^^^^^122^152^if  ( catchblock != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^138^^^^^123^153^add ( catchblock ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( precedence == 3 )  {^141^^^^^126^156^if  ( childCount == 3 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount < 3 )  {^141^^^^^126^156^if  ( childCount == 3 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == 4 )  {^141^^^^^126^156^if  ( childCount == 3 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next, Context.PRESERVE_BLOCK ) ;^143^^^^^128^158^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( last, Context.rhsContext ) ;^143^^^^^128^158^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getNext (  ) .getType (  )  <= Token.EMPTY )  {^150^^^^^135^165^if  ( first.getNext (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Catch conditions not suppored because I think"  ^  " that it may be a netscape only feature." ) ;^151^152^^^^136^166^throw new Error ( "Catch conditions not suppored because I think" + " that it may be a netscape only feature." ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Catch conditions not suppored because I think"  <  " that it may be a netscape only feature." ) ;^151^152^^^^136^166^throw new Error ( "Catch conditions not suppored because I think" + " that it may be a netscape only feature." ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount != 1 )  {^173^^^^^158^188^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == postProp )  {^173^^^^^158^188^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 0 ) ;^176^^^^^173^177^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 0 ) ;^176^^^^^173^177^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^174^^^^^159^189^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n != null )  {^182^^^^^167^197^if  ( first != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first == null )  {^182^^^^^167^197^if  ( first != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( next, false, getContextForNoInOperator ( context )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( first, false, getContextForNoInOperator ( STATEMENT )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addList ( context, false, getContextForNoInOperator ( first )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addList ( first, true, getContextForNoInOperator ( context )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next == null || first.getType (  )  == Token.EMPTY )  {^189^^^^^174^204^if  ( first == null || first.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( first == nextull || first.getType (  )  == Token.EMPTY )  {^189^^^^^174^204^if  ( first == null || first.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( n == firstull || first.getType (  )  == Token.EMPTY )  {^189^^^^^174^204^if  ( first == null || first.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first == null && first.getType (  )  == Token.EMPTY )  {^189^^^^^174^204^if  ( first == null || first.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first != null || first.getType (  )  == Token.EMPTY )  {^189^^^^^174^204^if  ( first == null || first.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.COMMA )  {^195^^^^^189^202^if  ( first.getType (  )  == Token.COMMA )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.COMMA )  {^195^^^^^189^202^if  ( first.getType (  )  == Token.COMMA )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 0, getContextForNoInOperator ( context )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, getContextForNoInOperator ( STATEMENT )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( context, 0, getContextForNoInOperator ( first )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, childCount, getContextForNoInOperator ( context )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, getContextForNoInOperator ( rhsContext )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, NodeUtil.precedence ( Token.ASSIGN )  ) ;^196^^^^^189^202^addExpr ( first, NodeUtil.precedence ( Token.ASSIGN )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 1 ) ;^192^^^^^189^202^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 1 ) ;^192^^^^^189^202^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( next.getString (  )  ) ;^193^^^^^189^202^addIdentifier ( n.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( last.getString (  )  ) ;^193^^^^^189^202^addIdentifier ( n.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( "=", false ) ;^194^^^^^189^202^cc.addOp ( "=", true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, precedence, getContextForNoInOperator ( context )  ) ;^200^^^^^189^202^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( next.getString (  )  ) ;^190^^^^^175^205^addIdentifier ( n.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.COMMA )  {^195^^^^^180^210^if  ( first.getType (  )  == Token.COMMA )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.COMMA )  {^195^^^^^180^210^if  ( first.getType (  )  == Token.COMMA )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 0, getContextForNoInOperator ( context )  ) ;^200^^^^^195^201^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, getContextForNoInOperator ( START_OF_EXPR )  ) ;^200^^^^^195^201^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( context, 0, getContextForNoInOperator ( first )  ) ;^200^^^^^195^201^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, p, getContextForNoInOperator ( context )  ) ;^200^^^^^195^201^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n, NodeUtil.precedence ( Token.ASSIGN )  ) ;^196^^^^^181^211^addExpr ( first, NodeUtil.precedence ( Token.ASSIGN )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( first.getType (  )  != Token.STRING || next.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( last.getType (  )  != Token.STRING || first.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.STRING && last.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  == Token.STRING || last.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  > Token.STRING || last.getType (  )  != Token.STRING )  {^252^253^^^^237^267^if  ( first.getType (  )  != Token.STRING || last.getType (  )  != Token.STRING )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( type == 2 )  {^260^^^^^245^275^if  ( childCount == 2 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount >= 2 )  {^260^^^^^245^275^if  ( childCount == 2 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount < 2 )  {^260^^^^^245^275^if  ( childCount == 2 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == 3 )  {^260^^^^^245^275^if  ( childCount == 2 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 1 ) ;^263^^^^^260^265^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount < 1 ) ;^263^^^^^260^265^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( opstr ) ;^264^^^^^260^265^add ( regexp ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( opstr + last.getString (  )  ) ;^261^^^^^246^276^add ( regexp + last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( regexp + n.getString (  )  ) ;^261^^^^^246^276^add ( regexp + last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( last + regexp.getString (  )  ) ;^261^^^^^246^276^add ( regexp + last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^add ( regexp  |  last.getString (  )  ) ;^261^^^^^246^276^add ( regexp + last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( stripBlock )  {^282^^^^^267^297^if  ( funcNeedsParens )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !validation )  {^302^^^^^287^317^if  ( !stripBlock )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.VAR )  {^309^^^^^294^324^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  <= Token.VAR )  {^309^^^^^294^324^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.FUNCTION )  {^313^^^^^298^328^if  ( c.getType (  )  == Token.FUNCTION )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  > Token.FUNCTION )  {^313^^^^^298^328^if  ( c.getType (  )  == Token.FUNCTION )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( precedence == Token.SCRIPT )  {^319^^^^^304^334^if  ( type == Token.SCRIPT )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( type >= Token.SCRIPT )  {^319^^^^^304^334^if  ( type == Token.SCRIPT )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !validation )  {^323^^^^^308^338^if  ( !stripBlock )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( rhsContext == Context.STATEMENT ) ;^324^^^^^309^339^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.rhsContext ) ;^324^^^^^309^339^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endBlock ( context >= Context.STATEMENT ) ;^324^^^^^309^339^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( type == 4 )  {^330^^^^^315^345^if  ( childCount == 4 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount >= 4 )  {^330^^^^^315^345^if  ( childCount == 4 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount != 4 )  {^330^^^^^315^345^if  ( childCount == 4 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == precedence )  {^330^^^^^315^345^if  ( childCount == 4 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 3 ) ;^345^^^^^330^353^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 3 ) ;^345^^^^^330^353^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == type ) ;^345^^^^^330^353^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^347^^^^^330^353^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  )  ) ;^349^^^^^330^353^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^351^352^^^^330^353^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^351^352^^^^330^353^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^351^352^^^^330^353^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( STATEMENT ) , false ) ;^352^^^^^330^353^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.VAR )  {^332^^^^^317^347^if  ( first.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.VAR )  {^332^^^^^317^347^if  ( first.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 0, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^332^336^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, Context.rhsContext ) ;^335^^^^^332^336^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, precedence, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^332^336^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, Context.IN_FOR_INIT_CLAUSE ) ;^333^^^^^318^348^add ( first, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( first, Context.rhsContext ) ;^333^^^^^318^348^add ( first, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next, Context.IN_FOR_INIT_CLAUSE ) ;^333^^^^^318^348^add ( first, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( first, Context.context ) ;^333^^^^^318^348^add ( first, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n, 0, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, Context.context ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, childCount, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  )  ) ;^338^^^^^323^353^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n.getNext (  )  ) ;^338^^^^^323^353^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  ) .getNext (  )  ) ;^340^^^^^325^355^add ( first.getNext (  ) .getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n.getNext (  ) .getNext (  )  ) ;^340^^^^^325^355^add ( first.getNext (  ) .getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^342^343^^^^327^357^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^342^343^^^^327^357^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^342^343^^^^327^357^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^342^343^^^^327^357^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( STATEMENT ) , false ) ;^343^^^^^328^358^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.VAR )  {^332^^^^^317^347^if  ( first.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, Context.STATEMENT ) ;^335^^^^^332^336^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, -1, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^332^336^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( first, Context.STATEMENT ) ;^333^^^^^318^348^add ( first, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( validation )  {^383^^^^^368^398^if  ( needsParens )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( validation )  {^387^^^^^372^402^if  ( needsParens )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( precedence != 0 )  {^419^^^^^404^434^if  ( postProp != 0 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( postProp <= 0 )  {^419^^^^^404^434^if  ( postProp != 0 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( postProp != type )  {^419^^^^^404^434^if  ( postProp != 0 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addOp ( regexp, false ) ;^423^^^^^419^425^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( o, true ) ;^423^^^^^419^425^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^424^^^^^419^425^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( next, NodeUtil.precedence ( type ) , context ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( precedence ) , context ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( type ) , rhsContext ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( type, NodeUtil.precedence ( first ) , context ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( first, NodeUtil.precedence ( context ) , type ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( postProp ) , context ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addOp ( regexp, false ) ;^421^^^^^406^436^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( o, true ) ;^421^^^^^406^436^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( stripBlock )  {^440^^^^^425^455^if  ( ambiguousElseClause )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( validation )  {^448^^^^^433^463^if  ( hasElse )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next.getNext (  ) , Context.OTHER, false ) ;^455^^^^^448^457^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, true ) ;^455^^^^^448^457^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( n.getNext (  ) , Context.OTHER, false ) ;^455^^^^^448^457^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^456^^^^^448^457^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount < 2 ) ;^456^^^^^448^457^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 1 ) ;^456^^^^^448^457^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( first.getNext (  ) , Context.BEFORE_DANGLING_ELSE, true ) ;^449^450^^^^434^464^addNonEmptyExpression ( first.getNext (  ) , Context.BEFORE_DANGLING_ELSE, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( n, getContextForNonEmptyExpression ( context ) , false ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( STATEMENT ) , false ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( rhsContext ) , false ) ;^453^^^^^438^468^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( validation )  {^459^^^^^444^474^if  ( ambiguousElseClause )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( type == 1 )  {^475^^^^^460^490^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount >= 1 )  {^475^^^^^460^490^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == 2 )  {^475^^^^^460^490^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^477^^^^^462^492^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( precedence == 1 )  {^491^^^^^476^506^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( childCount <= 1 )  {^491^^^^^476^506^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( childCount == childCount )  {^491^^^^^476^506^if  ( childCount == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^493^^^^^478^508^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( postProp == Token.EXPR_VOID && validation )  {^500^^^^^485^515^if  ( type == Token.EXPR_VOID && validation )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( type == Token.EXPR_VOID && needsParens )  {^500^^^^^485^515^if  ( type == Token.EXPR_VOID && validation )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( validation == Token.EXPR_VOID && type )  {^500^^^^^485^515^if  ( type == Token.EXPR_VOID && validation )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( type == Token.EXPR_VOID || validation )  {^500^^^^^485^515^if  ( type == Token.EXPR_VOID && validation )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( type != Token.EXPR_VOID && validation )  {^500^^^^^485^515^if  ( type == Token.EXPR_VOID && validation )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( NodeUtil.containsCall ( next )  )  {^515^^^^^500^530^if  ( NodeUtil.containsCall ( first )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^precedence = NodeUtil.precedence ( next.getType (  )  )  + 1;^516^^^^^501^531^precedence = NodeUtil.precedence ( first.getType (  )  )  + 1;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^precedence = NodeUtil.precedence ( first.getType (  !=  )  )  + 1;^516^^^^^501^531^precedence = NodeUtil.precedence ( first.getType (  )  )  + 1;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^precedence = NodeUtil.precedence ( first.getType (  )  )  ;^516^^^^^501^531^precedence = NodeUtil.precedence ( first.getType (  )  )  + 1;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^precedence = NodeUtil.precedence ( n.getType (  )  )  + 1;^516^^^^^501^531^precedence = NodeUtil.precedence ( first.getType (  )  )  + 1;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( last != null )  {^522^^^^^507^537^if  ( next != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( next == null )  {^522^^^^^507^537^if  ( next != null )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( n ) ;^524^^^^^509^539^addList ( next ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( validation )  {^543^^^^^528^558^if  ( needsParens )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next != first )  {^548^^^^^533^563^if  ( c != first )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( c != next )  {^548^^^^^533^563^if  ( c != first )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( first != c )  {^548^^^^^533^563^if  ( c != first )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > first )  {^548^^^^^533^563^if  ( c != first )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^554^555^556^557^^539^569^if  ( c.getType (  )  == Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  == Token.STRING || !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^554^555^556^557^^539^569^if  ( c.getType (  )  == Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  < Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^554^555^556^557^^539^569^if  ( c.getType (  )  == Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 1 ) ;^562^^^^^554^563^addExpr ( c, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( c, postProp ) ;^562^^^^^554^563^addExpr ( c, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n.getString (  )  ) ;^560^^^^^554^563^add ( c.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( stripBlock )  {^568^^^^^553^583^if  ( needsParens )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node c = next; c != null; c = c.getNext (  )  )  {^305^^^^^290^320^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node next = first; c != null; c = c.getNext (  )  )  {^305^^^^^290^320^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^for  ( Node first = c; c != null; c = c.getNext (  )  )  {^305^^^^^290^320^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( Node c = first; c == null; c = c.getNext (  )  )  {^305^^^^^290^320^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^309^^^^^294^324^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  == Token.3 )  {^309^^^^^294^324^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  != Token.VAR )  {^309^^^^^294^324^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  != Token.FUNCTION )  {^313^^^^^298^328^if  ( c.getType (  )  == Token.FUNCTION )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT )  {^319^^^^^304^334^if  ( type == Token.SCRIPT )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next, Context.STATEMENT ) ;^306^^^^^291^321^add ( c, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node c = next; c != null; c = c.getNext (  ) .getNext (  )  )  {^547^^^^^532^562^for  ( Node c = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node next = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^547^^^^^532^562^for  ( Node c = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^for  ( Node first = c; c != null; c = c.getNext (  ) .getNext (  )  )  {^547^^^^^532^562^for  ( Node c = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( Node c = first; c == null; c = c.getNext (  ) .getNext (  )  )  {^547^^^^^532^562^for  ( Node c = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c == first )  {^548^^^^^533^563^if  ( c != first )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  != Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^554^555^556^557^^539^569^if  ( c.getType (  )  == Token.STRING && !TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( c, type ) ;^562^^^^^554^563^addExpr ( c, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getString (  )  ) ;^560^^^^^554^563^add ( c.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^!TokenStream.isKeyword ( next.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^555^556^557^558^^540^570^!TokenStream.isKeyword ( c.getString (  )  )  && TokenStream.isJSIdentifier ( c.getString (  )  )  &&^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^TokenStream.isJSIdentifier ( n.getString (  )  )  &&   NodeUtil.isLatin ( c.getString (  )  )  )  {^556^557^558^559^^541^571^TokenStream.isJSIdentifier ( c.getString (  )  )  &&   NodeUtil.isLatin ( c.getString (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^NodeUtil.isLatin ( next.getString (  )  )  )  {^559^^^^^544^574^NodeUtil.isLatin ( c.getString (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getString (  )  ) ;^560^^^^^545^575^add ( c.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 1 ) ;^562^^^^^547^577^addExpr ( c, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( c, 2 ) ;^562^^^^^547^577^addExpr ( c, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next.getNext (  ) , 1 ) ;^565^^^^^550^580^addExpr ( c.getNext (  ) , 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^precedence = NodeUtil.precedence ( first.getType (  )  )  + ;^516^^^^^501^531^precedence = NodeUtil.precedence ( first.getType (  )  )  + 1;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Catch conditions not suppored because I think"  &&  " that it may be a netscape only feature." ) ;^151^152^^^^136^166^throw new Error ( "Catch conditions not suppored because I think" + " that it may be a netscape only feature." ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^throw new Error ( "Unknown precedence " + type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^throw nextew Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^throw typeew Error ( "Unknown n " + type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  &&  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type "  <=  type  <=  "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type "  <=  type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node catchblock = next.getNext (  ) .getFirstChild (  ) ;^136^^^^^121^151^Node catchblock = first.getNext (  ) .getFirstChild (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int p = NodeUtil.precedence ( precedence ) ;^242^^^^^227^257^int p = NodeUtil.precedence ( type ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^String regexp = regexpEscape ( next.getString (  ) , outputCharsetEncoder ) ;^257^^^^^242^272^String regexp = regexpEscape ( first.getString (  ) , outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^String regexp = regexpEscape ( outputCharsetEncoder.getString (  ) , first ) ;^257^^^^^242^272^String regexp = regexpEscape ( first.getString (  ) , outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean funcNeedsParens =  ( STATEMENT == Context.START_OF_EXPR ) ;^281^^^^^266^296^boolean funcNeedsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean funcNeedsParens =  ( context == Context.rhsContext ) ;^281^^^^^266^296^boolean funcNeedsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean funcNeedsParens =  ( context != Context.START_OF_EXPR ) ;^281^^^^^266^296^boolean funcNeedsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean stripBlock = next.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( STATEMENT != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean stripBlock = n.isSyntheticBlock (  )  && (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  ||  ( n.getChildCount (  )  < 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context == Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  <= 2 )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < precedence )  ) ;^300^301^^^^285^315^boolean stripBlock = n.isSyntheticBlock (  )  || (  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean needsParens =  ( n.getType (  )  == Token.NUMBER ) ;^382^^^^^367^397^boolean needsParens =  ( first.getType (  )  == Token.NUMBER ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean needsParens =  ( first.getType (  )  != Token.NUMBER ) ;^382^^^^^367^397^boolean needsParens =  ( first.getType (  )  == Token.NUMBER ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^String o = postProp == Token.INC ? "++" : "--";^415^^^^^400^430^String o = type == Token.INC ? "++" : "--";^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^String o = type >= Token.INC ? "++" : "--";^415^^^^^400^430^String o = type == Token.INC ? "++" : "--";^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int postProp = last.getIntProp ( Node.INCRDECR_PROP, 0 ) ;^416^^^^^401^431^int postProp = n.getIntProp ( Node.INCRDECR_PROP, 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^int postProp = n.getIntProp ( Node.INCRDECR_PROP, -1 ) ;^416^^^^^401^431^int postProp = n.getIntProp ( Node.INCRDECR_PROP, 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean hasElse = childCount != 3;^437^^^^^422^452^boolean hasElse = childCount == 3;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean ambiguousElseClause = rhsContext == Context.BEFORE_DANGLING_ELSE && !hasElse;^438^439^^^^423^453^boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean ambiguousElseClause = context == Context.rhsContext && !hasElse;^438^439^^^^423^453^boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE || !hasElse;^438^439^^^^423^453^boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean ambiguousElseClause = context >= Context.BEFORE_DANGLING_ELSE && !hasElse;^438^439^^^^423^453^boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int precedence = NodeUtil.precedence ( postProp ) ;^510^^^^^495^525^int precedence = NodeUtil.precedence ( type ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node next = n.getNext (  ) ;^521^^^^^506^536^Node next = first.getNext (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean needsParens =  ( rhsContext == Context.START_OF_EXPR ) ;^542^^^^^527^557^boolean needsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean needsParens =  ( context == Context.rhsContext ) ;^542^^^^^527^557^boolean needsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^boolean needsParens =  ( context <= Context.START_OF_EXPR ) ;^542^^^^^527^557^boolean needsParens =  ( context == Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Catch conditions not suppored because I think"  !=  " that it may be a netscape only feature." ) ;^151^152^^^^136^166^throw new Error ( "Catch conditions not suppored because I think" + " that it may be a netscape only feature." ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^throw new Error ( "Unknown postProp " + type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  <<  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type "  ^  type  ^  "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^throw new Error ( "Unknown type "  !=  type + "\n" + n.toStringTree (  )  ) ;^610^^^^^595^625^throw new Error ( "Unknown type " + type + "\n" + n.toStringTree (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( next.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^127^128^^^^112^142^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK || first.getNext (  ) .getChildCount (  )  <= 1 ) ;^127^128^^^^112^142^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( first.getNext (  ) .getType (  )  <= Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^127^128^^^^112^142^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  < 1 ) ;^127^128^^^^112^142^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 2 ) ;^127^128^^^^112^142^Preconditions.checkState ( first.getNext (  ) .getType (  )  == Token.BLOCK && first.getNext (  ) .getChildCount (  )  <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type >= 2 && childCount <= 3 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 2 || childCount <= 3 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 2 && childCount <= 3 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 2 && childCount > 3 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount >= 3 && childCount <= 3 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount >= 2 && childCount <= 4 ) ;^129^^^^^114^144^Preconditions.checkState ( childCount >= 2 && childCount <= 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next, Context.PRESERVE_BLOCK ) ;^132^^^^^117^147^add ( first, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( first, Context.STATEMENT ) ;^132^^^^^117^147^add ( first, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^138^^^^^123^153^add ( catchblock ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 3 ) ;^149^^^^^134^164^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == p ) ;^149^^^^^134^164^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getNext (  ) .getType (  )  != Token.EMPTY )  {^150^^^^^135^165^if  ( first.getNext (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getNext (  ) .getType (  )  != Token.EMPTY )  {^150^^^^^135^165^if  ( first.getNext (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^156^^^^^141^171^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, Context.PRESERVE_BLOCK ) ;^158^^^^^143^173^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( last, Context.rhsContext ) ;^158^^^^^143^173^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^162^^^^^147^177^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^162^^^^^147^177^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 0 ) ;^162^^^^^147^177^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^164^^^^^149^179^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.endStatement ( false ) ;^168^^^^^153^183^cc.endStatement ( true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 0 ) ;^176^^^^^161^191^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 0 ) ;^176^^^^^161^191^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == -1 ) ;^176^^^^^161^191^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( first, false, getContextForNoInOperator ( START_OF_EXPR )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( first, false, getContextForNoInOperator ( rhsContext )  ) ;^184^^^^^169^199^addList ( first, false, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^192^^^^^177^207^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^192^^^^^177^207^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( next.getString (  )  ) ;^193^^^^^178^208^addIdentifier ( n.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( last.getString (  )  ) ;^193^^^^^178^208^addIdentifier ( n.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( "=", false ) ;^194^^^^^179^209^cc.addOp ( "=", true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, NodeUtil.precedence ( Token.ASSIGN )  ) ;^196^^^^^181^211^addExpr ( first, NodeUtil.precedence ( Token.ASSIGN )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 0, getContextForNoInOperator ( context )  ) ;^200^^^^^185^215^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( context, 0, getContextForNoInOperator ( first )  ) ;^200^^^^^185^215^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, precedence, getContextForNoInOperator ( context )  ) ;^200^^^^^185^215^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, getContextForNoInOperator ( rhsContext )  ) ;^200^^^^^185^215^addExpr ( first, 0, getContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( next,  ( int[] )  n.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^208^^^^^193^223^addList ( first,  ( int[] )  n.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( first,  ( int[] )  next.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^208^^^^^193^223^addList ( first,  ( int[] )  n.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addList ( n,  ( int[] )  first.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^208^^^^^193^223^addList ( first,  ( int[] )  n.getProp ( Node.SKIP_INDEXES_PROP )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( n ) ;^214^^^^^199^229^addList ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( next, false, context ) ;^219^^^^^204^234^addList ( first, false, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( first, false, STATEMENT ) ;^219^^^^^204^234^addList ( first, false, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addList ( context, false, first ) ;^219^^^^^204^234^addList ( first, false, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addList ( first, true, context ) ;^219^^^^^204^234^addList ( first, false, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 0 ) ;^223^^^^^208^238^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 0 ) ;^223^^^^^208^238^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == childCount ) ;^223^^^^^208^238^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addNumber ( last.getDouble (  )  ) ;^224^^^^^209^239^cc.addNumber ( n.getDouble (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^234^^^^^219^249^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addOp ( NodeUtil.opToStrNoFail ( precedence ) , false ) ;^235^^^^^220^250^cc.addOp ( NodeUtil.opToStrNoFail ( type ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( NodeUtil.opToStrNoFail ( type ) , true ) ;^235^^^^^220^250^cc.addOp ( NodeUtil.opToStrNoFail ( type ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, NodeUtil.precedence ( type )  ) ;^236^^^^^221^251^addExpr ( first, NodeUtil.precedence ( type )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, NodeUtil.precedence ( precedence )  ) ;^236^^^^^221^251^addExpr ( first, NodeUtil.precedence ( type )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( type, NodeUtil.precedence ( first )  ) ;^236^^^^^221^251^addExpr ( first, NodeUtil.precedence ( type )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 3 ) ;^241^^^^^226^256^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 3 ) ;^241^^^^^226^256^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == postProp ) ;^241^^^^^226^256^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( n, p + 1, context ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, type + 1, context ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, p + 1, STATEMENT ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( p, first + 1, context ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( context, p + 1, first ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addLeftExpr ( first, p + p, context ) ;^243^^^^^228^258^addLeftExpr ( first, p + 1, context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( "?", false ) ;^244^^^^^229^259^cc.addOp ( "?", true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next.getNext (  ) , p ) ;^245^^^^^230^260^addExpr ( first.getNext (  ) , p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first.getNext (  ) , type ) ;^245^^^^^230^260^addExpr ( first.getNext (  ) , p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p.getNext (  ) , first ) ;^245^^^^^230^260^addExpr ( first.getNext (  ) , p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( ":", false ) ;^246^^^^^231^261^cc.addOp ( ":", true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, p ) ;^247^^^^^232^262^addExpr ( last, p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( last, type ) ;^247^^^^^232^262^addExpr ( last, p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( p, last ) ;^247^^^^^232^262^addExpr ( last, p ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( regexp + next.getString (  )  ) ;^261^^^^^246^276^add ( regexp + last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^263^^^^^248^278^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^263^^^^^248^278^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == precedence ) ;^263^^^^^248^278^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( opstr ) ;^264^^^^^249^279^add ( regexp ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^269^^^^^254^284^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^273^^^^^258^288^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 1 ) ;^273^^^^^258^288^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 0 ) ;^273^^^^^258^288^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^274^^^^^259^289^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add (  ( String )  next.getProp ( Node.NAME_PROP )  ) ;^276^^^^^261^291^add (  ( String )  n.getProp ( Node.NAME_PROP )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add (  ( String )  last.getProp ( Node.NAME_PROP )  ) ;^276^^^^^261^291^add (  ( String )  n.getProp ( Node.NAME_PROP )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 3 ) ;^280^^^^^265^295^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 3 ) ;^280^^^^^265^295^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == type ) ;^280^^^^^265^295^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^287^^^^^272^302^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  )  ) ;^289^^^^^274^304^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next, Context.PRESERVE_BLOCK ) ;^290^^^^^275^305^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( last, Context.STATEMENT ) ;^290^^^^^275^305^add ( last, Context.PRESERVE_BLOCK ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endFunction ( rhsContext == Context.STATEMENT ) ;^291^^^^^276^306^cc.endFunction ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endFunction ( context == Context.rhsContext ) ;^291^^^^^276^306^cc.endFunction ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endFunction ( context != Context.STATEMENT ) ;^291^^^^^276^306^cc.endFunction ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^(  ( context != Context.PRESERVE_BLOCK )  &&  ( next.getChildCount (  )  < 2 )  ) ;^301^^^^^286^316^(  ( context != Context.PRESERVE_BLOCK )  &&  ( n.getChildCount (  )  < 2 )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node n = first; c != null; c = c.getNext (  )  )  {^305^^^^^290^320^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( c, Context.START_OF_EXPR ) ;^306^^^^^291^321^add ( c, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.FUNCTION )  {^313^^^^^298^328^if  ( c.getType (  )  == Token.FUNCTION )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.START_OF_EXPR ) ;^324^^^^^309^339^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^332^^^^^317^347^if  ( first.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( next, 0, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, 0, Context.STATEMENT ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( first, postProp, Context.IN_FOR_INIT_CLAUSE ) ;^335^^^^^320^350^addExpr ( first, 0, Context.IN_FOR_INIT_CLAUSE ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( rhsContext ) , false ) ;^342^343^^^^327^357^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^343^^^^^328^358^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 3 ) ;^345^^^^^330^360^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 3 ) ;^345^^^^^330^360^Preconditions.checkState ( childCount == 3 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^347^^^^^332^362^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n.getNext (  )  ) ;^349^^^^^334^364^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  )  ) ;^349^^^^^334^364^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^351^352^^^^336^366^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( STATEMENT ) , false ) ;^351^352^^^^336^366^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^351^352^^^^336^366^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^351^352^^^^336^366^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^352^^^^^337^367^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 2 ) ;^357^^^^^342^372^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 2 ) ;^357^^^^^342^372^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount ==  ) ;^357^^^^^342^372^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( n, Context.OTHER, false ) ;^359^^^^^344^374^addNonEmptyExpression ( first, Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( first, Context.OTHER, true ) ;^359^^^^^344^374^addNonEmptyExpression ( first, Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^361^^^^^346^376^add ( last ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^367^^^^^352^382^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 2 ) ;^367^^^^^352^382^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == childCount ) ;^367^^^^^352^382^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^369^^^^^354^384^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^371^372^^^^356^386^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^371^372^^^^356^386^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^371^372^^^^356^386^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^371^372^^^^356^386^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^372^^^^^357^387^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 0 ) ;^376^^^^^361^391^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 0 ) ;^376^^^^^361^391^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == precedence ) ;^376^^^^^361^391^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 2 ) ;^380^^^^^365^395^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 2 ) ;^380^^^^^365^395^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 1 ) ;^380^^^^^365^395^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( last.getType (  )  != Token.STRING ) ;^381^^^^^366^396^Preconditions.checkState ( last.getType (  )  == Token.STRING ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( next.getType (  )  == Token.STRING ) ;^381^^^^^366^396^Preconditions.checkState ( last.getType (  )  == Token.STRING ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^boolean needsParens =  ( next.getType (  )  == Token.NUMBER ) ;^382^^^^^367^397^boolean needsParens =  ( first.getType (  )  == Token.NUMBER ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( next, NodeUtil.precedence ( type ) , context ) ;^386^^^^^371^401^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( precedence ) , context ) ;^386^^^^^371^401^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( type ) , STATEMENT ) ;^386^^^^^371^401^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( context, NodeUtil.precedence ( type ) , first ) ;^386^^^^^371^401^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( type, NodeUtil.precedence ( first ) , context ) ;^386^^^^^371^401^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addIdentifier ( next.getString (  )  ) ;^391^^^^^376^406^addIdentifier ( last.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 2 ) ;^396^^^^^381^411^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 2 ) ;^396^^^^^381^411^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == childCount ) ;^396^^^^^381^411^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( n, NodeUtil.precedence ( type ) , context ) ;^397^^^^^382^412^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( precedence ) , context ) ;^397^^^^^382^412^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( type ) , STATEMENT ) ;^397^^^^^382^412^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( context, NodeUtil.precedence ( type ) , first ) ;^397^^^^^382^412^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( first, NodeUtil.precedence ( context ) , type ) ;^397^^^^^382^412^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next.getNext (  )  ) ;^399^^^^^384^414^add ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^404^^^^^389^419^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 2 ) ;^404^^^^^389^419^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 3 ) ;^404^^^^^389^419^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^406^^^^^391^421^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^408^409^^^^393^423^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^408^409^^^^393^423^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , false ) ;^408^409^^^^393^423^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^408^409^^^^393^423^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( START_OF_EXPR ) , false ) ;^409^^^^^394^424^last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^414^^^^^399^429^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^414^^^^^399^429^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == p ) ;^414^^^^^399^429^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^int postProp = n.getIntProp ( Node.INCRDECR_PROP,  ) ;^416^^^^^401^431^int postProp = n.getIntProp ( Node.INCRDECR_PROP, 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( n, NodeUtil.precedence ( type ) , context ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( context, NodeUtil.precedence ( type ) , first ) ;^420^^^^^405^435^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.addOp ( regexp, false ) ;^423^^^^^408^438^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.addOp ( o, true ) ;^423^^^^^408^438^cc.addOp ( o, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^424^^^^^409^439^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( next, NodeUtil.precedence ( type ) , context ) ;^430^^^^^415^445^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( precedence ) , context ) ;^430^^^^^415^445^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addLeftExpr ( first, NodeUtil.precedence ( type ) , rhsContext ) ;^430^^^^^415^445^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( type, NodeUtil.precedence ( first ) , context ) ;^430^^^^^415^445^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addLeftExpr ( first, NodeUtil.precedence ( context ) , type ) ;^430^^^^^415^445^addLeftExpr ( first, NodeUtil.precedence ( type ) , context ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( n.getNext (  )  ) ;^432^^^^^417^447^addList ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( next.getNext (  )  ) ;^432^^^^^417^447^addList ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^445^^^^^430^460^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next.getNext (  ) , Context.BEFORE_DANGLING_ELSE, false ) ;^449^450^^^^434^464^addNonEmptyExpression ( first.getNext (  ) , Context.BEFORE_DANGLING_ELSE, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next, getContextForNonEmptyExpression ( context ) , false ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( rhsContext ) , false ) ;^452^453^^^^437^467^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, true ) ;^455^^^^^440^470^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( next.getNext (  ) , Context.OTHER, false ) ;^455^^^^^440^470^addNonEmptyExpression ( first.getNext (  ) , Context.OTHER, false ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^456^^^^^441^471^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 2 ) ;^456^^^^^441^471^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 0 ) ;^468^^^^^453^483^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount >= 0 ) ;^468^^^^^453^483^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount ==  ) ;^468^^^^^453^483^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( Node.tokenToName ( postProp )  ) ;^469^^^^^454^484^add ( Node.tokenToName ( type )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( Node.tokenToName ( precedence )  ) ;^469^^^^^454^484^add ( Node.tokenToName ( type )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type <= 1 ) ;^473^^^^^458^488^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount > 1 ) ;^473^^^^^458^488^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount <= type ) ;^473^^^^^458^488^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 0 ) ;^483^^^^^468^498^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 0 ) ;^483^^^^^468^498^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == p ) ;^483^^^^^468^498^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type <= 1 ) ;^489^^^^^474^504^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount < 1 ) ;^489^^^^^474^504^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount <= 0 ) ;^489^^^^^474^504^Preconditions.checkState ( childCount <= 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^503^^^^^488^518^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^503^^^^^488^518^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 0 ) ;^503^^^^^488^518^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( first, Context.rhsContext ) ;^504^^^^^489^519^add ( first, Context.START_OF_EXPR ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( NodeUtil.containsCall ( n )  )  {^515^^^^^500^530^if  ( NodeUtil.containsCall ( first )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( first, postProp ) ;^518^^^^^503^533^addExpr ( first, precedence ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( precedence, first ) ;^518^^^^^503^533^addExpr ( first, precedence ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node next = next.getNext (  ) ;^521^^^^^506^536^Node next = first.getNext (  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( precedence == 0 ) ;^530^^^^^515^545^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount <= 0 ) ;^530^^^^^515^545^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == -1 ) ;^530^^^^^515^545^Preconditions.checkState ( childCount == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( jsString ( next.getString (  ) , outputCharsetEncoder )  ) ;^531^^^^^516^546^add ( jsString ( n.getString (  ) , outputCharsetEncoder )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( jsString ( outputCharsetEncoder.getString (  ) , n )  ) ;^531^^^^^516^546^add ( jsString ( n.getString (  ) , outputCharsetEncoder )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( jsString ( last.getString (  ) , outputCharsetEncoder )  ) ;^531^^^^^516^546^add ( jsString ( n.getString (  ) , outputCharsetEncoder )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^535^^^^^520^550^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^535^^^^^520^550^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount == 0 ) ;^535^^^^^520^550^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^537^^^^^522^552^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type % 2 == 0 ) ;^541^^^^^526^556^Preconditions.checkState ( childCount % 2 == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount % 2 >= 0 ) ;^541^^^^^526^556^Preconditions.checkState ( childCount % 2 == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount   instanceof   2 == 0 ) ;^541^^^^^526^556^Preconditions.checkState ( childCount % 2 == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount % type == 0 ) ;^541^^^^^526^556^Preconditions.checkState ( childCount % 2 == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^Preconditions.checkState ( childCount % 2 == postProp ) ;^541^^^^^526^556^Preconditions.checkState ( childCount % 2 == 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node n = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^547^^^^^532^562^for  ( Node c = first; c != null; c = c.getNext (  ) .getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^TokenStream.isJSIdentifier ( next.getString (  )  )  &&   NodeUtil.isLatin ( c.getString (  )  )  )  {^556^557^558^559^^541^571^TokenStream.isJSIdentifier ( c.getString (  )  )  &&   NodeUtil.isLatin ( c.getString (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n.getString (  )  ) ;^560^^^^^545^575^add ( c.getString (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n.getNext (  ) , 1 ) ;^565^^^^^550^580^addExpr ( c.getNext (  ) , 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^576^^^^^561^591^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addAllSiblings ( next.getNext (  )  ) ;^579^^^^^564^594^addAllSiblings ( first.getNext (  )  ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( rhsContext == Context.STATEMENT ) ;^580^^^^^565^595^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.START_OF_EXPR ) ;^580^^^^^565^595^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endBlock ( context != Context.STATEMENT ) ;^580^^^^^565^595^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^584^^^^^569^599^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 2 ) ;^584^^^^^569^599^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n ) ;^586^^^^^571^601^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addCaseBody ( next ) ;^587^^^^^572^602^addCaseBody ( last ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 1 ) ;^591^^^^^576^606^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 1 ) ;^591^^^^^576^606^Preconditions.checkState ( childCount == 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addCaseBody ( next ) ;^593^^^^^578^608^addCaseBody ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Preconditions.checkState ( type == 2 ) ;^597^^^^^582^612^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^Preconditions.checkState ( childCount != 2 ) ;^597^^^^^582^612^Preconditions.checkState ( childCount == 2 ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( next ) ;^598^^^^^583^613^add ( first ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addNonEmptyExpression ( n, getContextForNonEmptyExpression ( context ) , true ) ;^600^601^^^^585^615^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addNonEmptyExpression ( context, getContextForNonEmptyExpression ( last ) , true ) ;^600^601^^^^585^615^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , false ) ;^600^601^^^^585^615^addNonEmptyExpression ( last, getContextForNonEmptyExpression ( context ) , true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^last, getContextForNonEmptyExpression ( rhsContext ) , true ) ;^601^^^^^586^616^last, getContextForNonEmptyExpression ( context ) , true ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endSourceMapping ( next ) ;^613^^^^^598^628^cc.endSourceMapping ( n ) ;^[CLASS] CodeGenerator Context  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  c  catchblock  first  last  n  next  CodeConsumer  cc  consumer  String  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !validation && n.getType (  )  != Token.BLOCK )  {^627^^^^^612^642^if  ( !allowNonBlockChild && n.getType (  )  != Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !allowNonBlockChild && nodeToProcess.getType (  )  != Token.BLOCK )  {^627^^^^^612^642^if  ( !allowNonBlockChild && n.getType (  )  != Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( !allowNonBlockChild || n.getType (  )  != Token.BLOCK )  {^627^^^^^612^642^if  ( !allowNonBlockChild && n.getType (  )  != Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( !allowNonBlockChild && n.getType (  )  == Token.BLOCK )  {^627^^^^^612^642^if  ( !allowNonBlockChild && n.getType (  )  != Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( stripBlock )  {^628^^^^^613^643^if  ( validation )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( hasElse )  {^628^^^^^613^643^if  ( validation )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( nodeToProcess.getType (  )  == Token.BLOCK )  {^634^^^^^619^649^if  ( n.getType (  )  == Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.BLOCK )  {^634^^^^^619^649^if  ( n.getType (  )  == Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.BLOCK )  {^634^^^^^619^649^if  ( n.getType (  )  == Token.BLOCK )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( count != 0 )  {^636^^^^^621^651^if  ( count == 0 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( count == count )  {^636^^^^^621^651^if  ( count == 0 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.endStatement ( false ) ;^637^^^^^622^652^cc.endStatement ( true ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( count != 1 )  {^641^^^^^626^656^if  ( count == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( count >= 1 )  {^641^^^^^626^656^if  ( count == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( count <= 1 )  {^641^^^^^626^656^if  ( count == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( nodeToProcess.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^646^647^^^^631^661^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION && firstAndOnlyChild.getType (  )  == Token.DO )  {^646^647^^^^631^661^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( firstAndOnlyChild.getType (  )  > Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^646^647^^^^631^661^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( firstAndOnlyChild.getType (  )  <= Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^646^647^^^^631^661^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^nodeToProcess = nodeToProcess;^655^^^^^646^656^nodeToProcess = firstAndOnlyChild;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( nodeToProcess, Context.STATEMENT ) ;^649^^^^^646^656^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( firstAndOnlyChild, Context.context ) ;^649^^^^^646^656^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( rhsContext == Context.STATEMENT ) ;^651^^^^^646^656^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.rhsContext ) ;^651^^^^^646^656^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endBlock ( context != Context.STATEMENT ) ;^651^^^^^646^656^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^nodeToProcess = nodeToProcess;^655^^^^^640^670^nodeToProcess = firstAndOnlyChild;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^Node firstAndOnlyChild = getFirstNonEmptyChild ( nodeToProcess ) ;^645^^^^^630^660^Node firstAndOnlyChild = getFirstNonEmptyChild ( n ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( nodeToProcess, Context.STATEMENT ) ;^649^^^^^634^664^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( firstAndOnlyChild, Context.context ) ;^649^^^^^634^664^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( START_OF_EXPR == Context.STATEMENT ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.START_OF_EXPR ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endBlock ( context >= Context.STATEMENT ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( firstAndOnlyChild.getType (  )  != Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^646^647^^^^631^661^if  ( firstAndOnlyChild.getType (  )  == Token.FUNCTION || firstAndOnlyChild.getType (  )  == Token.DO )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( firstAndOnlyChild, Context.START_OF_EXPR ) ;^649^^^^^646^656^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int count = getNonEmptyChildCount ( nodeToProcess ) ;^635^^^^^620^650^int count = getNonEmptyChildCount ( n ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( firstAndOnlyChild, Context.START_OF_EXPR ) ;^649^^^^^634^664^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( rhsContext == Context.STATEMENT ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^cc.endBlock ( context == Context.rhsContext ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( count == count )  {^641^^^^^626^656^if  ( count == 1 )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( firstAndOnlyChild, Context.rhsContext ) ;^649^^^^^634^664^add ( firstAndOnlyChild, Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^cc.endBlock ( context <= Context.STATEMENT ) ;^651^^^^^636^666^cc.endBlock ( context == Context.STATEMENT ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.EMPTY )  {^660^^^^^645^675^if  ( nodeToProcess.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( nodeToProcess.getType (  )  != Token.EMPTY )  {^660^^^^^645^675^if  ( nodeToProcess.getType (  )  == Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^667^^^^^660^670^if  ( nodeToProcess.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( nodeToProcess.getType (  )  != Token.VAR )  {^667^^^^^660^670^if  ( nodeToProcess.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, context ) ;^663^^^^^660^670^add ( nodeToProcess, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( nodeToProcess, STATEMENT ) ;^663^^^^^660^670^add ( nodeToProcess, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( context, nodeToProcess ) ;^663^^^^^660^670^add ( nodeToProcess, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^cc.endStatement ( false ) ;^661^^^^^646^676^cc.endStatement ( true ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^667^^^^^652^682^if  ( nodeToProcess.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( nodeToProcess.getType (  )  != Token.VAR )  {^667^^^^^652^682^if  ( nodeToProcess.getType (  )  == Token.VAR )  {^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, context ) ;^663^^^^^648^678^add ( nodeToProcess, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( context, nodeToProcess ) ;^663^^^^^648^678^add ( nodeToProcess, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addNonEmptyExpression [RETURN_TYPE] void   Node n Context context boolean allowNonBlockChild [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  firstAndOnlyChild  n  nodeToProcess  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  count  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( n, minPrecedence, START_OF_EXPR ) ;^683^^^^^682^684^addExpr ( n, minPrecedence, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addLeftExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( context, minPrecedence, n ) ;^683^^^^^682^684^addExpr ( n, minPrecedence, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addLeftExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( n, context, minPrecedence ) ;^683^^^^^682^684^addExpr ( n, minPrecedence, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addLeftExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^addExpr ( minPrecedence, n, Context.OTHER ) ;^687^^^^^686^688^addExpr ( n, minPrecedence, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( STATEMENT == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.rhsContext )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.3 )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.precedence ( context.getType (  )  )  < minPrecedence )  || (  ( n == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.precedence ( minPrecedence.getType (  )  )  < n )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  && (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  <= minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  || ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context != Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context <= Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^691^692^693^^^690^700^if  (  ( NodeUtil.precedence ( n.getType (  )  )  < minPrecedence )  || (  ( context == Context.IN_FOR_INIT_CLAUSE )  && ( n.getType (  )  == Token.IN )  )  ) {^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, rhsContext ) ;^698^^^^^690^700^add ( n, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( context, n ) ;^698^^^^^690^700^add ( n, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, clearContextForNoInOperator ( rhsContext )  ) ;^695^^^^^690^700^add ( n, clearContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^add ( context, clearContextForNoInOperator ( n )  ) ;^695^^^^^690^700^add ( n, clearContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, clearContextForNoInOperator ( STATEMENT )  ) ;^695^^^^^690^700^add ( n, clearContextForNoInOperator ( context )  ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^add ( n, START_OF_EXPR ) ;^698^^^^^690^700^add ( n, context ) ;^[CLASS] CodeGenerator Context  [METHOD] addExpr [RETURN_TYPE] void   Node n int minPrecedence Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  Node  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addList ( firstInList, true, Context.rhsContext ) ;^703^^^^^702^704^addList ( firstInList, true, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  
[BugLab_Wrong_Literal]^addList ( firstInList, false, Context.OTHER ) ;^703^^^^^702^704^addList ( firstInList, true, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  
[BugLab_Variable_Misuse]^addList ( firstInList, validation, Context.OTHER ) ;^707^^^^^706^708^addList ( firstInList, isArrayOrFunctionArgument, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  
[BugLab_Variable_Misuse]^addList ( firstInList, isArrayOrFunctionArgument, Context.rhsContext ) ;^707^^^^^706^708^addList ( firstInList, isArrayOrFunctionArgument, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  
[BugLab_Argument_Swapping]^addList ( isArrayOrFunctionArgument, firstInList, Context.OTHER ) ;^707^^^^^706^708^addList ( firstInList, isArrayOrFunctionArgument, Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  
[BugLab_Variable_Misuse]^if  ( validation )  {^714^^^^^710^721^if  ( isFirst )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addExpr ( firstInList, isArrayOrFunctionArgument ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addExpr ( n, needsParens ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Argument_Swapping]^addExpr ( isArrayOrFunctionArgument, n ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addLeftExpr ( firstInList, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addLeftExpr ( n, stripBlock ? 1 : 0, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, rhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Argument_Swapping]^addLeftExpr ( isArrayOrFunctionArgument, n ? 1 : 0, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Argument_Swapping]^addLeftExpr ( n, lhsContext ? 1 : 0, isArrayOrFunctionArgument ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Literal]^addLeftExpr ( n, isArrayOrFunctionArgument ? 2 : 0, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Literal]^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 1, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Operator]^for  ( Node n = firstInList; n == null; n = n.getNext (  )  )  {^712^^^^^710^721^for  ( Node n = firstInList; n != null; n = n.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addExpr ( n, stripBlock ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Argument_Swapping]^addLeftExpr ( lhsContext, isArrayOrFunctionArgument ? 1 : 0, n ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^boolean isFirst = firstInList == firstInList;^713^^^^^710^721^boolean isFirst = n == firstInList;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^boolean isFirst = n == n;^713^^^^^710^721^boolean isFirst = n == firstInList;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Argument_Swapping]^boolean isFirst = firstInList == n;^713^^^^^710^721^boolean isFirst = n == firstInList;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Operator]^boolean isFirst = n >= firstInList;^713^^^^^710^721^boolean isFirst = n == firstInList;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Literal]^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : -1, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addExpr ( n, isFirst ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Literal]^addExpr ( n, isArrayOrFunctionArgument ? 2 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Wrong_Literal]^addExpr ( n, isArrayOrFunctionArgument ? 1 : 1 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^for  ( Node firstInList = firstInList; n != null; n = n.getNext (  )  )  {^712^^^^^710^721^for  ( Node n = firstInList; n != null; n = n.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addLeftExpr ( n, validation ? 1 : 0, lhsContext ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, START_OF_EXPR ) ;^715^^^^^710^721^addLeftExpr ( n, isArrayOrFunctionArgument ? 1 : 0, lhsContext ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^addExpr ( n, validation ? 1 : 0 ) ;^718^^^^^710^721^addExpr ( n, isArrayOrFunctionArgument ? 1 : 0 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  firstInList  n  
[BugLab_Variable_Misuse]^while  ( skipIndexes != null && nextSlot < skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^while  ( skipIndexes != null && nextSkipSlot < nextSkipSlot )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^while  ( skipIndexes != null && skipIndexes.length < nextSkipSlot )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^while  ( skipIndexes != null || nextSkipSlot < skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^while  ( skipIndexes == null && nextSkipSlot < skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^while  ( skipIndexes != null && nextSkipSlot > skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( nextSkipSlot == skipIndexes[nextSkipSlot] )  {^738^^^^^733^752^if  ( nextSlot == skipIndexes[nextSkipSlot] )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( nextSlot != skipIndexes[nextSkipSlot] )  {^738^^^^^733^752^if  ( nextSlot == skipIndexes[nextSkipSlot] )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( skipIndexes == nextSlot[nextSkipSlot] )  {^738^^^^^733^752^if  ( nextSlot == skipIndexes[nextSkipSlot] )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( firstInList != firstInList )  {^746^^^^^733^752^if  ( n != firstInList )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n != n )  {^746^^^^^733^752^if  ( n != firstInList )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( firstInList != n )  {^746^^^^^733^752^if  ( n != firstInList )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( n < firstInList )  {^746^^^^^733^752^if  ( n != firstInList )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node firstInList = firstInList; n != null; n = n.getNext (  )  )  {^736^^^^^733^752^for  ( Node n = firstInList; n != null; n = n.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^for  ( Node firstInList = n; n != null; n = n.getNext (  )  )  {^736^^^^^733^752^for  ( Node n = firstInList; n != null; n = n.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( Node n = firstInList; n == null; n = n.getNext (  )  )  {^736^^^^^733^752^for  ( Node n = firstInList; n != null; n = n.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^while  ( skipIndexes != null && nextSkipSlot < nextSlot )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^while  ( nextSkipSlot != null && skipIndexes < skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^while  ( skipIndexes != null && nextSkipSlot <= skipIndexes.length )  {^737^^^^^733^752^while  ( skipIndexes != null && nextSkipSlot < skipIndexes.length )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( nextSlot <= skipIndexes[nextSkipSlot] )  {^738^^^^^733^752^if  ( nextSlot == skipIndexes[nextSkipSlot] )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( n == firstInList )  {^746^^^^^733^752^if  ( n != firstInList )  {^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^addExpr ( firstInList, 1 ) ;^749^^^^^733^752^addExpr ( n, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^addExpr ( n, 0 ) ;^749^^^^^733^752^addExpr ( n, 1 ) ;^[CLASS] CodeGenerator Context  [METHOD] addList [RETURN_TYPE] void   Node firstInList int[] skipIndexes [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  firstInList  n  CodeConsumer  cc  consumer  int[]  skipIndexes  CharsetEncoder  outputCharsetEncoder  int  nextSkipSlot  nextSlot  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node n = n; c != null; c = c.getNext (  )  )  {^761^^^^^760^764^for  ( Node c = n; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addAllSiblings [RETURN_TYPE] void   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Argument_Swapping]^for  ( Node n = c; c != null; c = c.getNext (  )  )  {^761^^^^^760^764^for  ( Node c = n; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addAllSiblings [RETURN_TYPE] void   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Wrong_Operator]^for  ( Node c = n; c == null; c = c.getNext (  )  )  {^761^^^^^760^764^for  ( Node c = n; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] addAllSiblings [RETURN_TYPE] void   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Variable_Misuse]^add ( n ) ;^762^^^^^760^764^add ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] addAllSiblings [RETURN_TYPE] void   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Wrong_Literal]^int singleq = singleq, doubleq = singleq;^768^^^^^767^794^int singleq = 0, doubleq = 0;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( singleqnt i = 0; i < s.length (  ) ; i++ )  {^771^^^^^767^794^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < singlequote.length (  ) ; i++ )  {^771^^^^^767^794^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^for  ( snt i = 0; i < i.length (  ) ; i++ )  {^771^^^^^767^794^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= s.length (  ) ; i++ )  {^771^^^^^767^794^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^switch  ( singlequote.charAt ( i )  )  {^772^^^^^767^794^switch  ( s.charAt ( i )  )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^switch  ( s.charAt ( singleq )  )  {^772^^^^^767^794^switch  ( s.charAt ( i )  )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^switch  ( i.charAt ( s )  )  {^772^^^^^767^794^switch  ( s.charAt ( i )  )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int i = singleq; i < s.length (  ) ; i++ )  {^771^^^^^767^794^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( i < doubleq )  {^780^^^^^767^794^if  ( singleq < doubleq )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( singleq < i )  {^780^^^^^767^794^if  ( singleq < doubleq )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( doubleq < singleq )  {^780^^^^^767^794^if  ( singleq < doubleq )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( singleq == doubleq )  {^780^^^^^767^794^if  ( singleq < doubleq )  {^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return strEscape ( s, quote, s, singlequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return strEscape ( s, quote, doublequote, doublequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return doublequotetrEscape ( s, quote, s, singlequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return strEscape ( s, outputCharsetEncoder, doublequote, singlequote, "\\\\", quote ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return strEscape ( s, quote, singlequote, doublequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return singlequotetrEscape ( s, quote, doublequote, s, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return outputCharsetEncodertrEscape ( s, quote, doublequote, singlequote, "\\\\", s ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return doublequotetrEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return strEscape ( s, quote, singlequote, singlequote, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return strEscape ( s, quote, doublequote, s, "\\\\", outputCharsetEncoder ) ;^792^793^^^^767^794^return strEscape ( s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] jsString [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return outputCharsetEncodertrEscape ( s, '/', "\"", "'", "\\", s ) ;^798^^^^^797^799^return strEscape ( s, '/', "\"", "'", "\\", outputCharsetEncoder ) ;^[CLASS] CodeGenerator Context  [METHOD] regexpEscape [RETURN_TYPE] String   String s CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  String  s  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( c ) ;^815^^^^^800^830^sb.append ( quote ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( i >= 2 && (  ( singlequoteEscape.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 || (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i > 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  && ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  <= '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i  <  1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  <  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  != '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  ==  2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  ==  2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i  |  1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  |  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  >= '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( i >= 2 && (  ( s.charAt ( i - i )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - i )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( i >= 2 && (  ( s.charAt ( i  )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( i >= i && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - i )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - i )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^831^^^^^826^832^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( singlequoteEscape.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( s.regionMatches ( true, i + 1, singlequoteEscape, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( END_SCRIPT.regionMatches ( true, i + 1, s, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  <=  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( false, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( true, i + i, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, i, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^840^^^^^836^841^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( outputCharsetEncoder == null )  {^846^^^^^831^861^if  ( outputCharsetEncoder != null )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( quote > 0x1f && c <= 0x7f )  {^857^^^^^846^865^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1f || c <= 0x7f )  {^857^^^^^846^865^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c >= 0x1f && c <= 0x7f )  {^857^^^^^846^865^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1f && c < 0x7f )  {^857^^^^^846^865^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( sb, quote ) ;^863^^^^^846^865^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^863^^^^^846^865^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^858^^^^^846^865^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( outputCharsetEncoder.canEncode ( quote )  )  {^847^^^^^832^862^if  ( outputCharsetEncoder.canEncode ( c )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( c.canEncode ( outputCharsetEncoder )  )  {^847^^^^^832^862^if  ( outputCharsetEncoder.canEncode ( c )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( sb, quote ) ;^851^^^^^847^852^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^851^^^^^847^852^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^848^^^^^833^863^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( sb, quote ) ;^851^^^^^836^866^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^851^^^^^836^866^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( quote > 0x1f && c <= 0x7f )  {^857^^^^^842^872^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1f || c <= 0x7f )  {^857^^^^^842^872^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c >= 0x1f && c <= 0x7f )  {^857^^^^^842^872^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1f && c < 0x7f )  {^857^^^^^842^872^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( sb, quote ) ;^863^^^^^857^864^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^863^^^^^857^864^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^858^^^^^843^873^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < singlequoteEscape.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > s.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = 0; i < s.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int i = i; i < s.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i == 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i   instanceof   1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i   instanceof   1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  >  2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  >  2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i  >=  1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  >=  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  ^  2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  ^  2 )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( i >=  && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i -  )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i -  )  == ']' )  )  )  {^826^827^828^^^811^841^if  ( i >= 2 && (  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( doublequoteEscape.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^if  ( s.regionMatches ( true, END_SCRIPT + 1, i, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  &  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( true, i , END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, -1, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c < 0x1f && c <= 0x7f )  {^857^^^^^846^865^if  ( c > 0x1f && c <= 0x7f )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^char c = doublequoteEscape.charAt ( i ) ;^817^^^^^802^832^char c = s.charAt ( i ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^char c = i.charAt ( s ) ;^817^^^^^802^832^char c = s.charAt ( i ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^case '\\': backslashEscape.append ( sb ) ; break;^822^^^^^807^837^case '\\': sb.append ( backslashEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^case '\"': sb.append ( s ) ; break;^823^^^^^808^838^case '\"': sb.append ( doublequoteEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^case '\"': doublequoteEscape.append ( sb ) ; break;^823^^^^^808^838^case '\"': sb.append ( doublequoteEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^case '\'': sb.append ( s ) ; break;^824^^^^^809^839^case '\'': sb.append ( singlequoteEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^case '\'': singlequoteEscape.append ( sb ) ; break;^824^^^^^809^839^case '\'': sb.append ( singlequoteEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^(  ( doublequoteEscape.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^(  ( i.charAt ( s - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^(  ( s.charAt ( i  <  1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  <  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^(  ( s.charAt ( i  )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^(  ( singlequoteEscape.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  ^  2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  ^  2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - i )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - i )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^( doublequoteEscape.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^( i.charAt ( s - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^( s.charAt ( i  ^  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^( s.charAt ( i  )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^( singlequoteEscape.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^( s.charAt ( i - 1 )  == ']' && s.charAt ( i   instanceof   2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^( s.charAt ( i - 1 )  == ']' && s.charAt ( i  )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^831^^^^^816^846^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  >>  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, , END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( quote ) ;^840^^^^^825^855^sb.append ( c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( sb, quote ) ;^863^^^^^848^878^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^863^^^^^848^878^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < s.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^char c = singlequoteEscape.charAt ( i ) ;^817^^^^^802^832^char c = s.charAt ( i ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < doublequoteEscape.length (  ) ; i++ )  {^816^^^^^801^831^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^case '\\': sb.append ( singlequoteEscape ) ; break;^822^^^^^807^837^case '\\': sb.append ( backslashEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^case '\"': sb.append ( singlequoteEscape ) ; break;^823^^^^^808^838^case '\"': sb.append ( doublequoteEscape ) ; break;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^(  ( s.charAt ( i  >  1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i  >  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^(  ( s.charAt ( i - i )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - i )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i  >>  2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i  >>  2 )  == ']' )  )  )  {^827^828^^^^812^842^(  ( s.charAt ( i - 1 )  == '-' && s.charAt ( i - 2 )  == '-' )  || ( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^( s.charAt ( i  ||  1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^( s.charAt ( i - 1 )  == ']' && s.charAt ( i  >>  2 )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - i )  == ']' )  )  )  {^828^^^^^813^843^( s.charAt ( i - 1 )  == ']' && s.charAt ( i - 2 )  == ']' )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ==  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^836^837^^^^821^851^if  ( s.regionMatches ( true, i + 1, END_SCRIPT, 0, END_SCRIPT.length (  )  )  )  {^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^sb.append ( c ) ;^868^^^^^853^883^sb.append ( quote ) ;^[CLASS] CodeGenerator Context  [METHOD] strEscape [RETURN_TYPE] String   String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1F || c < 0x7F )  {^885^^^^^872^892^if  ( c > 0x1F && c < 0x7F )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c < 0x1F && c < 0x7F )  {^885^^^^^872^892^if  ( c > 0x1F && c < 0x7F )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1F && c > 0x7F )  {^885^^^^^872^892^if  ( c > 0x1F && c < 0x7F )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( c, sb ) ;^888^^^^^872^892^appendHexJavaScriptRepresentation ( sb, c ) ;^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == s.length (  ) ; i++ )  {^880^^^^^872^892^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= s.length (  ) ; i++ )  {^880^^^^^872^892^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < s.length (  ) ; i++ )  {^880^^^^^872^892^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c == 0x1F && c < 0x7F )  {^885^^^^^872^892^if  ( c > 0x1F && c < 0x7F )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c > 0x1F && c == 0x7F )  {^885^^^^^872^892^if  ( c > 0x1F && c < 0x7F )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^char c = i.charAt ( s ) ;^881^^^^^872^892^char c = s.charAt ( i ) ;^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int i = ; i < s.length (  ) ; i++ )  {^880^^^^^872^892^for  ( int i = 0; i < s.length (  ) ; i++ )  {^[CLASS] CodeGenerator Context  [METHOD] identifierEscape [RETURN_TYPE] String   String s [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  String  s  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^int i = 1;^896^^^^^895^903^int i = 0;^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.EMPTY )  {^898^^^^^895^903^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  >= Token.EMPTY )  {^898^^^^^895^903^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^897^^^^^895^903^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^897^^^^^895^903^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  == Token.EMPTY )  {^898^^^^^895^903^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( Node c = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^897^^^^^895^903^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getNonEmptyChildCount [RETURN_TYPE] int   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Node  c  n  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.EMPTY )  {^908^^^^^906^913^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  == Token.EMPTY )  {^908^^^^^906^913^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Variable_Misuse]^return n;^909^^^^^906^913^return c;^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^907^^^^^906^913^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^907^^^^^906^913^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^907^^^^^906^913^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  <= Token.EMPTY )  {^908^^^^^906^913^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Variable_Misuse]^for  ( Node c = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^907^^^^^906^913^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CodeGenerator Context  [METHOD] getFirstNonEmptyChild [RETURN_TYPE] Node   Node n [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  Node  c  n  
[BugLab_Variable_Misuse]^return context == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^931^932^^^^930^933^return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^[CLASS] CodeGenerator Context  [METHOD] getContextForNonEmptyExpression [RETURN_TYPE] CodeGenerator$Context   Context currentContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return currentContext == Context.lhsContext ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^931^932^^^^930^933^return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^[CLASS] CodeGenerator Context  [METHOD] getContextForNonEmptyExpression [RETURN_TYPE] CodeGenerator$Context   Context currentContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return currentContext != Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^931^932^^^^930^933^return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;^[CLASS] CodeGenerator Context  [METHOD] getContextForNonEmptyExpression [RETURN_TYPE] CodeGenerator$Context   Context currentContext [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return  ( context == Context.currentContext ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER ) ;^940^941^^^^939^942^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] getContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.rhsContext ) ;^940^941^^^^939^942^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] getContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return  ( context != Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER ) ;^940^941^^^^939^942^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER ) ;^[CLASS] CodeGenerator Context  [METHOD] getContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return  ( currentContext == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^951^952^^^^950^953^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^[CLASS] CodeGenerator Context  [METHOD] clearContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return  ( context == Context.rhsContext ? Context.OTHER : context ) ;^951^952^^^^950^953^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^[CLASS] CodeGenerator Context  [METHOD] clearContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.lhsContext : context ) ;^951^952^^^^950^953^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^[CLASS] CodeGenerator Context  [METHOD] clearContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return  ( context >= Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^951^952^^^^950^953^return  ( context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context ) ;^[CLASS] CodeGenerator Context  [METHOD] clearContextForNoInOperator [RETURN_TYPE] CodeGenerator$Context   Context context [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  CodeConsumer  cc  consumer  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( sb, c ) ;^961^^^^^958^966^appendHexJavaScriptRepresentation ( c, sb ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   StringBuilder sb char c [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( HEX_CHARS[0], out ) ;^984^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( out[0], surrogates ) ;^984^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[codePoint], out ) ;^984^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( HEX_CHARS[1], out ) ;^985^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( out[1], surrogates ) ;^985^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[], out ) ;^984^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[], out ) ;^985^^^^^975^993^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Variable_Misuse]^out.append ( "\\u" ) .append ( surrogates[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Argument_Swapping]^out.append ( "\\u" ) .append ( codePoint[ ( HEX_CHARS >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <<  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  <  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  ==  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )    instanceof   0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  |  4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   >  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 9 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 5 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   ||  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  ||  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   >>  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >>  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >=  4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  >  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>>  )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> codePoint )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^988^989^990^991^^975^993^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] CodeGenerator Context  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  allowNonBlockChild  ambiguousElseClause  funcNeedsParens  hasElse  isArrayOrFunctionArgument  isFirst  needsParens  stripBlock  validation  Appendable  out  CodeConsumer  cc  consumer  CharsetEncoder  outputCharsetEncoder  int  codePoint  char[]  HEX_CHARS  surrogates  
