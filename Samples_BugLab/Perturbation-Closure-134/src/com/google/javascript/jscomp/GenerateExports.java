[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( exportPropertyFunction ) ;^50^^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( exportSymbolFunction ) ;^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[BugLab_Variable_Misuse]^this.exportSymbolFunction = exportPropertyFunction;^54^^^^^47^56^this.exportSymbolFunction = exportSymbolFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[BugLab_Variable_Misuse]^this.exportPropertyFunction = exportSymbolFunction;^55^^^^^47^56^this.exportPropertyFunction = exportPropertyFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, findExportableNodes, root ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( findExportableNodes, root, compiler ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  < Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( externs.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( property )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^if  ( PROTOTYPE_PROPERTY.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( node )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP || getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( node.getFirstChild (  ) .getType (  )  != Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^grandparent = externs.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^grandparent = root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^parent = root.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^grandparent = root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^parent = externs.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( root.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^getPropertyName ( root.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^getPropertyName ( node.getFirstChild (  )  ) .equals ( parent )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^getPropertyName ( PROTOTYPE_PROPERTY.getFirstChild (  )  ) .equals ( node )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^getPropertyName ( externs.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^grandparent = externs.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( grandparent )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( node.getFirstChild (  ) .getType (  )  >= Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( exportSymbolFunction != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( grandproperty != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( grandparent != null || exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^if  ( grandparent == null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^} else if  ( exportSymbolFunction != null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^} else if  ( exports != null && parent.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^} else if  ( parent != null || exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Operator]^} else if  ( parent == null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Literal]^useExportSymbol = true;^90^^^^^75^105^useExportSymbol = false;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Literal]^useExportSymbol = true;^88^^^^^73^103^useExportSymbol = false;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^String property = getPropertyName ( root ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , property ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( context, parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^Node.newString ( grandparent ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^111^112^113^114^^94^115^Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , property ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( export, exportPropertyFunction.getNode (  ) , context ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( parentSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( propertySymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( context, exportSymbolFunction.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunctionSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( context, exportSymbolFunction.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( Node.newString ( parent )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( Node.newString ( property )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( context, export.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^Node expression = new Node ( Token.EXPR_RESULT, root ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Wrong_Literal]^boolean useExportSymbol = false;^86^^^^^71^101^boolean useExportSymbol = true;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^String property = getPropertyName ( root ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^if  ( property != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^if  ( exports != null && grandparent.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^} else if  ( grandparent != null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( propertySymbolFunction, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( Node.newString ( grandparent )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^String property = getPropertyName ( externs ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( context, parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( parent, exportPropertyFunction.getNode (  ) , context ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Variable_Misuse]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , property ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeUtil.newQualifiedNameNode ( export, exportPropertyFunction.getNode (  ) , context ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^context.getScriptNode (  ) .addChildAfter ( context, expression.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( node, compiler, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.GETPROP ) ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
