[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeTraversal.traverse ( findExportableNodes, root, compiler ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeTraversal.traverse (  root, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^if  ( PROTOTYPE_PROPERTY.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( node )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^getPropertyName ( PROTOTYPE_PROPERTY.getFirstChild (  )  ) .equals ( node )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^if  ( exports != null && grandparent.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^} else if  ( exports != null && parent.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token. new Node[] {^105^106^^^^94^115^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( parent, exportPropertyFunction.getNode (  ) , context ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  )  ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export, exportPropertyFunction.getNode (  ) , context ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  )  ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( context, exportSymbolFunction.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunctionSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  )  )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token. NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  )  )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call.addChildToBack ( NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( context, export.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token. new Node[] {^105^106^^^^90^120^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^Node expression = new Node ( Token.EXPR_RESULT ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^Node expression = new Node ( Token. call ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( context, parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  )  ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( context, export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export, exportPropertyFunction.getNode (  ) , context ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  )  ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^context.getScriptNode (  ) .addChildAfter ( context, expression.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^context.getScriptNode (  ) .addChildAfter ( expression.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^context.getScriptNode (  ) .addChildAfter (  context.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[buglab_swap_variables]^NodeTraversal.traverse ( node, compiler, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[buglab_swap_variables]^NodeTraversal.traverse (  node, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
