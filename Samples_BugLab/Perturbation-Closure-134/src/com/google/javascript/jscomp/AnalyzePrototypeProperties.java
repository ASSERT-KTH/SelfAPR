[buglab_swap_variables]^if  ( moduleGraphGraph == null )  {^134^^^^^115^142^if  ( moduleGraph == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode,  nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, nameInfo, module ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, module ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( nameInfo, module, externNode ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect (  module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, null ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( nameInfo, null, externNode ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect (  null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo nameInfo = getNameInfoForName ( PROPERTY, property ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo nameInfo = getNameInfoForName (  PROPERTY ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo nameInfo = getNameInfoForName ( property ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( module, externNode, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode,  nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( nameInfo, module, externNode ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, module ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect (  module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NodeTraversal.traverse ( externRoot, compiler, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^NodeTraversal.traverse (  externRoot, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^t.computeFixedPoint ( globalNode, Sets.newHashSet ( externNode, symbolGraph )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^t.computeFixedPoint (  Sets.newHashSet ( externNode, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet (  globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( globalNode, externNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^Sets.newHashSet ( globalNode, externNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^Sets.newHashSet (  globalNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^Sets.newHashSet ( externNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[buglab_swap_variables]^Map<String, NameInfo> map = PROPERTY == type ? propertyNameInfo : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^Map<String, NameInfo> map = propertyNameInfo == PROPERTY ? type : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^Map<String, NameInfo> map = type == PROPERTY ? varNameInfo : propertyNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( name.containsKey ( map )  )  {^177^^^^^174^185^if  ( map.containsKey ( name )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^map.put ( nameInfo, name ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^map.put (  nameInfo ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^map.put ( name ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^return name.get ( map ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration (  n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t, parent, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t,  parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( parent, n, t )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^String parentame = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( VAR, name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName (  VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  )  )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( PROPERTY.getFirstChild (  ) .getLastChild (  ) .getString (  ) , n )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( n != varull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^Var var = name.getScope (  ) .getVar ( t ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^for  ( Node n = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( propName.getCodingConvention (  ) .isExported ( compiler )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName, PROPERTY.getModule (  ) , t ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( PROPERTY, t.getModule (  ) , propName ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName, t.getModule (  )  ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^processPrototypeParent ( parent, t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^processPrototypeParent (  parent ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^processPrototypeParent ( t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( parent )  || isGlobalFunctionDeclaration ( t, n, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t,  parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( parent, n, t )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration (  n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( n, t, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, parent, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) , info, module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) ,  info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) , module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( info.peek (  ) , module, symbolStack ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo info = getNameInfoForName ( type, name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo info = getNameInfoForName (  type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^NameInfo info = getNameInfoForName ( name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( module.peek (  ) , symbolStack, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( module, name, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, type, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name,  type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( type, module, name ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( parent )  || n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( n != null && NodeUtil.isLhs (  assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( n != null && NodeUtil.isLhs ( n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( assign != null && NodeUtil.isLhs ( n, n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( gramps, parent, t )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( compiler.getCodingConvention (  ) .isExported ( anchorUnusedVars )  || name )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( t, parent, gramps, nameNode.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( VAR, name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName (  VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( t, parent, gramps, nameNode.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( t, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, name.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, nameNode ) .getDeclarations (  ) .add ( new GlobalFunction ( VAR, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^new GlobalFunction ( nameNode, parent, t, gramps.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( parent, t, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, gramps, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( firstChild, t, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, nameNode, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( nameNode, firstChild, t )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( gramps, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, name, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, t, gramps, parent.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( dest, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( parent )  && NodeUtil.isLhs ( n, grandParent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs (  parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( parent, n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^for  ( Node map = key.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^NodeUtil.isLhs ( parent, n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^NodeUtil.isLhs (  parent )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^NodeUtil.isLhs ( n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, type, getNameInfoForName ( name, module )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( globalNode,  getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( name, module, getNameInfoForName ( globalNode, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName (  type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( type, name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( module, globalNode, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect (  module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( n, firstModule, getNameInfoForName ( externNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect (  firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, n, getNameInfoForName ( firstModule.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode,  getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( PROPERTY, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , externNode )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY.getLastChild (  ) .getString (  ) , n )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^symbolGraph.connect ( externNode, PROPERTY, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , firstModule )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn (  edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn ( startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^return edge.markReference ( dest ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^return startModule.markReference ( dest ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.dependsOn (  edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.dependsOn ( edge, startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.dependsOn ( startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( module != null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( parent, n, t )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration (  n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t,  parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^String parentame = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( VAR, name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName (  VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( n, t, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^} else if  ( isGlobalFunctionDeclaration ( t, parent, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( PROPERTY.getFirstChild (  ) .getLastChild (  ) .getString (  ) , n )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  )  )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^Var var = name.getScope (  ) .getVar ( t ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^for  ( Node n = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^} else if  ( propName.getCodingConvention (  ) .isExported ( compiler )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( PROPERTY, t.getModule (  ) , propName ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName, PROPERTY.getModule (  ) , t ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( propName, t.getModule (  )  ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^processPrototypeParent ( parent, t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^processPrototypeParent (  parent ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^processPrototypeParent ( t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( n != varull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( t )  || isGlobalFunctionDeclaration ( n, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t,  parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( parent, n, t )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration (  n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( parent, n, t )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, parent, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) ,  info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( info.peek (  ) , module, symbolStack ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) , module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^NameInfo info = getNameInfoForName ( type, name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^NameInfo info = getNameInfoForName (  type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^NameInfo info = getNameInfoForName ( name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( symbolStack.peek (  ) , info, module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol ( type, module, name ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol (  module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol ( module, name, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name,  type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, type, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( module.peek (  ) , symbolStack, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^return parent.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && t.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^return n.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( t )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[buglab_swap_variables]^if  ( n != null && NodeUtil.isLhs (  assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[buglab_swap_variables]^if  ( assign != null && NodeUtil.isLhs ( n, n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[buglab_swap_variables]^if  ( n != null && NodeUtil.isLhs ( n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( t, gramps, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( nameNode, t, gramps, parent.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( gramps, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, name, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName (  VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( t, parent, gramps, nameNode.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( VAR, name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( compiler.getCodingConvention (  ) .isExported ( anchorUnusedVars )  || name )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( gramps, parent, t )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, gramps, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( firstChild, t, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration (  firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, nameNode, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t,  nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^isGlobalFunctionDeclaration ( t, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( nameNode, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( name, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^getNameInfoForName ( name, t ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, VAR.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[buglab_swap_variables]^if  ( parent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, dest )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^if  ( grandParent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( dest )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( n )  && NodeUtil.isLhs ( grandParent, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs (  parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( parent, n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^NodeUtil.isLhs ( parent, n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^NodeUtil.isLhs (  parent )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^NodeUtil.isLhs ( n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, type, getNameInfoForName ( name, module )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( globalNode,  getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, name, getNameInfoForName ( module, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName (  type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( module, globalNode, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect (  module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( type, name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[buglab_swap_variables]^symbolGraph.connect ( n, firstModule, getNameInfoForName ( externNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^symbolGraph.connect (  firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^symbolGraph.connect ( externNode,  getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^symbolGraph.connect ( PROPERTY, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , externNode )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^getNameInfoForName ( PROPERTY.getLastChild (  ) .getString (  ) , n )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^symbolGraph.connect ( firstModule, externNode, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn (  edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn ( startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^return edge.markReference ( dest ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^return startModule.markReference ( dest ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^moduleGraph.dependsOn ( edge, startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^moduleGraph.dependsOn (  edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^moduleGraph.dependsOn ( startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
