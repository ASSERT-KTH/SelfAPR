[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( SUSPICIOUS_SEMICOLON, n, level, t )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make (  n, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, SUSPICIOUS_SEMICOLON, level, n )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t,  level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n,  SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, SUSPICIOUS_SEMICOLON, level )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, level )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( level, n, t, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make (  n, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t, level, n, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t,  level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t, n,  SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t, n, SUSPICIOUS_SEMICOLON, level )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t, n, level )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( n, t, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( t, SUSPICIOUS_SEMICOLON, level, n )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( level, n, t, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^for  ( ; n != childull; child = child.getNext (  )  )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^JSError.make ( SUSPICIOUS_SEMICOLON, n, level, t )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( n, t, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
