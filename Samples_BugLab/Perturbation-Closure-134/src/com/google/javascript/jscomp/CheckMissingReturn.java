[BugLab_Wrong_Operator]^return input != null || input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[BugLab_Wrong_Operator]^return input == null && input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[BugLab_Wrong_Operator]^return input != null && input.getType (  )  != Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  input  
[BugLab_Variable_Misuse]^Branch branch = 2.getValue (  ) ;^60^^^^^58^76^Branch branch = input.getValue (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( branch != Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( branch < Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( condition != null || NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  != ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE <= branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE != branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return true;^62^^^^^58^76^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  < ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  > ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE >= branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE > branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return false;^75^^^^^58^76^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( level, t.getScopeRoot (  ) , t, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^JSError.make ( MISSING_RETURN_STATEMENT, t.getScopeRoot (  ) , level, t )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( MISSING_RETURN_STATEMENT, t.getScopeRoot (  ) , level, t )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( s.getSource (  ) .getValue (  ) .getType (  )  == Token.RETURN )  {^119^^^^^117^124^if  ( s.getSource (  ) .getValue (  ) .getType (  )  != Token.RETURN )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return true;^120^^^^^117^124^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return false;^123^^^^^117^124^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] fastAllPathsReturnCheck [RETURN_TYPE] boolean   Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  s  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  ControlFlowGraph  cfg  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return false;^133^^^^^131^134^return true;^[CLASS] CheckMissingReturn 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  nodeTraversal  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  n  parent  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Variable_Misuse]^if  ( ! ( returnType instanceof FunctionType )  )  {^147^^^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( ! ( scopeType  |  FunctionType )  )  {^147^^^^^144^162^if  ( ! ( scopeType instanceof FunctionType )  )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return true;^148^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return true;^152^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^if  ( returnType != null )  {^157^^^^^144^162^if  ( returnType == null )  {^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Literal]^return true;^158^^^^^144^162^return false;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Variable_Misuse]^return !isVoidOrUnknown ( scopeType ) ;^161^^^^^144^162^return !isVoidOrUnknown ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] explicitReturnExpected [RETURN_TYPE] boolean   Node scope [VARIABLES] AbstractCompiler  compiler  JSType  returnType  scopeType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Node  scope  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return function.getChildCount (  )  == 3 || !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[BugLab_Wrong_Operator]^return function.getChildCount (  )  != 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[BugLab_Wrong_Literal]^return function.getChildCount (  )  == 4 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^170^171^^^^169^172^return function.getChildCount (  )  == 3 && !function.getFirstChild (  ) .getNext (  ) .getNext (  ) .hasChildren (  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isEmptyFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  Node  function  
[BugLab_Argument_Swapping]^return returnType.isSubtype ( voidType ) ;^181^^^^^178^182^return voidType.isSubtype ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[BugLab_Wrong_Operator]^return input != null || input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[BugLab_Wrong_Operator]^return input == null && input.getType (  )  == Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[BugLab_Wrong_Operator]^return input != null && input.getType (  )  != Token.RETURN;^50^^^^^47^51^return input != null && input.getType (  )  == Token.RETURN;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[BugLab_Wrong_Operator]^if  ( branch != Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^if  ( branch <= Branch.ON_EX )  {^61^^^^^58^76^if  ( branch == Branch.ON_EX )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^if  ( condition != null || NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^if  ( condition == null && NodeUtil.isLiteralValue ( condition )   )  {^70^^^^^58^76^if  ( condition != null && NodeUtil.isLiteralValue ( condition )   )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Argument_Swapping]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  != ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE >= branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  < ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE != branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE < branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  >= ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Literal]^return true;^62^^^^^58^76^return false;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Operator]^return NodeUtil.getBooleanValue ( condition )  <= ( Branch.ON_TRUE == branch ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Variable_Misuse]^Node condition = NodeUtil.getConditionExpression ( 0.getSource (  ) .getValue (  )  ) ;^64^65^^^^58^76^Node condition = NodeUtil.getConditionExpression ( input.getSource (  ) .getValue (  )  ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
[BugLab_Wrong_Literal]^return false;^75^^^^^58^76^return true;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
