[buglab_swap_variables]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] AbstractCompiler  compiler  DiGraphEdge  input  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Branch  branch  Node  condition  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) .getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^99^100^101^102^^89^109^new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) , t.getControlFlowGraph (  ) .getImplicitReturn (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) .getControlFlowGraph (  ) .getEntry (  ) ,^98^99^100^101^^89^109^CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> test = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  ) , t.getControlFlowGraph (  ) .getEntry (  ) ,^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^compiler.report ( JSError.make (  t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) ,  MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make ( level, t.getScopeRoot (  ) , t, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make (  t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make ( t, t.getScopeRoot (  ) ,  MISSING_RETURN_STATEMENT )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make ( t, t.getScopeRoot (  ) , MISSING_RETURN_STATEMENT, level )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make ( t, t.getScopeRoot (  ) , level )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^compiler.report ( JSError.make ( level, t.getScopeRoot (  ) , t, MISSING_RETURN_STATEMENT )  ) ;^106^107^^^^89^109^compiler.report ( JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^JSError.make ( MISSING_RETURN_STATEMENT, t.getScopeRoot (  ) , level, t )  ) ;^107^^^^^89^109^JSError.make ( t, t.getScopeRoot (  ) , level, MISSING_RETURN_STATEMENT )  ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  CheckPathsBetweenNodes  test  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^return returnType.isSubtype ( voidType ) ;^181^^^^^178^182^return voidType.isSubtype ( returnType ) ;^[CLASS] CheckMissingReturn 1 2  [METHOD] isVoidOrUnknown [RETURN_TYPE] boolean   JSType returnType [VARIABLES] AbstractCompiler  compiler  JSType  returnType  voidType  boolean  DiagnosticType  MISSING_RETURN_STATEMENT  CheckLevel  level  Predicate  GOES_THROUGH_TRUE_CONDITION_PREDICATE  IS_RETURN  
[buglab_swap_variables]^return NodeUtil.getBooleanValue ( branch )  == ( Branch.ON_TRUE == condition ) ;^71^72^^^^58^76^return NodeUtil.getBooleanValue ( condition )  == ( Branch.ON_TRUE == branch ) ;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Branch> input [VARIABLES] DiGraphEdge  input  boolean  Branch  branch  Node  condition  
