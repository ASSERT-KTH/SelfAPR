[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^String callName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^NameGenerator nameGenerator = nameGenerators.get ( nextName ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^NameGenerator nameGenerator = callName.get ( nameGenerators ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Wrong_Operator]^if  ( nameGenerator != null )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NON_GLOBAL_ID_GENERATOR_CALL, n, t )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, NON_GLOBAL_ID_GENERATOR_CALL, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( parent )  )  {^83^^^^^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( CONDITIONAL_ID_GENERATOR_CALL, n, t )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, CONDITIONAL_ID_GENERATOR_CALL, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, Node.newString ( callName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Argument_Swapping]^parent.replaceChild ( nextName, Node.newString ( n )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^String callName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^NameGenerator nameGenerator = nameGenerators.get ( nextName ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^NameGenerator nameGenerator = callName.get ( nameGenerators ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Wrong_Operator]^if  ( nameGenerator != null )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, NON_GLOBAL_ID_GENERATOR_CALL, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NON_GLOBAL_ID_GENERATOR_CALL, n, t )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, null )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( parent )  )  {^83^^^^^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( CONDITIONAL_ID_GENERATOR_CALL, n, t )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, CONDITIONAL_ID_GENERATOR_CALL, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, Node.newString ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, Node.newString ( callName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
