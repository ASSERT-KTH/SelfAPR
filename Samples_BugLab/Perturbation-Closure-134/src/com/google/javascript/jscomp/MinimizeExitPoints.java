[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isLiteralValue ( parent )  && !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isLiteralValue ( cond )  || !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^tryMinimizeExits ( parent.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^n.getFirstChild (  ) , Token.BREAK, parentull ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^Node cond = NodeUtil.getConditionExpression ( parent ) ;^67^^^^^52^82^Node cond = NodeUtil.getConditionExpression ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^51^^^^^36^66^switch  ( n.getType (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^tryMinimizeExits ( parent.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^n.getLastChild (  ) , Token.BREAK, parent.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^n.getLastChild (  ) , Token.RETURN, parentull ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[BugLab_Variable_Misuse]^if  ( matchingExitNode ( tryBlock, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^if  ( matchingExitNode ( labelName, exitType, n )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^if  ( matchingExitNode ( exitType, n, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^if  ( matchingExitNode ( n, labelName, exitType )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( ifBlock.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( matchingExitNode ( ifBlock, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( finallyBlock.getType (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  > Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( ifBlock != null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( elseBlock == null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( trueBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, elseBlock, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( elseBlock, labelName, exitType ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node ifBlock = tryBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node elseBlock = n.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node ifBlock = labelBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, ifBlock, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( ifBlock, labelName, exitType ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node elseBlock = finallyBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, elseBlock ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node elseBlock = labelBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node ifBlock = ifBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( trueBlock.getType (  )  == Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasCatchHandler ( ifTree )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchNode = labelBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchCodeBlock = n.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Preconditions.checkState ( tryBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ifTree.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchNode = tryBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, catchCodeBlock, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( catchCodeBlock, labelName, exitType ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, catchCodeBlock ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasFinally ( labelBlock )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = trueBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = finallyBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, finallyBlock, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( finallyBlock, labelName, exitType ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node tryBlock = trueBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node allCatchNodes = NodeUtil.getCatchBlock ( labelBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchCodeBlock = labelBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = tryBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node tryBlock = labelBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, tryBlock, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( tryBlock, labelName, exitType ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, tryBlock ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasCatchHandler ( ifBlock )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ifBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchCodeBlock = ifBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasFinally ( finallyBlock )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = ifBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, finallyBlock ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasCatchHandler ( labelBlock )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchNode = ifTree.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchCodeBlock = trueBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Preconditions.checkState ( trueBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Preconditions.checkState ( labelBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchNode = ifBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.hasFinally ( ifTree )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node finallyBlock = ifTree.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node tryBlock = ifTree.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node allCatchNodes = NodeUtil.getCatchBlock ( ifBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node catchCodeBlock = tryBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock.getType (  )  == Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node allCatchNodes = NodeUtil.getCatchBlock ( finallyBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( finallyBlock.getType (  )  == Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node labelBlock = tryBlock.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, labelBlock, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, labelBlock ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node labelBlock = finallyBlock.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node labelBlock = ifTree.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelBlock, labelName, exitType ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( ifTree.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.BLOCK && n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  != null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  >= Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( n != null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( falseBlock == null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( tryBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, labelBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, n, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( falseBlock, ifTree, trueBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( ifTree, trueBlock, falseBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( falseBlock, exitType, ifTree, trueBlock, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( falseBlock, labelName, ifTree, exitType, trueBlock ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = trueBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^falseBlock = ifBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = tryBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^falseBlock = tryBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node ifTree = labelBlock;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = labelBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( tryBlock, falseBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( trueBlock, ifTree, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, tryBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, ifTree, falseBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( exitType, falseBlock, ifTree, trueBlock, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, labelName, exitType ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = trueBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = ifBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, n, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( exitType, trueBlock, ifTree, falseBlock, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, labelName, exitType ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock != null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, tryBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock == n.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( c == tryBlock.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^if  ( n == c.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( c != n.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = n.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^Node ifTree = ifBlock;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c : tryBlock.children (  )  )  {^166^^^^^151^181^for  ( Node c : n.children (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^trueBlock = ifBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^falseBlock = finallyBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( ifTree, falseBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( trueBlock, ifBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, labelName, ifTree, exitType, falseBlock ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, labelName, exitType, ifTree ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, exitType, ifTree, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^falseBlock = ifTree.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( ifBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, tryBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( ifBlock == n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( c == tryBlock.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^if  ( n == c.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( c < n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c = ifBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node trueBlock = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( tryBlock == n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( c != n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( exitType, c, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( c, labelName, exitType ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( c == finallyBlock.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c = finallyBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c = ifTree.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c = labelBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^for  ( Node c = trueBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Argument_Swapping]^tryMinimizeExits ( labelName, exitType, c ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Variable_Misuse]^if  ( c == labelBlock.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( srcBlock.getType (  )  != Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^exitNodeParent = srcBlock;^234^^^^^226^236^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^exitNodeParent = newDestBlock;^230^^^^^215^245^exitNodeParent = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^exitNode = srcBlock.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^exitNodeParent = srcBlock;^234^^^^^219^249^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^exitNode = ifNode;^235^^^^^220^250^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^if  ( newDestBlock.getType (  )  == Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^if  ( !matchingExitNode ( newDestBlock, exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^if  ( !matchingExitNode ( labelName, exitType, exitNode )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^if  ( !matchingExitNode ( exitNode, labelName, exitType )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^if  ( srcBlock.getNext (  )  != null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^if  ( ifNode.getNext (  )  == null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^if  ( srcBlock == null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^if  ( destBlock != null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^} else if  ( srcBlock.getType (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  <= Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  != Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^} else if  ( srcBlock.getType (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  != Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^newDestBlock = srcBlock;^256^^^^^241^271^newDestBlock = destBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( destBlock, srcBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^} else if  ( newDestBlock.getType (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  >= Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^ifNode.addChildToBack ( srcBlock ) ;^250^^^^^235^265^ifNode.addChildToBack ( newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^moveAllFollowing ( srcBlock, ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^moveAllFollowing ( ifNode, ifNode.getParent (  ) , srcBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^moveAllFollowing ( newDestBlock, ifNode.getParent (  ) , ifNode ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^moveAllFollowing ( newDestBlock, ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  <= Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^} else if  ( destBlock.getType (  )  < Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^newDestBlock = newDestBlock;^256^^^^^241^271^newDestBlock = destBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^if  ( newDestBlock.getNext (  )  != null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( srcBlock, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( srcBlockParent, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( exitNode, exitNodeParent ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( exitNodeParentParent, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  < type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^if  ( type != Token.RETURN )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^if  ( type > Token.RETURN )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Argument_Swapping]^if  ( n == labelNameull )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^if  ( labelName != null )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Argument_Swapping]^return labelName.hasChildren (  ) && n.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Operator]^return n.hasChildren (  ) || labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Argument_Swapping]^&& n.equals ( labelName.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Wrong_Literal]^return true;^298^^^^^284^299^return false;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[BugLab_Variable_Misuse]^if  ( isFunctionDeclaratiostart )  {^316^^^^^308^322^if  ( isFunctionDeclaration )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^destParent.addChildToBack ( start ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( start ) ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^for  ( Node n = srcParent.getNext (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^for  ( Node start = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Wrong_Operator]^for  ( Node n = start.getNext (  ) ; n == null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( start ) ;^311^312^^^^308^322^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^NodeUtil.isFunctionDeclaration ( start ) ;^312^^^^^308^322^NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[BugLab_Variable_Misuse]^srcParent.removeChild ( start ) ;^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
