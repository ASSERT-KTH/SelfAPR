[buglab_swap_variables]^cfa.process ( null.getScopeRoot (  ) .getLastChild (  )  ) ;^95^^^^^85^114^cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef ( cfg, compiler.getScope (  ) , t ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef ( cfg.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef ( t, cfg.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef (  t.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  )  ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingDef = new MustBeReachingVariableDef ( compiler, t.getScope (  ) , cfg ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^new NodeTraversal ( t, new GatherCandiates (  )  ) .traverse ( compiler.getScopeRoot (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^new NodeTraversal (  new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse ( cfg, compiler.getScope (  ) , t ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse ( cfg.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse ( compiler, t.getScope (  ) , cfg ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse (  t.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  )  ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^reachingUses = new MaybeReachingVariableUse ( t, cfg.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^( new NodeTraversal ( root, this )  ) .traverse ( compiler ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^( new NodeTraversal (  this )  ) .traverse ( root ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, gatherCb, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^NodeTraversal.traverse (  cfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[buglab_swap_variables]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses (  defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses ( defCfgNode, varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses ( varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild ( rhs, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild ( use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild (  rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild ( use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^useParent.replaceChild (  rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^} else if  ( NodeUtil.isVar ( defParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse (  n, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^NodeTraversal.traverse (  n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[buglab_swap_variables]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^NodeTraversal.traverse ( cfgNode, compiler, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^NodeTraversal.traverse (  cfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[buglab_swap_variables]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate (  defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name,  n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode,  cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( name, defNode, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef (  cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[buglab_swap_variables]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses ( defCfgNode, varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses (  defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[buglab_swap_variables]^Collection<Node> uses = reachingUses.getUses ( varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[buglab_swap_variables]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[buglab_swap_variables]^useParent.replaceChild ( rhs, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^useParent.replaceChild ( use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^useParent.replaceChild (  rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^useParent.replaceChild ( use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^useParent.replaceChild (  rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^} else if  ( NodeUtil.isVar ( def )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse (  n, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^NodeTraversal.traverse (  n, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[buglab_swap_variables]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
