[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^this.defCfgNode = useCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^this.use = useCfgNode;^207^^^^^203^209^this.use = use;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^this.useCfgNode = use;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^92^^^^^85^114^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingDef = new MustBeReachingVariableDef ( cfg, compiler.getScope (  ) , t ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingDef = new MustBeReachingVariableDef ( compiler, t.getScope (  ) , cfg ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingDef = new MustBeReachingVariableDef ( t, cfg.getScope (  ) , compiler ) ;^97^^^^^85^114^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^new NodeTraversal ( t, new GatherCandiates (  )  ) .traverse ( compiler.getScopeRoot (  ) .getLastChild (  )  ) ;^103^104^^^^85^114^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingUses = new MaybeReachingVariableUse ( cfg, compiler.getScope (  ) , t ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingUses = new MaybeReachingVariableUse ( t, cfg.getScope (  ) , compiler ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^reachingUses = new MaybeReachingVariableUse ( compiler, t.getScope (  ) , cfg ) ;^107^^^^^85^114^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Candidate  c  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  def  defCfgNode  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^( new NodeTraversal ( compiler, this )  ) .traverse ( useCfgNode ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^( new NodeTraversal ( root, this )  ) .traverse ( compiler ) ;^121^^^^^120^122^( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  def  defCfgNode  externs  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( use ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( useCfgNode ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  ( graphNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^final Node cfgNode = use;^150^^^^^135^165^final Node cfgNode = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( root )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( varName )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( useCfgNode != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( defNode != useCfgNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  ( defNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, useCfgNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( useCfgNodeew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, useCfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( varName, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^String rootame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, root ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( useCfgNode )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || useCfgNode.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^String useCfgNodeame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, use, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, root )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( root )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  < n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( defNode != useull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^candidates.add ( useew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, useCfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useCfgNode )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || root.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, useCfgNode, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] FlowState  state  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  name  varName  MustDef  defs  int  numUseWithinUseCfgNode  AbstractCompiler  compiler  DiGraphNode  graphNode  boolean  ControlFlowGraph  cfg  List  candidates  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( root )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( root )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == use ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( compiler.getCodingConvention (  ) .isExported ( varName )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( use != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( defNode != useull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( varName, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, use, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( useCfgNodeew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, root )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, useCfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( useew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^String rootame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, use ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( root )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || use.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, root, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.0 || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  > n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, use )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, useCfgNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, root ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( useCfgNode )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || root.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( useCfgNode )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^215^^^^^200^230^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^getDefinition ( n, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^getNumUseInUseCfgNode ( input, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( n == null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( def != null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^223^^^^^208^238^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( parent )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssign ( def )  || !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( root )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( n.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^236^^^^^221^251^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( use.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( numUseWithinUseCfgNode <= 1 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^if  ( numUseWithinUseCfgNode != numUseWithinUseCfgNode )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^245^^^^^230^260^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.has ( useCfgNode.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^278^^^^^255^279^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return false;^266^^^^^251^281^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^268^^^^^253^283^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^278^^^^^263^293^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^return !NodeUtil.isFunction ( root ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Collection<Node> uses = reachingUses.getUses ( name, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Collection<Node> uses = reachingUses.getUses ( varName, parent ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( uses.size (  )  <= 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^284^^^^^269^299^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return false;^287^^^^^272^302^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  Collection  uses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^return !NodeUtil.isFunction ( n ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rootParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node useCfgNodeParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node parentParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node useParentParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^while  ( parent.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^while  ( defParent.getParent (  ) .getType (  )  <= Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^defParent = use.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^defParent = useParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( use )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( parent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( parentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Literal]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = root.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = useCfgNode.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def.removeChild ( root ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, useCfgNode ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( root, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^useParent.replaceChild ( rhs, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = useParent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def.removeChild ( parent ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, useParent ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( rhs, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^while  ( useCfgNode.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^defParent = parent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^defParent = useCfgNode.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = useCfgNode.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isExpressionNode ( rhs )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isExpressionNode ( use )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, parent ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( n, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useCfgNode )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useCfgNodeParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.isVar ( def )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = parent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, parent ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = use.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( useParent )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node rhs = parent.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isExpressionNode ( parent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^while  ( root.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^while  ( rhs.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, useCfgNode ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def.removeChild ( use ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, n ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( rhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( n.getString (  ) .equals ( name )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = useCfgNode;^330^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( name )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = useParent;^337^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = lhs;^330^^^^^321^344^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^AbstractCfgNodeTraversalCallback gatherCb = lhsew AbstractCfgNodeTraversalCallback (  )  {^322^323^^^^321^344^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node lhs = root.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^switch  ( rhs.getType (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( use.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( lhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node lhs = lhs.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( root )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, lhs, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( gatherCb, n, compiler ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( n.getString (  ) .equals ( name )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = lhs;^330^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( root )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( name )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = rhs;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^def = parent;^337^^^^^326^341^def = n;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node lhs = useCfgNode.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^switch  ( lhs.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( rhs.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( useParent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( use )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( name )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^AbstractCfgNodeTraversalCallback gatherCb = parentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useParent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parant, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] AbstractCompiler  compiler  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( name )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parant )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  
[BugLab_Variable_Misuse]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( parent ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^DiGraphNode<Node, Branch> graphNode = n.getDirectedGraphNode ( cfg ) ;^143^^^^^128^158^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  ( graphNode != null )  {^144^^^^^129^159^if  ( graphNode == null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^FlowState<MustDef> state = 1.getAnnotation (  ) ;^148^^^^^133^163^FlowState<MustDef> state = graphNode.getAnnotation (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^final Node cfgNode = parent;^150^^^^^135^165^final Node cfgNode = n;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^141^171^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.0 || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  < n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^152^182^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  ( defNode != parentull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^if  ( n != defNodeull )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  ( defNode == null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^166^^^^^151^181^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^145^175^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^146^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^156^186^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^158^188^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^144^174^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^172^^^^^157^187^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( cfgNode, compiler, gatherCb ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, cfgNode ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( gatherCb, cfgNode, compiler ) ;^179^^^^^164^194^NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] DiGraphNode  graphNode  FlowState  state  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  Node  cfgNode  defNode  n  parent  String  name  MustDef  defs  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  >= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( defNode != parentull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == defNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.null || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( 2.getCodingConvention (  ) .isExported ( name )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] GatherCandiates 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  )  {^156^^^^^155^176^if  ( NodeUtil.isName ( n )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( defNode )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == defNode ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  < n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  )  {^167^^^^^155^176^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( defNode != parentull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( n != defNodeull )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( defNode == null )  {^172^^^^^155^176^if  ( defNode != null )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, parent, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^candidates.add ( new Candidate ( name, defNode, n, parent )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( defNode, name, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( defNodeew Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( cfgNodeew Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( cfgNode, defNode, n, name )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( new Candidate ( name, cfgNode, n, defNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^166^^^^^155^176^String name = n.getString (  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, parent ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = name.getDef ( reachingDef, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = cfgNode.getDef ( name, reachingDef ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^|| NodeUtil.isVar ( n )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^160^161^162^^^155^176^|| NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.DEC || n.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^161^162^^^^155^176^parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^Node defNode = reachingDef.getDef ( cfgNode, name ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Argument_Swapping]^candidates.add ( nameew Candidate ( n, defNode, n, cfgNode )  ) ;^173^^^^^155^176^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Node defNode = 1.getDef ( name, cfgNode ) ;^171^^^^^155^176^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  defNode  n  parent  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[BugLab_Variable_Misuse]^this.defCfgNode = useCfgNode;^206^^^^^203^209^this.defCfgNode = defCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[BugLab_Variable_Misuse]^this.use = useCfgNode;^207^^^^^203^209^this.use = use;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[BugLab_Variable_Misuse]^this.useCfgNode = use;^208^^^^^203^209^this.useCfgNode = useCfgNode;^[CLASS] Candidate 1 2 3 4  [METHOD] <init> [RETURN_TYPE] Node)   String varName Node defCfgNode Node use Node useCfgNode [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( use )  )  {^214^^^^^199^229^if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^215^^^^^200^230^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^getDefinition ( useCfgNode, null ) ;^218^^^^^203^233^getDefinition ( defCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^getNumUseInUseCfgNode ( use, null ) ;^219^^^^^204^234^getNumUseInUseCfgNode ( useCfgNode, null ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Operator]^if  ( def != null )  {^222^^^^^207^237^if  ( def == null )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^223^^^^^208^238^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssign ( def )  || !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( use )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( useCfgNode )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^213^243^if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( use.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^236^^^^^221^251^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( useCfgNode.getLastChild (  )  )  )  {^235^^^^^220^250^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Operator]^if  ( numUseWithinUseCfgNode >= 1 )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^if  ( numUseWithinUseCfgNode != numUseWithinUseCfgNode )  {^244^^^^^229^259^if  ( numUseWithinUseCfgNode != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^245^^^^^230^260^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^if  ( NodeUtil.has ( useCfgNode.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^240^270^if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^278^^^^^255^279^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return false;^266^^^^^251^281^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^268^^^^^253^283^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^260^290^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^278^^^^^263^293^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^switch  ( useCfgNode.getType (  )  )  {^259^^^^^244^274^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Argument_Swapping]^Collection<Node> uses = defCfgNode.getUses ( varName, reachingUses ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Argument_Swapping]^Collection<Node> uses = reachingUses.getUses ( defCfgNode, varName ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^Collection<Node> uses = reachingUses.getUses ( varName, use ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Argument_Swapping]^Collection<Node> uses = varName.getUses ( reachingUses, defCfgNode ) ;^281^^^^^266^296^Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Operator]^if  ( uses.size (  )  == 1 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^if  ( uses.size (  )  != 2 )  {^283^^^^^268^298^if  ( uses.size (  )  != 1 )  {^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^284^^^^^269^299^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return false;^287^^^^^272^302^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Collection  uses  String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^switch  ( useCfgNode.getType (  )  )  {^259^^^^^258^269^switch  ( input.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Wrong_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^return !NodeUtil.isFunction ( useCfgNode ) ;^275^^^^^273^276^return !NodeUtil.isFunction ( input ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  input  use  useCfgNode  
[BugLab_Variable_Misuse]^Node useCfgNodeParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node useParentParent = def.getParent (  ) ;^294^^^^^293^314^Node defParent = def.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node useParentParent = use.getParent (  ) ;^295^^^^^293^314^Node useParent = use.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^while  ( defParent.getParent (  ) .getType (  )  > Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^defParent = useParent.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^defParent = useCfgNode.getParent (  ) ;^302^^^^^293^314^defParent = defParent.getParent (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( useParent )  )  {^296^^^^^293^314^if  ( NodeUtil.isAssign ( def )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.isVar ( def )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.isVar ( defParentParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Literal]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = useCfgNode.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def.removeChild ( useCfgNode ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( rhs, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^useParent.replaceChild ( rhs, use ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = useParent.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = use.getLastChild (  ) ;^307^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def.removeChild ( useParent ) ;^308^^^^^293^314^def.removeChild ( rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, useCfgNode ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( useCfgNode, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^while  ( useCfgNode.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = useParent.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = use.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isExpressionNode ( useParent )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^while  ( use.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^while  ( useParent.getParent (  ) .getType (  )  == Token.LABEL )  {^301^^^^^293^314^while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( use, useParent ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( useCfgNode, rhs ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^useParent.replaceChild ( rhs, use ) ;^305^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useCfgNode )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( useCfgNodeParent )  )  {^306^^^^^293^314^} else if  ( NodeUtil.isVar ( defParent )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node rhs = useCfgNode.getLastChild (  ) ;^297^^^^^293^314^Node rhs = def.getLastChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( NodeUtil.isExpressionNode ( useCfgNode )  ) ;^300^^^^^293^314^Preconditions.checkState ( NodeUtil.isExpressionNode ( defParent )  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^useParent.replaceChild ( useParent, rhs ) ;^309^^^^^293^314^useParent.replaceChild ( use, rhs ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] inlineVariable [RETURN_TYPE] void   [VARIABLES] String  varName  boolean  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( useParent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = rhs;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = rhs;^337^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = parent;^330^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = useParent;^337^^^^^321^344^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^AbstractCfgNodeTraversalCallback gatherCb = useew AbstractCfgNodeTraversalCallback (  )  {^322^323^^^^321^344^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^327^^^^^321^344^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^321^344^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node lhs = useParent.getFirstChild (  ) ;^335^^^^^321^344^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^321^344^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, rhs, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^343^^^^^321^344^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getDefinition [RETURN_TYPE] void   Node n Node parent [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( useParent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = useParent;^330^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^def = rhs;^337^^^^^326^341^def = n;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( use.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useParent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useParent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^AbstractCfgNodeTraversalCallback gatherCb = useParentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, useParent, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, gatherCb, n ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( n, compiler, gatherCb ) ;^363^^^^^350^364^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[CLASS] Candidate 1 2 3 4  [METHOD] getNumUseInUseCfgNode [RETURN_TYPE] void   Node n Node parant [VARIABLES] String  varName  boolean  AbstractCfgNodeTraversalCallback  gatherCb  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useParent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( useCfgNode )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] Candidate 1 2 3 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  varName  boolean  NodeTraversal  t  int  numUseWithinUseCfgNode  Node  def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent  
[BugLab_Wrong_Literal]^return false;^266^^^^^258^269^return true;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[BugLab_Wrong_Literal]^return true;^268^^^^^258^269^return false;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Argument_Swapping]^if  ( varName.getString (  ) .equals ( n )  && n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getString (  ) .equals ( varName )  || n.hasChildren (  )  )  {^329^^^^^326^341^if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^def = parent;^330^^^^^326^341^def = n;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && lhs.getString (  ) .equals ( lhs )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^def = parent;^337^^^^^326^341^def = n;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^Node lhs = parent.getFirstChild (  ) ;^335^^^^^326^341^Node lhs = n.getFirstChild (  ) ;^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^327^^^^^326^341^switch  ( n.getType (  )  )  {^[CLASS] 3  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  lhs  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( varName )  && n.getString (  ) .equals ( n )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[CLASS] 4  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
