[BugLab_Variable_Misuse]^if  ( scope == null )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( parent != null )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope = parentew Scope ( n, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scope = new Scope ( scope, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope = compilerew Scope ( n, n ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanRoot ( n, scope ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scanRoot ( parent, n ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Scope returnedScope = parent;^70^^^^^59^73^Scope returnedScope = scope;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^return scope;^72^^^^^59^73^return returnedScope;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( body.getType (  )  == Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( returnedScope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( scope.getParent (  )  != null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( !fnName.isEmpty (  )  || NodeUtil.isFunctionAnonymous ( n )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( sourceName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnName, fnNameNode, body, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n, fnNameNode, fnName, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( fnName, n, fnNameNode, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node a = n.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node a = args.getFirstChild (  ) ; a != fnNameNodeull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^for  ( Node args = a.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^for  ( Node a = n.getFirstChild (  ) ; a != argsull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^for  ( Node a = args.getFirstChild (  ) ; a == null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( a.getType (  )  != Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( a.getString (  ) , a, n, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( a.getString (  ) , a, args, fnNameNode, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( args.getString (  ) , a, a, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( a.getString (  ) , a, n, args, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnNameNode.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^sourceName =  ( String )  fnNameNode.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^a = n.getNext (  )  )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node fnNameNode = body.getFirstChild (  ) ;^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node args = n.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node body = n.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String fnName = n.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node fnNameNode = fnNameNode.getFirstChild (  ) ;^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( fnNameNode )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnName, body, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( n.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( args.getType (  )  <= Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( a.getType (  )  > Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnNameNode.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( a.getString (  ) , a, fnNameNode, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n.getString (  ) , a, args, a, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( args.getString (  ) , a, a, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( n.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( fnNameNode, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( body, fnNameNode ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scanVars ( n, body ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( body )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( fnNameNode, fnName, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node n = args.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^for  ( Node n = args.getFirstChild (  ) ; a != aull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( a.getString (  ) , a, fnNameNode, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n.getString (  ) , a, args, a, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( n.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^sourceName =  ( String )  body.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( args.getType (  )  != Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node a = fnNameNode.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^a = fnNameNode.getNext (  )  )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( a.getType (  )  <= Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( a.getString (  ) , a, args, fnNameNode, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( a.getString (  ) , a, n, args, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( returnedScope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( scope.getParent (  )  != null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( fnNameNode, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionAnonymous ( var )  )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node child = var.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node var = n.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^child = var;^121^^^^^114^122^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = var.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String name = var.getString (  ) ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( child.getType (  )  != Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( name, var, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( varame, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( name, child, n, var, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n, child, name, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( child, name, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( childame, n, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( name, parent, n, child, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^child = var;^121^^^^^106^136^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^sourceName =  ( String )  var.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = var.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String name = var.getString (  ) ;^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String fnName = parent.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node var = parent.getFirstChild (  ) ;^144^^^^^129^159^final Node var = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^final Node block = parent.getNext (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( child.getType (  )  != Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( sourceName, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( name, var, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( varame, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( name, child, n, var, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( child, name, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( childame, n, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( parentame, child, n, n, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( name, parent, n, child, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^String fnName = var.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( sourceName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnName, var.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( fnName, n.getFirstChild (  ) , n, var, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n, fnName.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( fnName, parent.getFirstChild (  ) , n, n, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getChildCount (  )  != 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Preconditions.checkState ( var.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  != Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( parent.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( var.getString (  ) , var, var, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^declareVar ( var.getString (  ) , var, n, next, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( n.getString (  ) , var, var, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^declareVar ( parent.getString (  ) , var, n, var, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( var, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( block, var ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scanVars ( n, block ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( var )  || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructure ( n )  && NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node child = var.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^child = var;^163^^^^^159^164^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = var.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( var, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( child, var ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scanVars ( n, child ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^child = parent;^163^^^^^148^178^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = var.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( var, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scanVars ( child, var ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scanVars ( n, child ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node var = n.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^child = var;^163^^^^^148^178^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( parent )  || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( nodeWithLineNumber.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^if  ( parent.getType (  )  == Token.CATCH && origParent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  <= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  >= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^if  ( info != null )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^info = origParent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^info = nodeWithLineNumber.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^allowDupe = info != null || info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Operator]^allowDupe = info == null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Scope.Var origVar = scope.getVar ( sourceName ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^Scope.Var origVar = s.getVar ( name ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^Scope.Var origVar = name.getVar ( scope ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Literal]^boolean allowDupe = true;^194^^^^^183^212^boolean allowDupe = false;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^JSDocInfo info = origParent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( origParent.getType (  )  == Token.CATCH && nodeWithLineNumber.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( s.isGlobal (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( scope.isDeclared ( fnName, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( scope.isDeclared ( nodeWithLineNumberame, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( s.isDeclared ( name, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Wrong_Literal]^if  ( scope.isDeclared ( name, true )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scope.declare ( fnName, n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scope.declare ( parentame, n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope.declare ( sourceNameame, n, declaredType, compiler.getInput ( n )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope.declare ( name, n, compiler, declaredType.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scope.declare ( name, n, declaredType, compiler.getInput ( name )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope.declare ( name, n, declaredType, sourceName.getInput ( compiler )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, sourceName, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, nodeWithLineNumberame, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, name, n, n, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, nodeWithLineNumber, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, n ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( name, scope, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, parentame, n, n, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( parent, name, n, scope, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, grampsame, n, parent, n, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, nodeWithLineNumberame, n, parent, gramps, n ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( n, scopeame, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( scope.isDeclared ( sourceName, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^if  ( name.isDeclared ( scope, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, name, n, nodeWithLineNumber, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, parent ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^redeclarationHandler.onRedeclaration ( s, name, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, gramps, n, parent, name, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, name, n, nodeWithLineNumber, gramps, parent ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^redeclarationHandler.onRedeclaration ( scope, name, n, gramps, parent, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^scope.declare ( name, n, declaredType, compiler.getInput ( fnName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope.declare ( sourceName, n, declaredType, compiler.getInput ( name )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Argument_Swapping]^scope.declare ( name, n, sourceName, compiler.getInput ( declaredType )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[BugLab_Variable_Misuse]^if  ( nodeWithLineNumber.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( origParent.getType (  )  == Token.CATCH && nodeWithLineNumber.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  ( parent.getType (  )  == Token.CATCH && origParent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  <= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^info = nodeWithLineNumber.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^info = origParent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^allowDupe = info != null || info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^allowDupe = info == null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^Scope.Var origVar = s.getVar ( name ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^Scope.Var origVar = name.getVar ( scope ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Literal]^boolean allowDupe = true;^194^^^^^183^212^boolean allowDupe = false;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node origParent = 1.getParentNode (  ) ;^187^^^^^183^212^Node origParent = origVar.getParentNode (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^JSDocInfo info = origParent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  > Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( origParent.getType (  )  >= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( s.isGlobal (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
