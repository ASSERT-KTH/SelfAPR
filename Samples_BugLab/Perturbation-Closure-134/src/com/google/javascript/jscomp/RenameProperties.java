[BugLab_Wrong_Operator]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad "  ^  RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad "  ==  RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[BugLab_Argument_Swapping]^this ( generatePseudoNames, compiler, null, null ) ;^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[BugLab_Argument_Swapping]^this ( generatePseudoNames, compiler, prevUsedPropertyMap, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[BugLab_Argument_Swapping]^this ( compiler, prevUsedPropertyMap, generatePseudoNames, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[BugLab_Variable_Misuse]^this.oldName = oldName;^466^^^^^465^468^this.oldName = name;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[BugLab_Variable_Misuse]^if  ( p1.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^if  ( numOccurrences != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^if  ( p1.numOccurrences != numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p2.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p2 != p1.numOccurrences.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p2.numOccurrences.numOccurrences != p1 )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1.numOccurrences == p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return numOccurrences - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return p2.numOccurrences - numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1.numOccurrences - p2.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Wrong_Operator]^return p2.numOccurrences  |  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1 - p2.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.numOccurrences - p1;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Wrong_Operator]^return p2.numOccurrences  ||  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return newName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return p1.oldName.compareTo ( newName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.compareTo ( p1.oldName.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return p2.oldName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return oldName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^return p1.oldName.compareTo ( oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.oldName.oldName.compareTo ( p1 ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, root, new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( externs, compiler, new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^new HashSet<String> ( quotedNames.size (  )  + externedNames.size (  )  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^new HashSet<String> ( externedNames.size (  )   &  quotedNames.size (  )  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Set<String> reservedNames = new HashSet<String> ( quotedNames.size (  )  + externedNames.size (  )  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )   >  quotedNames.size (  )  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( prevUsedPropertyMap == null )  {^170^^^^^155^185^if  ( prevUsedPropertyMap != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^reusePropertyNames ( propertyMap, reservedNames.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^generateNames ( reservedNames, propsByFreq ) ;^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Literal]^boolean changed = true;^182^^^^^167^197^boolean changed = false;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( p != rootull && p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( p != null && replacement != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p != null || p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p == null && p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p != null && p.newName == null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^changed = generatePseudoNames || !p.newName.equals ( oldName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^changed = changed || !p.newName.equals ( replacement ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^changed = changed && !p.newName.equals ( oldName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.equals ( p.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( oldName.equals ( newName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( p.oldName.equals ( oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( p.equals ( oldName.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( oldName.equals ( replacement )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( oldName.equals ( p.oldName.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^n.setString ( newName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^n.setString ( p ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^changed = oldName || !p.newName.equals ( changed ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Property p = oldName.get ( propertyMap ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^String oldName = root.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Property p = propertyMap.get ( replacement ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^n.setString ( replacement ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^n.setString ( p.newName.newName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^changed = changed || !p.newName.equals ( newName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( p != null && replacement != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^if  ( p.newName != null && p != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p != null || p.newName != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p == null && p.newName != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p != null && p.newName == null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^replacement = replacement;^205^^^^^201^206^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^replacement = replacement;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^replacement = p.newName.newName;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^replacement = p;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.equals ( p.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( oldName.equals ( replacement )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( p.oldName.equals ( oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( p.equals ( oldName.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( oldName.equals ( p )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( sb.length (  )  >= 0 )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Literal]^if  ( sb.length (  )  > numOccurrences )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^replacement = replacement;^205^^^^^190^220^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Literal]^changed = false;^213^^^^^198^228^changed = true;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Node parent = callNodeToParentMap.get ( root ) ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Node parent = n.get ( callNodeToParentMap ) ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Node firstArg = root.getFirstChild (  ) .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Property p = propertyMap.get ( newName ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Property p = oldName.get ( propertyMap ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Node firstArg = parent.getFirstChild (  ) .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^for  ( String oldName : root.getString (  ) .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Property p = propertyMap.get ( replacement ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^Preconditions.checkState ( newName.equals ( p.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^Preconditions.checkState ( oldName.equals ( p.oldName.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^sb.append ( oldName ) ;^210^^^^^195^225^sb.append ( replacement ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^parent.replaceChild ( root, Node.newString ( sb.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^parent.replaceChild ( sb, Node.newString ( n.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( generatePseudoNames )  {^216^^^^^201^231^if  ( changed )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( !generatePseudoNames && replacement != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^if  ( !changed && prevName != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Wrong_Operator]^if  ( !generatePseudoNames || prevName != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Wrong_Operator]^if  ( !generatePseudoNames && prevName == null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^if  ( null.contains ( prevName )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^if  ( reservedNames.contains ( replacement )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^if  ( prevName.contains ( reservedNames )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^prop.newName = replacement;^240^^^^^228^244^prop.newName = prevName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^reservedNames.add ( replacement ) ;^241^^^^^228^244^reservedNames.add ( prevName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^if  ( reservedNames.contains ( oldName )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^String prevName = prop.oldName.lookupNewName ( prevUsedPropertyMap ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^String prevName = prevUsedPropertyMap.lookupNewName ( prop ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^String prevName = prop.lookupNewName ( prevUsedPropertyMap.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^NameGenerator nameGen = new NameGenerator ( reservedCharacters, "", reservedNames ) ;^254^255^^^^253^270^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( changed )  {^257^^^^^253^270^if  ( generatePseudoNames )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( prevName == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^if  ( p == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p.newName != null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^p.newName = "$" + oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^p.newName = "$" + p.oldName.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^p.newName = "$" + p + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^p.newName = "$"  ==  p.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( replacement == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^if  ( p.newName.newName == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^p.newName = "$" + replacement + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^p.newName = "$"  <=  p.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^reservedNames.add ( p.newName.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^reservedNames.add ( p ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^compiler.addToDebugLog ( oldName + " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^compiler.addToDebugLog ( p.oldName + " => " + prevName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^compiler.addToDebugLog ( p.oldName.oldName + " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Argument_Swapping]^compiler.addToDebugLog ( p.newName + " => " + p.oldName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Wrong_Operator]^compiler.addToDebugLog ( p.oldName  ||  " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( replacement != null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Wrong_Operator]^if  ( p.newName == null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Variable_Misuse]^map.put ( oldName, p.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Argument_Swapping]^map.put ( p.newName.oldName, p ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Argument_Swapping]^map.put ( p.newName, p.oldName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Variable_Misuse]^map.put ( p.oldName, prevName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^externedNames.add ( parent.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  >= Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^child = parent.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( propNode.getType (  )  < Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( varNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( child != null || child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( child == null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( child != null && child.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( fnName.getType (  )  == Token.NAME && prevName.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^if  ( RENAME_PROPERTY_FUNCTION_NAME.getType (  )  == Token.NAME && fnName.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( fnName.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( fnName.getType (  )  >= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( propNode, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^countCallCandidates ( t, parent ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^countCallCandidates ( n, t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.NAME && replacement.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  != Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^varNode.removeChild ( propNode ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node varNode = propNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node varNode = n.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  > Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^varNode.removeChild ( propNode ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node varNode = propNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( n.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^varNode.removeChild ( n ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( replacement )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( replacement.equals ( name )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( n )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^parent.removeChild ( varNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^parent.removeChild ( varNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^parent.removeChild ( propNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^if  ( name.equals ( RENAME_PROPERTY_FUNCTION_NAME )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^parent.removeChild ( propNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^} else if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  <= Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node varNode = varNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( Node varNode = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^for  ( Node n = key.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^for  ( Node key = n.getFirstChild (  ) ; key == null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( key.getType (  )  == Token.2 )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( propNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^key = parent.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( Node key = propNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node child = varNode.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^String propNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^switch  ( propNode.getType (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node propNode = parent.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^key = varNode.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( varNode != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^quotedNames.add ( propNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^countCallCandidates ( t, propNode ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^countCallCandidates ( n, t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^String parentame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node varNode = varNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( !externedNames.contains ( prevName )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^if  ( !externedNames.contains ( nameame )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^countPropertyOccurrence ( replacement, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^countPropertyOccurrence ( t, name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^countPropertyOccurrence ( prevName, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Node firstArg = firstArg.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Wrong_Operator]^if  ( firstArg.getType (  )  <= Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^t.report ( firstArg, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^t.report ( callNode, BAD_ARG ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( callNode.getType (  )  != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^t.report ( BAD_CALL, callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( !TokenStream.isJSIdentifier ( replacement )  )  {^428^^^^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^t.report ( firstArg, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^t.report ( callNode, BAD_ARG, replacement ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^t.report ( callNode, BAD_CALL, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^t.report ( callNode, name, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^if  ( !externedNames.contains ( replacement )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^countPropertyOccurrence ( t, name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^for  ( String name : callNode.getString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Argument_Swapping]^t.report ( BAD_ARG, callNode, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^countPropertyOccurrence ( prevName, t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[BugLab_Variable_Misuse]^Property prop = propertyMap.get ( prevName ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^Property prop = name.get ( propertyMap ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Wrong_Operator]^if  ( prop != null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^prop = new Property ( replacement, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^prop = new Property ( t, name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^prop = new Property ( prevName, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^propertyMap.put ( replacement, prop ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Argument_Swapping]^propertyMap.put ( prop, name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[BugLab_Variable_Misuse]^if  ( p1.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p1.numOccurrences.numOccurrences != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p1.numOccurrences != p2.numOccurrences.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p2.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^if  ( p2.numOccurrences.numOccurrences != p1 )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1.numOccurrences <= p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Variable_Misuse]^return p1.numOccurrences - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1.numOccurrences - p2.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.numOccurrences - p1.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1 - p2.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Wrong_Operator]^return p2.numOccurrences  ^  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2 - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1.numOccurrences.numOccurrences - p2;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Wrong_Operator]^return p2.numOccurrences  &&  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Variable_Misuse]^return p1.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.compareTo ( p1.oldName.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p2.oldName.oldName.compareTo ( p1 ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Variable_Misuse]^return p2.oldName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Argument_Swapping]^return p1.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Wrong_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  < Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^externedNames.add ( parent.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^child = parent.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^296^^^^^295^313^switch  ( n.getType (  )  )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( propNode.getType (  )  != Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( propNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( varNode != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( child != null || child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( child == null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( child != null && child.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( parent.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( fnName.getType (  )  == Token.NAME && name.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( fnName.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( fnName.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( n, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^countCallCandidates ( t, varNode ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^countCallCandidates ( n, t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.NAME && name.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  != Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  <= Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^varNode.removeChild ( propNode ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = propNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = varNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^varNode.removeChild ( propNode ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = propNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^} else if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( n.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = varNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^if  ( name.equals ( RENAME_PROPERTY_FUNCTION_NAME )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( varNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( varNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( propNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^String parentame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( propNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( propNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  > Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = n.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( varNode.getType (  )  >= Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^for  ( Node n = key.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^for  ( Node key = n.getFirstChild (  ) ; key == null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^maybeMarkCandidate ( t, key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^key = parent.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node propNode = parent.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^switch  ( propNode.getType (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^for  ( Node key = parent.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^key = varNode.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^maybeMarkCandidate ( parent, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( propNode != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^callNodeToParentMap.put ( n, propNode ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^countCallCandidates ( t, parent ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^countCallCandidates ( n, t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( varNode )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^} else if  ( varNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Variable_Misuse]^Node varNode = n.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[BugLab_Argument_Swapping]^countPropertyOccurrence ( t, name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[BugLab_Variable_Misuse]^Node firstArg = firstArg.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Wrong_Operator]^if  ( firstArg.getType (  )  <= Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Variable_Misuse]^t.report ( firstArg, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Argument_Swapping]^t.report ( BAD_CALL, callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Variable_Misuse]^t.report ( firstArg, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Variable_Misuse]^t.report ( callNode, null, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Argument_Swapping]^t.report ( BAD_ARG, callNode, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Argument_Swapping]^t.report ( callNode, name, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Argument_Swapping]^countPropertyOccurrence ( t, name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Variable_Misuse]^for  ( String name : callNode.getString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[BugLab_Argument_Swapping]^Property prop = name.get ( propertyMap ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[BugLab_Wrong_Operator]^if  ( prop != null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[BugLab_Argument_Swapping]^prop = new Property ( t, name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[BugLab_Argument_Swapping]^propertyMap.put ( prop, name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[BugLab_Variable_Misuse]^this.oldName = oldName;^466^^^^^465^468^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  numOccurrences  
