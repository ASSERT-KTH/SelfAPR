[buglab_swap_variables]^this ( behavior, compiler, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this (  behavior, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( compiler,  Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( basicBlock, parent, parent.getParent (  ) , nameNode, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this (  parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( nameNode,  parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( nameNode, basicBlock, parent.getParent (  ) , parent, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( nameNode, parent, parent.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( nameNode, t, parent.getParent (  ) , basicBlock, parent.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^this ( nameNode, paren parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return v.get ( referenceMap ) ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( varFilter != null && v.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( v != varFilterull && n.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( parent, n, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference (  parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n, t, parent, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n,  t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( t, parent, n, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n, paren t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n, parent, blockStack, t.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n, parent, t.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( blockStack, v, new Reference ( n, parent, t, t.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference (  v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( v, t, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t,  new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, parentew Reference ( n, n, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, new Reference (  parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, new Reference ( n,  t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, blockStack, new Reference ( n, parent, t, v.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, new Reference ( n, parent, t.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( blockStack, parent, t, n.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^new Reference ( n, blockStack, t, parent.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( n, v, tew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, parent, new Reference ( n, v, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, new Reference ( n, blockStack, t, parent.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, n, vew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( parent, v, new Reference ( n, t, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^addReference ( t, v, blockStackew Reference ( n, parent, t, n.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary ( parent, n )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary (  parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary ( n )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^blockStack.push ( parentew BasicBlock ( n, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^blockStack.push ( new BasicBlock (  n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^blockStack.push ( new BasicBlock ( parent )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^behavior.afterExitScope ( referenceMap, t ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^behavior.afterExitScope (  referenceMap ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^behavior.afterExitScope ( t ) ;^142^^^^^140^143^behavior.afterExitScope ( t, referenceMap ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary ( parent, n )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary (  parent )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( isBlockBoundary ( n )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^blockStack.push ( blockStackew BasicBlock ( n.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^blockStack.push ( new BasicBlock ( blockStack.peek (  )  )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( n != parentull )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return parent != n.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^ReferenceCollection referenceInfo = v.get ( referenceMap ) ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceMap.put ( referenceInfo, v ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceMap.put (  referenceInfo ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceMap.put ( v ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceInfo.add (  t, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceInfo.add ( reference, v, t ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceInfo.add ( reference,  v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^referenceInfo.add ( reference, t ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[buglab_swap_variables]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) ,  func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return DECLARATION_PARENTS.contains ( grandparent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return  ( parent == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentTypeType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^return  ( nameNodeType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[buglab_swap_variables]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[buglab_swap_variables]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[buglab_swap_variables]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[buglab_swap_variables]^if  ( references < index.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[buglab_swap_variables]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[buglab_swap_variables]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[buglab_swap_variables]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[buglab_swap_variables]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[buglab_swap_variables]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[buglab_swap_variables]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[buglab_swap_variables]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[buglab_swap_variables]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this (  parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( nameNode, t, parent.getParent (  ) , basicBlock, parent.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( nameNode,  parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( basicBlock, parent, parent.getParent (  ) , nameNode, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( nameNode, parent, parent.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( t, parent, parent.getParent (  ) , basicBlock, nameNode.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^this ( nameNode, paren parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) ,  func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) ,  t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[buglab_swap_variables]^return grandparent.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && DECLARATION_PARENTS.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[buglab_swap_variables]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[buglab_swap_variables]^return DECLARATION_PARENTS.contains ( grandparent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[buglab_swap_variables]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[buglab_swap_variables]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[buglab_swap_variables]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[buglab_swap_variables]^return  ( nameNode == Token.VAR && parentType.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[buglab_swap_variables]^return  ( nameNodeType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[buglab_swap_variables]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[buglab_swap_variables]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[buglab_swap_variables]^for  ( thatBlock = currentBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
