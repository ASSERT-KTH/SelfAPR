[BugLab_Variable_Misuse]^this ( compiler, DO_NOTHING_BEHAVIOR, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^this ( behavior, compiler, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$Behavior)   AbstractCompiler compiler Behavior behavior [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this.behavior = DO_NOTHING_BEHAVIOR;^91^^^^^88^93^this.behavior = behavior;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Predicate)   AbstractCompiler compiler Behavior behavior Var> varFilter [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this ( grandparent, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this ( nameNode, grandparent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^this ( t, parent, parent.getParent (  ) , basicBlock, nameNode.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^this ( nameNode, parent, parent.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this ( nameNode, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this.nameNode = parent;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this.grandparent = parent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this.parent = basicBlock;^502^^^^^501^506^this.parent = parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^505^^^^^501^506^this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] <init> [RETURN_TYPE] Node)   BasicBlock parent Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, nameNode, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^100^^^^^99^101^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return null.get ( v ) ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return v.get ( referenceMap ) ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return 2.get ( v ) ;^107^^^^^106^108^return referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getReferenceCollection [RETURN_TYPE] ReferenceCollectingCallback$ReferenceCollection   Var v [VARIABLES] Set  DECLARATION_PARENTS  Var  v  Node  externs  grandparent  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( v != rootull && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( v != varFilterull && n.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( v != null || varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( v == null && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^new Reference ( root, parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^new Reference ( n, root, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^new Reference ( n, parent, t, null.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^new Reference ( t, parent, n, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^new Reference ( parent, n, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^new Reference ( n, blockStack, t, parent.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^addReference ( t, v, rootew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( parent, v, new Reference ( n, t, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, parent, new Reference ( n, v, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, n, vew Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, v, parentew Reference ( n, n, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( blockStack, v, new Reference ( n, parent, t, t.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Var v = t.getScope (  ) .getVar ( root.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Var v = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^116^^^^^114^126^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( v != null && 4.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( varFilter != null && v.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^addReference ( t, v, new Reference ( n, nameNode, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^addReference ( t, v, new Reference ( n, parent, t, this.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, blockStack, new Reference ( n, parent, t, v.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, v, blockStackew Reference ( n, parent, t, n.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( n != vull && varFilter.apply ( v )  )  {^117^^^^^114^126^if  ( v != null && varFilter.apply ( v )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^new Reference ( parent, parent, t, blockStack.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^addReference ( t, v, new Reference ( n, root, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( v, t, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^addReference ( t, v, new Reference ( n, blockStack, t, parent.peek (  )  )  ) ;^118^119^^^^114^126^addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^new Reference ( blockStack, parent, t, n.peek (  )  )  ) ;^119^^^^^114^126^new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.NAME )  {^115^^^^^114^126^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( isBlockBoundary ( root, parent )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( isBlockBoundary ( n, root )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( isBlockBoundary ( parent, n )  )  {^123^^^^^114^126^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^blockStack.push ( new BasicBlock ( basicBlock, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^blockStack.push ( rootew BasicBlock ( parent, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^blockStack.push ( parentew BasicBlock ( n, n )  ) ;^134^^^^^131^135^blockStack.push ( new BasicBlock ( parent, n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( isBlockBoundary ( root, parent )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( isBlockBoundary ( n, root )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( isBlockBoundary ( parent, n )  )  {^151^^^^^148^155^if  ( isBlockBoundary ( n, parent )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^blockStack.push ( rootew BasicBlock ( blockStack.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^blockStack.push ( blockStackew BasicBlock ( n.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^blockStack.push ( parentew BasicBlock ( blockStack.peek (  ) , n )  ) ;^152^^^^^148^155^blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^154^^^^^148^155^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  nodeTraversal  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( root != null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( parent != rootull )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( n != parentull )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( parent == null )  {^161^^^^^160^190^if  ( parent != null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^177^^^^^160^190^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return root != parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return parent != n.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return n < parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return n != nameNode.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return n != root.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return n == parent.getFirstChild (  ) ;^184^^^^^160^190^return n != parent.getFirstChild (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^switch  ( nameNode.getType (  )  )  {^162^^^^^160^190^switch  ( parent.getType (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return root.getType (  )  == Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return n.getType (  )  < Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return parent.getType (  )  == Token.CASE;^189^^^^^160^190^return n.getType (  )  == Token.CASE;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isBlockBoundary [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^ReferenceCollection referenceInfo = v.get ( referenceMap ) ;^194^^^^^192^202^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[BugLab_Wrong_Operator]^if  ( referenceInfo != null )  {^195^^^^^192^202^if  ( referenceInfo == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[BugLab_Argument_Swapping]^referenceMap.put ( referenceInfo, v ) ;^197^^^^^192^202^referenceMap.put ( v, referenceInfo ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[BugLab_Argument_Swapping]^referenceInfo.add ( t, reference, v ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[BugLab_Argument_Swapping]^referenceInfo.add ( reference, v, t ) ;^201^^^^^192^202^referenceInfo.add ( reference, t, v ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] addReference [RETURN_TYPE] void   NodeTraversal t Var v Reference reference [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Var  v  Reference  reference  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  ReferenceCollection  referenceInfo  
[BugLab_Variable_Misuse]^if  ( i == 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( size <= 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( size ==  )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^246^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( init != null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^253^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^Preconditions.checkState ( references.get ( 1 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^Preconditions.checkState ( references.get (  ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( !initBlock.provablyExecutesBefore ( references.get ( size ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^261^^^^^243^266^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^for  ( int i = 1; i > size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^for  ( int i = 2; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^references.get ( size ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^265^^^^^243^266^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  init  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Reference maybeInit = null.get ( index ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^281^^^^^275^284^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^283^^^^^275^284^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( references < index.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( index < references.size (  )  || index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( index <= references.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( index < references.size (  )  && index >= 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( index < references.size (  )  && index > index )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^299^^^^^292^304^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^Reference maybeDecl = references.get ( index-index ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( maybeInit.isVarDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^303^^^^^292^304^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] Set  DECLARATION_PARENTS  Reference  maybeDecl  maybeInit  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  index  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( isInitializingDeclarationAt (  )  )  {^314^^^^^313^320^if  ( isInitializingDeclarationAt ( 0 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( 3 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( 0 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return references.get ( 0 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( 2 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return references.get ( this ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return references.get (  ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return 2.get ( 1 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return references.get ( -1 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return null.get ( 0 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( isInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return references.get ( size ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return 1.get ( i ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^for  ( int i = i; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return 2.get ( i ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^boolean assigned = true;^339^^^^^338^352^boolean assigned = false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^int size = null.size (  ) ;^340^^^^^338^352^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^347^^^^^338^352^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^assigned = false;^345^^^^^338^352^assigned = true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( !isHoisted )  {^344^^^^^338^352^if  ( !assigned )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Reference ref = references.get ( size ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^for  ( int i = i; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return isHoisted;^351^^^^^338^352^return assigned;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Reference  ref  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  i  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^int size = 3.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( size > 0 || references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( size >= 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( size > size && references.get ( size ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( size >  && references.get (  ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return false;^357^^^^^354^360^return true;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^if  ( size > 1 && references.get ( 1 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^359^^^^^354^360^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  size  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return new Reference ( nameNode.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , parent, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return new Reference ( parent.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return new Reference ( root.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( nameNode.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return DECLARATION_PARENTS.contains ( grandparent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  && parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP || grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  != Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( root.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( n.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return nameNode.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return parent.getType (  )  != Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return n.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return NodeUtil.isHoistedFunctionDeclaration ( root ) ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || n.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return isDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR && nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  == Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  == null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^( root.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^( parent.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return parent;^435^^^^^434^436^return basicBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getBasicBlock [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return n;^439^^^^^438^440^return parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getParent [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return root;^443^^^^^442^444^return nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return root;^447^^^^^446^448^return grandparent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getGrandparent [RETURN_TYPE] Node   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Node parent = nameNode.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^Node parent = root.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return isLhsOfForInExpression ( root ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return isLhsOfForInExpression ( n ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( root )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == root;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return NodeUtil.isForIn ( parent )  || parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  != n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( nameNode )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return root.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return parent.getType (  )  != Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return parent.getType (  )  >= Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^int rootType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^int nType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return  ( parentType == Token.VAR && n.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return  ( rootType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return  ( nameNodeType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^return  ( parentTypeType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parent == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) && parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR || nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return  ( parentType != Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  == null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return  ( parentType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^||  ( NodeUtil.isAssignmentOp ( n ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^&& nameNode.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  int  parentType  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return initBlock;^509^^^^^508^510^return parent;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] getParent [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock   [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  initBlock  parent  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^if  ( isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Literal]^return true;^524^^^^^516^529^return false;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^for  ( currentBlock = parent;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^for  ( parent = thatBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Argument_Swapping]^for  ( thatBlock = currentBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^for  ( currentBlock = initBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^currentBlock = thatBlock.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^currentBlock = parent.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^return parent == this;^528^^^^^516^529^return currentBlock == this;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Wrong_Operator]^return currentBlock != this;^528^^^^^516^529^return currentBlock == this;^[CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] Set  DECLARATION_PARENTS  Node  externs  func  grandparent  n  nameNode  parent  root  BasicBlock  basicBlock  currentBlock  initBlock  parent  thatBlock  String  sourceName  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  assigned  isHoisted  Scope  scope  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  Map  referenceMap  
[BugLab_Variable_Misuse]^int size = null.size (  ) ;^244^^^^^243^266^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Variable_Misuse]^if  ( i == 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Operator]^if  ( size != 0 )  {^245^^^^^243^266^if  ( size == 0 )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^return true;^246^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Operator]^if  ( init != null )  {^252^^^^^243^266^if  ( init == null )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^return true;^253^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^Preconditions.checkState ( references.get ( 1 ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^Preconditions.checkState ( references.get ( size ) .isDeclaration (  )  ) ;^256^^^^^243^266^Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Variable_Misuse]^if  ( !initBlock.provablyExecutesBefore ( references.get ( size ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Argument_Swapping]^if  ( !initBlock.provablyExecutesBefore ( i.get ( references ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^return true;^261^^^^^243^266^return false;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Variable_Misuse]^for  ( sizent i = 1; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Argument_Swapping]^for  ( sizent i = 1; i < i; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Operator]^for  ( int i = 1; i == size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^for  ( int i = i; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Variable_Misuse]^if  ( !initBlock.provablyExecutesBefore ( 3.get ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Variable_Misuse]^references.get ( size ) .getBasicBlock (  )  )  )  {^260^^^^^243^266^references.get ( i ) .getBasicBlock (  )  )  )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < size; i++ )  {^258^^^^^243^266^for  ( int i = 1; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Wrong_Literal]^return false;^265^^^^^243^266^return true;^[CLASS] ReferenceCollection  [METHOD] isWellDefined [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  initBlock  List  references  boolean  int  i  size  Reference  init  
[BugLab_Argument_Swapping]^Reference maybeInit = index.get ( references ) ;^276^^^^^275^284^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[BugLab_Wrong_Literal]^return false;^281^^^^^275^284^return true;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[BugLab_Wrong_Literal]^return true;^283^^^^^275^284^return false;^[CLASS] ReferenceCollection  [METHOD] isInitializingDeclarationAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeInit  
[BugLab_Argument_Swapping]^if  ( references < index.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Operator]^if  ( index < references.size (  )  || index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Operator]^if  ( index <= references.size (  )  && index > 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Operator]^if  ( index < references.size (  )  && index >= 0 )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Literal]^if  ( index < references.size (  )  && index > index )  {^293^^^^^292^304^if  ( index < references.size (  )  && index > 0 )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Variable_Misuse]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Literal]^return false;^299^^^^^292^304^return true;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Argument_Swapping]^Reference maybeInit = index.get ( references ) ;^297^^^^^292^304^Reference maybeInit = references.get ( index ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Argument_Swapping]^Reference maybeDecl = index.get ( references-1 ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Literal]^Reference maybeDecl = references.get ( index-index ) ;^294^^^^^292^304^Reference maybeDecl = references.get ( index-1 ) ;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Variable_Misuse]^if  ( maybeInit.isVarDeclaration (  )  )  {^295^^^^^292^304^if  ( maybeDecl.isVarDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Literal]^return true;^303^^^^^292^304^return false;^[CLASS] ReferenceCollection  [METHOD] isInitializingAssignmentAt [RETURN_TYPE] boolean   int index [VARIABLES] List  references  boolean  int  index  Reference  maybeDecl  maybeInit  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( 0 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^return references.get ( 0 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^return references.get ( this ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( this )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Variable_Misuse]^return null.get ( 0 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^return references.get ( 1 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^} else if  ( isInitializingAssignmentAt ( 2 )  )  {^316^^^^^313^320^} else if  ( isInitializingAssignmentAt ( 1 )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^return references.get ( -1 ) ;^315^^^^^313^320^return references.get ( 0 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Wrong_Literal]^return references.get ( 2 ) ;^317^^^^^313^320^return references.get ( 1 ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReference [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  boolean  
[BugLab_Variable_Misuse]^if  ( sizesInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Wrong_Operator]^if  ( isInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Variable_Misuse]^return references.get ( size ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Argument_Swapping]^return i.get ( references ) ;^329^^^^^325^333^return references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Wrong_Literal]^for  ( int i = size; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Wrong_Literal]^for  ( int i = i; i < size; i++ )  {^327^^^^^325^333^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] getInitializingReferenceForConstants [RETURN_TYPE] ReferenceCollectingCallback$Reference   [VARIABLES] List  references  int  i  size  boolean  
[BugLab_Wrong_Literal]^boolean assigned = true;^339^^^^^338^352^boolean assigned = false;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Operator]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Literal]^return true;^347^^^^^338^352^return false;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Literal]^assigned = false;^345^^^^^338^352^assigned = true;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Variable_Misuse]^Reference ref = references.get ( size ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Argument_Swapping]^Reference ref = i.get ( references ) ;^342^^^^^338^352^Reference ref = references.get ( i ) ;^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Wrong_Literal]^for  ( int i = i; i < size; i++ )  {^341^^^^^338^352^for  ( int i = 0; i < size; i++ )  {^[CLASS] ReferenceCollection  [METHOD] isAssignedOnce [RETURN_TYPE] boolean   [VARIABLES] List  references  boolean  assigned  int  i  size  Reference  ref  
[BugLab_Variable_Misuse]^int size = 3.size (  ) ;^355^^^^^354^360^int size = references.size (  ) ;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Variable_Misuse]^if  ( size > 0 && this.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Argument_Swapping]^if  ( references > 0 && size.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Operator]^if  ( size > 0 || references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Operator]^if  ( size >= 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Literal]^if  ( size > -1 && references.get ( -1 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Literal]^return false;^357^^^^^354^360^return true;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Literal]^if  ( size > 1 && references.get ( 1 ) .isInitializingDeclaration (  )  )  {^356^^^^^354^360^if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Wrong_Literal]^return true;^359^^^^^354^360^return false;^[CLASS] ReferenceCollection  [METHOD] firstReferenceIsAssigningDeclaration [RETURN_TYPE] boolean   [VARIABLES] List  references  int  size  boolean  
[BugLab_Variable_Misuse]^this ( grandparent, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Variable_Misuse]^this ( nameNode, grandparent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^this ( parent, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^this ( nameNode, t, parent.getParent (  ) , basicBlock, parent.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^this ( nameNode, parent, parent.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^this ( t, parent, parent.getParent (  ) , basicBlock, nameNode.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Variable_Misuse]^this ( nameNode, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] ReferenceCollectingCallback$BasicBlock)   Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Variable_Misuse]^this.nameNode = parent;^394^^^^^392^400^this.nameNode = nameNode;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^this.parent = nameNode;^395^^^^^392^400^this.parent = parent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^this.grandparent = parent;^396^^^^^392^400^this.grandparent = grandparent;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] String)   Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return new Reference ( parent.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^return new Reference ( basicBlock.getFirstChild (  ) , func, func.getParent (  ) , func, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^return new Reference ( t.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, func.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Argument_Swapping]^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , t, basicBlock.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[CLASS] Reference  [METHOD] newBleedingFunction [RETURN_TYPE] ReferenceCollectingCallback$Reference   NodeTraversal t BasicBlock basicBlock Node func [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  NodeTraversal  t  Node  func  grandparent  nameNode  parent  BasicBlock  basicBlock  String  sourceName  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( nameNode.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  && parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP || grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  >= Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  <= Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Argument_Swapping]^return parent.contains ( DECLARATION_PARENTS.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^403^404^405^^^402^406^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[CLASS] Reference  [METHOD] isDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return nameNode.getType (  )  == Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return parent.getType (  )  > Token.VAR;^409^^^^^408^410^return parent.getType (  )  == Token.VAR;^[CLASS] Reference  [METHOD] isVarDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return NodeUtil.isHoistedFunctionDeclaration ( nameNode ) ;^413^^^^^412^414^return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[CLASS] Reference  [METHOD] isHoistedFunction [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Argument_Swapping]^return isDeclaration (  )  && ( nameNode.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return isDeclaration (  )  || ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR && nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  == Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Wrong_Operator]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  == null ) ;^422^423^^^^419^424^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^( nameNode.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^( parent.getType (  )  != Token.VAR || parent.getFirstChild (  )  != null ) ;^423^^^^^419^424^( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[CLASS] Reference  [METHOD] isInitializingDeclaration [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return nameNode;^439^^^^^438^440^return parent;^[CLASS] Reference  [METHOD] getParent [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return parent;^443^^^^^442^444^return nameNode;^[CLASS] Reference  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^return parent;^447^^^^^446^448^return grandparent;^[CLASS] Reference  [METHOD] getGrandparent [RETURN_TYPE] Node   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  nameNode  parent  
[BugLab_Variable_Misuse]^Node parent = nameNode.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^451^^^^^450^456^Node parent = n.getParent (  ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return isLhsOfForInExpression ( nameNode ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.VAR )  {^452^^^^^450^456^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return isLhsOfForInExpression ( n ) ;^453^^^^^450^456^return isLhsOfForInExpression ( parent ) ;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( nameNode )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == nameNode;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Argument_Swapping]^return NodeUtil.isForIn ( n )  && parent.getFirstChild (  )  == parent;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Wrong_Operator]^return NodeUtil.isForIn ( parent )  || parent.getFirstChild (  )  == n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Wrong_Operator]^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  >= n;^455^^^^^450^456^return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[CLASS] Reference  [METHOD] isLhsOfForInExpression [RETURN_TYPE] boolean   Node n [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Argument_Swapping]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Wrong_Operator]^return parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Wrong_Operator]^return parent.getType (  )  != Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^return nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^459^460^^^^458^461^return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^&& nameNode.getFirstChild (  )  == nameNode;^460^^^^^458^461^&& parent.getFirstChild (  )  == nameNode;^[CLASS] Reference  [METHOD] isSimpleAssignmentToName [RETURN_TYPE] boolean   [VARIABLES] BasicBlock  basicBlock  Set  DECLARATION_PARENTS  String  sourceName  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  
[BugLab_Variable_Misuse]^int nameNodeType = parent.getType (  ) ;^464^^^^^463^471^int parentType = parent.getType (  ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^return  ( parentType == Token.VAR && n.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^return  ( nType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Argument_Swapping]^return  ( parent == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentTypeType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Argument_Swapping]^return  ( nameNodeType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) && parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR || nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Wrong_Operator]^return  ( parentType != Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Wrong_Operator]^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  == null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^return  ( parentType == Token.VAR && parent.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^465^466^467^468^^463^471^return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^||  ( NodeUtil.isAssignmentOp ( n ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^468^469^470^^^463^471^||  ( NodeUtil.isAssignmentOp ( parent ) && parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^&& nameNode.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^469^470^^^^463^471^&& parent.getFirstChild (  )  == nameNode ) || isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^|| isLhsOfForInExpression ( parent ) ;^470^^^^^463^471^|| isLhsOfForInExpression ( nameNode ) ;^[CLASS] Reference  [METHOD] isLvalue [RETURN_TYPE] boolean   [VARIABLES] Set  DECLARATION_PARENTS  boolean  Scope  scope  Node  func  grandparent  n  nameNode  parent  BasicBlock  basicBlock  String  sourceName  int  parentType  
[BugLab_Variable_Misuse]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Variable_Misuse]^if  ( isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Argument_Swapping]^if  ( currentBlock.isHoisted.isHoisted )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Argument_Swapping]^if  ( currentBlock )  {^523^^^^^516^529^if  ( currentBlock.isHoisted )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Wrong_Literal]^return true;^524^^^^^516^529^return false;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Variable_Misuse]^for  ( parent = thatBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Argument_Swapping]^for  ( thatBlock = currentBlock;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Variable_Misuse]^for  ( currentBlock = parent;^520^^^^^516^529^for  ( currentBlock = thatBlock;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Variable_Misuse]^currentBlock = thatBlock.getParent (  )  )  {^522^^^^^516^529^currentBlock = currentBlock.getParent (  )  )  {^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Variable_Misuse]^return thatBlock == this;^528^^^^^516^529^return currentBlock == this;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
[BugLab_Wrong_Operator]^return currentBlock != this;^528^^^^^516^529^return currentBlock == this;^[CLASS] BasicBlock  [METHOD] provablyExecutesBefore [RETURN_TYPE] boolean   BasicBlock thatBlock [VARIABLES] BasicBlock  currentBlock  parent  thatBlock  boolean  isHoisted  
