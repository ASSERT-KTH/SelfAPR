[BugLab_Wrong_Literal]^boolean allowMove = false;^145^^^^^140^150^boolean allowMove = true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[BugLab_Variable_Misuse]^this.node = parent;^204^^^^^202^205^this.node = node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Wrong_Operator]^if  ( graph != null || graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Wrong_Operator]^if  ( graph == null && graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Wrong_Operator]^if  ( graph != null && graph.getModuleCount (  )  == 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Wrong_Literal]^if  ( graph != null && graph.getModuleCount (  )  > 2 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[BugLab_Variable_Misuse]^while  ( null.hasNext (  )  )  {^104^^^^^89^119^while  ( it.hasNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( decl.module != null && graph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( decl.module != null && moduleGraph.dependsOn ( module, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( deepestModule != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( decl.module != null && deepestDependency.dependsOn ( moduleGraph, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( deepestDependency != null && moduleGraph.dependsOn ( decl.module, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( decl.module != null || moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( decl.module == null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( parent == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( destParent != null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent = compiler.getNodeForCodeInsertion ( module ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^destParent = deepestDependency.getNodeForCodeInsertion ( compiler ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleVarParentMap.put ( module, destParent ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^moduleVarParentMap.put ( destParent, deepestDependency ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  == Token.VAR || declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  != Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  < 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 0 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( var ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, root ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node var = new Node ( Token.VAR, decl.node.node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node var = new Node ( Token.VAR, decl ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( var ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declParent.removeChild ( decl.node.node ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( root ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node var = new Node ( Token.VAR, decl.node.node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node var = new Node ( Token.VAR, decl ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node destParent = moduleVarParentMap.get ( module ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node destParent = deepestDependency.get ( moduleVarParentMap ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node declParent = var.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Node decl.nodeParent = decl.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleVarParentMap.put ( deepestDependency, root ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node declParent = parent.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( var.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( var ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declParent.removeChild ( decl.node.node ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declParent.removeChild ( decl ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( root ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( var ) ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleVarParentMap.put ( deepestDependency, parent ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( decl.getType (  )  == Token.VAR && declParentParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  >= 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 2 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, parent ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, var ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, root ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Declaration decl = 1.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleGraph.dependsOn ( module, decl.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleGraph.dependsOn ( deepestDependency, module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^moduleGraph.dependsOn ( decl.module, deepestDependency )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^moduleVarParentMap.put ( deepestDependency, var ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( info.allowMove && module != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( allowMove && deepestDependency != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( info.allowMove || deepestDependency != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( info.allowMove && deepestDependency == null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( declParentParent.getType (  )  == Token.VAR && decl.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  >= Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  == 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( parent ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declParent.removeChild ( decl ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, parent ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( root ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( parent ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( var == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, var ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( root ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^moduleGraph.dependsOn ( deepestDependency, decl )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node declParent = root.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  <= Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node destParent = 2.get ( deepestDependency ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( parent ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  >  )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( parent ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Declaration decl = this.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^moduleGraph.dependsOn ( deepestDependency, decl.module.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( moduleGraph != null && decl.module.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declParent.getType (  )  > Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declParent.removeChild ( node ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^destParent.addChildToFront ( root ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^JSModule deepestDependency = module;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^JSModule deepestDependency = info.deepestModule.deepestModule;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^JSModule deepestDependency = info;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node declParent = node.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( module == null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( deepestModule != null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^deepestModule = moduleGraph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, module ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^deepestModule = graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^deepestModule = m.getDeepestCommonDependencyInclusive ( graph, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^graph.getDeepestCommonDependencyInclusive ( module, deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^graph.getDeepestCommonDependencyInclusive ( m, module ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^deepestModule = module;^166^^^^^158^172^deepestModule = m;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^deepestModule = graph.getDeepestCommonDependencyInclusive ( module, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( module != null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( declModule != null && module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( declModuleeclModule != null && d.module != d )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( d.module != null && declModule != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declModule != null || d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declModule == null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( declModule != null && d.module == declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^182^^^^^179^187^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^declModule = module;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declModule = d.module.module;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^declModule = d;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^186^^^^^179^187^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return null.iterator (  ) ;^194^^^^^193^195^return declarations.iterator (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^222^^^^^213^226^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node ancestor : node.getAncestors (  )  )  {^214^^^^^213^226^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^switch  ( var.getType (  )  )  {^215^^^^^213^226^switch  ( ancestor.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^225^^^^^213^226^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^NamedInfo info = v.get ( namedInfo ) ;^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( info != null )  {^233^^^^^231^238^if  ( info == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^namedInfo.put ( info, v ) ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^boolean recursive = true;^247^^^^^243^259^boolean recursive = false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( rootNode.getType (  )  < Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( name.equals ( scopeFuncName )  )  {^251^^^^^243^259^if  ( scopeFuncName.equals ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^recursive = false;^252^^^^^243^259^recursive = true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^String scopeFuncName = parent.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^String scopeFuncName = var.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^String scopeFuncName = node.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !allowMove )  {^256^^^^^243^259^if  ( !recursive )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^String varame = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( compiler.isEmpty (  )  || name.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( name.isEmpty (  )  && compiler.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^Var v = name.getScope (  ) .getVar ( t ) ;^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( v == null && !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( v != null || !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( recursive )  {^284^^^^^264^294^if  ( info.allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( info )  {^284^^^^^264^294^if  ( info.allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( maybeProcessDeclaration ( t, root, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( maybeProcessDeclaration ( t, n, var, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( maybeProcessDeclaration ( parent, n, t, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( maybeProcessDeclaration ( t, parent, n, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( info, t, name ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( t, name, info ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( name, info, t ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( hasConditionalAncestor ( node )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^info.allowMove = true;^287^^^^^264^294^info.allowMove = false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( hasConditionalAncestor ( parent )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( maybeProcessDeclaration ( t, n, node, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( maybeProcessDeclaration ( t, n, info, parent )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( hasConditionalAncestor ( var )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( info, t, name ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( t, name, info ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( maybeProcessDeclaration ( t, rootNode, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( maybeProcessDeclaration ( info, n, parent, t )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( maybeProcessDeclaration ( t, info, parent, n )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( hasConditionalAncestor ( root )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( maybeProcessDeclaration ( t, var, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^processReference ( name, info, t ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node gramps = root.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( canMoveValue ( n.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, var )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, info )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, parent, node )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( gramps.getModule (  ) , name, parent, t )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, var, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, rootNode )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , name, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( root )  )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , rootNode, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, n, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, parent )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, info )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , var, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, root, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, node )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , name, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.0 )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( var.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == name )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^} else if  ( child.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == current )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN || current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( current.getType (  )  != Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  != child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^348^^^^^338^349^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( nodeParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isExpressionNode ( current )  && canMoveValue ( currentParent.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isExpressionNode ( currentParentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return current.addDeclaration ( new Declaration ( t.getModule (  ) , info, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, parent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return currentParent.addDeclaration ( new Declaration ( t.getModule (  ) , current, info, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , parent, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node nameParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( parent.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( root.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isExpressionNode ( currentParentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, n, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return current.addDeclaration ( new Declaration ( t.getModule (  ) , info, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, n, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return current.addDeclaration ( new Declaration ( t.getModule (  ) , info, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^348^^^^^333^363^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node rootParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( node.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node nameParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( var.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( n.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , rootNode, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, var, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return currentParent.addDeclaration ( new Declaration ( t.getModule (  ) , current, info, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == var )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( current.getType (  )  >= Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  > child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( varParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, n, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, var, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node varParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node nParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( name )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( n.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, var, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rootParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isExpressionNode ( current )  && canMoveValue ( currentParent.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( relationship != null || name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( relationship == null && name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, n, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return parent.addDeclaration ( new Declaration ( t.getModule (  ) , info, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , node, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , parent, node, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( gramps.getModule (  ) , parent, t, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, node, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, root, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , parent, info, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( gramps.getModule (  ) , parent, t, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , var, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , parent, node, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( gramps ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^SubclassRelationship relationship = parent.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( n ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return parent.addDeclaration ( new Declaration ( t.getModule (  ) , info, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, rootNode, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , parent, info, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , parent, n, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, root, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = var;^351^^^^^336^366^child = current;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return name.addDeclaration ( new Declaration ( t.getModule (  ) , info, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^320^^^^^305^335^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, name, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^return info.addDeclaration ( new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^327^^^^^312^342^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, parent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^353^^^^^338^368^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, n, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^366^^^^^351^381^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^369^^^^^354^384^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , root, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, gramps, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, gramps, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , current, parent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , node, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^new Declaration ( t.getModule (  ) , parent, name, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node child = parent;^331^^^^^316^346^Node child = name;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( name ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^switch  ( gramps.getType (  )  )  {^314^^^^^299^329^switch  ( parent.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( canMoveValue ( node.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, var, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node current : gramps.getAncestors (  )  )  {^335^^^^^320^350^for  ( Node current : name.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node varParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^canMoveValue ( name.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( name == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( n == null && NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( n != null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( node.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  >= Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  != Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.ARRAYLIT && n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  >= Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  <= Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( node )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^398^^^^^393^403^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = name.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^for  ( Node child = n.getFirstChild (  ) ; child == null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( n )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( name )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = n.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^402^^^^^393^403^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = gramps.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( root )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^398^^^^^376^406^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = name.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node name = n.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^for  ( Node child = n.getFirstChild (  ) ; child == null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( root )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^398^^^^^395^400^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( n )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = root.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^402^^^^^376^406^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( root.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( n )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return name.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^return functionName.getType (  )  == Token.NAME || ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^return functionName.getType (  )  != Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  && functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node functionName = parent.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node functionName = name.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return n.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^( rootNode.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^( node.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( name.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( var )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = var.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = parent.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = parent.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = node.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( parent )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = var.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( var )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = parent.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^return functionName.getType (  )  <= Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node functionName = node.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = node.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return node.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^( n.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( node.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = gramps.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = rootNode.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^385^^^^^383^403^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( var.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  <= Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  != Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node child = node.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = name.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( name )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = node.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node functionName = rootNode.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^( root.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = var.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !canMoveValue ( node )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^385^^^^^376^406^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( gramps == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^Node functionName = var.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^return root.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^( var.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^} else if  ( gramps.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^child = var.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^405^^^^^376^406^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Wrong_Literal]^boolean allowMove = false;^145^^^^^140^150^boolean allowMove = true;^[CLASS] NamedInfo  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( declModule == null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Wrong_Operator]^if  ( deepestModule != null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^deepestModule = graph.getDeepestCommonDependencyInclusive ( declModule, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, declModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Argument_Swapping]^deepestModule = m.getDeepestCommonDependencyInclusive ( graph, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Argument_Swapping]^deepestModule = deepestModule.getDeepestCommonDependencyInclusive ( m, graph ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Argument_Swapping]^deepestModule = graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^graph.getDeepestCommonDependencyInclusive ( declModule, deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Argument_Swapping]^graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^deepestModule = deepestModule;^166^^^^^158^172^deepestModule = m;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^graph.getDeepestCommonDependencyInclusive ( m, declModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[BugLab_Variable_Misuse]^if  ( declModule != null && m != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Argument_Swapping]^if  ( declModuleeclModule != null && d.module != d )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Argument_Swapping]^if  ( d != null && declModule.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Argument_Swapping]^if  ( d.module != null && declModule != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Wrong_Operator]^if  ( declModule != null || d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Wrong_Operator]^if  ( declModule == null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Wrong_Operator]^if  ( declModule != null && d.module == declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Wrong_Literal]^return true;^182^^^^^179^187^return false;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Variable_Misuse]^declModule = deepestModule;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Argument_Swapping]^declModule = d.module.module;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Argument_Swapping]^declModule = d;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Wrong_Literal]^return false;^186^^^^^179^187^return true;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[BugLab_Variable_Misuse]^return 4.iterator (  ) ;^194^^^^^193^195^return declarations.iterator (  ) ;^[CLASS] NamedInfo  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
