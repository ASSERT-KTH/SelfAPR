[BugLab_Wrong_Literal]^boolean defFound = true;^390^^^^^385^395^boolean defFound = false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[BugLab_Wrong_Literal]^boolean crossed = true;^391^^^^^386^396^boolean crossed = false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[BugLab_Variable_Misuse]^this.callback1 = callback2;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^this.callback2 = callback1;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^this.use = def;^397^^^^^395^398^this.use = use;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return v1.index  <<  v2.index;^71^^^^^70^72^return v1.index - v2.index;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] compare [RETURN_TYPE] int   Var v1 Var v2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( cfg, t, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, liveness, cfg.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^computeVariableNamesInterferenceGraph ( liveness, cfg, t.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^computeVariableNamesInterferenceGraph ( cfg, t, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( parent )  || NodeUtil.isFunction ( n )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^if  ( parent.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( colorings )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( colorings.isEmpty (  )  && !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( parent )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( v2 ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^GraphNode<Var, ?> vNode = var.peek (  ) .getGraph (  ) .getNode ( colorings ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( vNode != null )  {^135^^^^^120^150^if  ( vNode == null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( v1 ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^Var coalescedVar = var.peek (  ) .getPartitionSuperNode ( colorings ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( use ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^while  ( pseudoName.getScope (  ) .isDeclared ( t, true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Literal]^while  ( t.getScope (  ) .isDeclared ( pseudoName, false )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null || coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( allMergedNames.size (  )  != 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( !vNode.getValue (  ) .equals ( v2 )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( n )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^if  ( !vNode.getValue (  ) .equals ( parent )  && NodeUtil.isVar ( coalescedVar )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  || NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^removeVarDeclaration ( parent ) ;^186^^^^^171^201^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( var )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^if  ( iVar.peek (  ) .getGraph (  ) .getNode ( colorings )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( var )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( v2 )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^coalescedVar.equals ( iVar.peek (  ) .getPartitionSuperNode ( colorings )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( v1 )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^coalescedVar.equals ( 0.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^pseudoName = Joiner.on ( "_" ) .join ( this ) ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( !vNode.getValue (  ) .equals ( var )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( vNode.getValue (  ) .equals ( var )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Argument_Swapping]^if  ( coalescedVar.getValue (  ) .equals ( vNode )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^removeVarDeclaration ( parent ) ;^152^^^^^137^167^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( vNode.getValue (  ) .equals ( v1 )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( n )  )  {^151^^^^^136^166^if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Wrong_Operator]^if  ( allMergedNames.size (  )  <= 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( 4.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^coalescedVar.equals ( 1.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( !vNode.getValue (  ) .equals ( v1 )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[BugLab_Variable_Misuse]^if  ( !escaped.contains ( var )  )  {^200^^^^^185^215^if  ( !escaped.contains ( v )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isFunction ( var.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.createNode ( v1 ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isFunction ( v1.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.createNode ( var ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isFunction ( v2.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v = null.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.createNode ( v2 ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^if  ( cfgNode.isImplicitReturn ( cfg )  )  {^218^^^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( var == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1 == var || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^if  ( v2 == v1 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1 == v2 && !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1 >= v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && var.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1.getParentNode (  ) .getType (  )  == Token.2 && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP || v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1.getParentNode (  ) .getType (  )  != Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v2 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v2OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( state.getIn (  ) .isLive ( v2OutLive )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v1 )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v2OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  && ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  || state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( callback2, checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, callback2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( callback2, checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, callback2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( v1.getIn (  ) .isLive ( state )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( var )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( v2.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( state )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( var )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( state.getIn (  ) .isLive ( v2 )  && state.getIn (  ) .isLive ( v1 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^for  ( Iterator<Var> scope = i1.getVars (  ) ; i1.hasNext (  ) ; )  {^227^^^^^212^242^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1 != v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^if  ( v2.getParentNode (  ) .getType (  )  == Token.LP && v1.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v1 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( v1OutLive.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( state && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v1OutLive )  )  || ( v2 && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( null.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && usePseudoNames )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^} else if  (  ( v2OutLive.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && state )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1 <= v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1.getParentNode (  ) .getType (  )  == Token.4 && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1.getParentNode (  ) .getType (  )  < Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v1 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v1 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( usePseudoNames && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v2 = 2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean vOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^boolean stateOutLive = v1.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean v2OutLive = this.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean varOutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^boolean stateOutLive = v2.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v2 = 3.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^!interferenceGraph.hasNode ( v1 )  )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean varOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean vOutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v2.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( 0.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v1 = 4.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v2 = 4.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean v2OutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^!interferenceGraph.hasNode ( var )  )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( var.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( 3.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^} else if  (  ( state.getIn (  ) .isLive ( v )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^for  ( Iterator<Var> null = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^229^^^^^214^244^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v1.getParentNode (  ) .getType (  )  == Token.0 && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^if  ( v1.getParentNode (  ) .getType (  )  <= Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( v2 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^new ArrayList<CombinedLiveRangeChecker> ( varsInScope + varsInScope ) ;^224^225^^^^209^239^new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Wrong_Operator]^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope - varsInScope ) ;^223^224^225^^^208^238^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^Var v1 = this.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean v2OutLive = null.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^for  ( DiGraphNode<Node, Branch> 4Node : cfg.getDirectedGraphNodes (  )  )  {^216^^^^^201^231^for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^if  ( cfg.isImplicitReturn ( null )  )  {^218^^^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean v1OutLive = 1.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^boolean v2OutLive = 4.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Argument_Swapping]^checkRanges ( cfgNode, rangesToCheck.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^return 1;^264^^^^^249^279^return interferenceGraph;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[BugLab_Variable_Misuse]^new CombinedCfgNodeLiveRangeChecker ( this ) ;^280^^^^^277^282^new CombinedCfgNodeLiveRangeChecker ( rangesToCheck ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( callbacks, root, compiler ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^callback.visit ( t, n, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback.visit ( n, t, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback.visit ( t, parent, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( CombinedLiveRangeChecker.shouldVisit ( parent )  )  {^301^^^^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback.visit ( parent, n, t ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^callback1.visit ( t, parent, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^callback1.visit ( t, n, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback1.visit ( parent, n, t ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback1.visit ( t, parent, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^callback2.visit ( t, n, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( v2OutLive || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( checker2.crossed || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( callback1.crossed || usePseudoNames )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( callback1.crossed || checker2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( callback1.crossed && callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Var v1 = checker2.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Var v2 = checker2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node var = value.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node var = var.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node parent = value.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isForIn ( var )  )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^} else if  ( parent.getChildCount (  )  == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^} else if  ( var.getChildCount (  )  != 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^} else if  ( var.getChildCount (  )  == 2 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^var.removeChild ( value ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( value, var ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( var.getType (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  >= Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^assign = NodeUtil.newExpr ( var ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, value, value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, name, var ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node value = var.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, var, value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^Node assign = new Node ( Token.ASSIGN, value, name ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^var.removeChild ( value ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^parent.replaceChild ( var, value ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( var.hasChildren (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node value = value.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( value, var ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node assign = new Node ( Token.ASSIGN, name, parent ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^var.removeChild ( value ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^} else if  ( value.getChildCount (  )  == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( value.hasChildren (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^var.removeChild ( value ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^parent.replaceChild ( name, var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^} else if  ( var.getChildCount (  )  == 0 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^assign = NodeUtil.newExpr ( value ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^parent.replaceChild ( var, var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^return v2;^401^^^^^400^402^return def;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] getDef [RETURN_TYPE] Var   [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return  ( NodeUtil.isName ( n ) &&  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( !defFound && isAssignTo ( v1, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( !defFound && isAssignTo ( parent, n, def )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( !defFound || isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^defFound = false;^415^^^^^413^421^defFound = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( !defFound && isAssignTo ( var, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( !defFound && isAssignTo ( n, def, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( defFound &&  ( use == parentull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( v2OutLive &&  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( defFound &&  ( v2 == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( defFound ||  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( defFound &&  ( use == null && isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( defFound &&  ( use != null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^crossed = false;^419^^^^^413^421^crossed = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( defFound &&  ( var == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && v2.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^return parent != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^return name != null && NodeUtil.isName ( name )  && v.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^return parentame != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^var.getName (  ) .equals ( parent.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^NodeUtil.isAssignmentOp ( parent ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^return parent.hasChildren (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^return false;^428^^^^^423^442^return true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Literal]^return true;^434^^^^^423^442^return false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.checker1 )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && v.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Argument_Swapping]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[BugLab_Wrong_Operator]^return v1.index  <  v2.index;^71^^^^^70^72^return v1.index - v2.index;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Var v1 Var v2 [VARIABLES] boolean  Var  v1  v2  
[BugLab_Variable_Misuse]^if  ( CombinedLiveRangeChecker.shouldVisit ( parent )  )  {^301^^^^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^callback.visit ( t, parent, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^callback.visit ( n, t, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^callback.visit ( t, parent, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^this.callback1 = callback2;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CombinedLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  
[BugLab_Argument_Swapping]^callback1.visit ( t, parent, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( callback2.crossed || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Argument_Swapping]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Argument_Swapping]^if  ( callback1.crossed || callback2 )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Wrong_Operator]^if  ( callback1.crossed && callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Variable_Misuse]^Var v1 = callback2.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Variable_Misuse]^Var v2 = callback1.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Argument_Swapping]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Wrong_Literal]^boolean defFound = true;^390^^^^^385^395^boolean defFound = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Wrong_Literal]^boolean crossed = true;^391^^^^^386^396^boolean crossed = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[BugLab_Variable_Misuse]^this.def = use;^396^^^^^395^398^this.def = def;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[BugLab_Variable_Misuse]^this.use = def;^397^^^^^395^398^this.use = use;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[BugLab_Wrong_Operator]^return  ( NodeUtil.isName ( n ) &&  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[BugLab_Wrong_Operator]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[BugLab_Variable_Misuse]^if  ( !defFound && isAssignTo ( def, parent, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( !defFound && isAssignTo ( use, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( !defFound || isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Literal]^defFound = false;^415^^^^^413^421^defFound = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( !defFound && isAssignTo ( parent, n, def )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( defFound &&  ( use == parentull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( crossed &&  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( defFound &&  ( def == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( use &&  ( defFound == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Argument_Swapping]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( defFound ||  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( defFound &&  ( use == null && isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( defFound &&  ( use != null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Wrong_Literal]^crossed = false;^419^^^^^413^421^crossed = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && use.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^return parent != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^return name != null && NodeUtil.isName ( name )  && use.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^return parentame != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^var.getName (  ) .equals ( parent.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^NodeUtil.isAssignmentOp ( parent ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^return parent.hasChildren (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Literal]^return false;^428^^^^^423^442^return true;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Literal]^return true;^434^^^^^423^442^return false;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^return varame != null && NodeUtil.isName ( name )  && n.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[BugLab_Argument_Swapping]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[BugLab_Wrong_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[BugLab_Wrong_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
