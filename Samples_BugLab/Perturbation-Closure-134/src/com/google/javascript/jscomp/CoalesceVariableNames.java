[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new LiveVariablesAnalysis (  scope, compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new LiveVariablesAnalysis ( cfg,  compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new LiveVariablesAnalysis ( cfg, scope ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis (  scope, compiler ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg,  compiler ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( cfg, t, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph (  cfg, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, liveness, cfg.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t,  liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( liveness, cfg, t.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeVariableNamesInterferenceGraph ( liveness, cfg, t.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeVariableNamesInterferenceGraph (  cfg, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeVariableNamesInterferenceGraph ( t, liveness, cfg.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeVariableNamesInterferenceGraph ( t,  liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeVariableNamesInterferenceGraph ( t, cfg.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new GreedyGraphColoring<Var, Void> (  coloringTieBreaker ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^new GreedyGraphColoring<Var, Void> ( interferenceGraph ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> (  coloringTieBreaker ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[buglab_swap_variables]^if  ( n.isEmpty (  )  || !NodeUtil.isName ( colorings )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( parent )  || NodeUtil.isFunction ( n )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( parent.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( colorings )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^GraphNode<Var, ?> vNode = var.peek (  ) .getGraph (  ) .getNode ( colorings ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^Var coalescedVar = var.peek (  ) .getPartitionSuperNode ( colorings ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^while  ( pseudoName.getScope (  ) .isDeclared ( t, true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^while  ( t.getScope (  ) .isDeclared ( pseudoNamerue )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^while  ( t.getScope (  ) .isDeclared (  true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( !vNode.getValue (  ) .equals ( parent )  && NodeUtil.isVar ( coalescedVar )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( iVar.peek (  ) .getGraph (  ) .getNode ( colorings )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^coalescedVar.equals ( iVar.peek (  ) .getPartitionSuperNode ( colorings )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( coalescedVar.getValue (  ) .equals ( vNode )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[buglab_swap_variables]^if  ( cfgNode.isImplicitReturn ( cfg )  )  {^218^^^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^if  ( v2 == v1 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^if  ( v2.getParentNode (  ) .getType (  )  == Token.LP && v1.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( state.getIn (  ) .isLive ( v2 )  && state.getIn (  ) .isLive ( v1 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1 ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2 ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker (  checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1 ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2 ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1 ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2 ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker (  checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1 ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2 ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( v1.getIn (  ) .isLive ( state )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( v2.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( state )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( state.getIn (  ) .isLive ( v1OutLive )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1 && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( v2OutLive.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && state )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( state.getIn (  ) .isLive ( v2OutLive )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v1 )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v2OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^for  ( Iterator<Var> scope = i2.getVars (  ) ; i2.hasNext (  ) ; )  {^229^^^^^214^244^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^boolean stateOutLive = v1.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^boolean stateOutLive = v2.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^checkRanges ( cfgNode, rangesToCheck.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^checkRanges (  cfgNode.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^checkRanges ( rangesToCheck.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, callbacks, root ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse ( callbacks, root, compiler ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeTraversal.traverse (  root, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit ( parent, n, t ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit (  n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit ( t, parent, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit ( t,  parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit ( t, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback1.visit ( parent, n, t ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback1.visit (  n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback1.visit ( t, parent, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback1.visit ( t,  parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback1.visit ( t, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback2.visit ( parent, n, t ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback2.visit (  n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback2.visit ( t,  parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback2.visit ( t, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild (  var ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild ( parent ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN, value, name ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN,  value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^Node assign = new Node ( Token.ASSIGN, name ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^Node assign = new Node ( Token. name, value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild ( assign, var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild ( var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild (  var ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^NodeUtil.removeChild ( parent ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild ( name, var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild (  name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^parent.replaceChild ( var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def,  parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( n, def, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( !defFound && isAssignTo (  n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( defFound &&  ( use == null || isReadFrom ( use )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( use &&  ( defFound == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( defFound &&  ( use == null || isReadFrom (  n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return varame != null && NodeUtil.isName ( name )  && n.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[buglab_swap_variables]^callback.visit (  n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback.visit ( t, parent, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback.visit ( t,  parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback.visit ( t, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback.visit ( parent, n, t ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback1.visit ( parent, n, t ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback1.visit (  n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback1.visit ( t, parent, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback1.visit ( t,  parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback1.visit ( t, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback2.visit ( n, t, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback2.visit (  n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback2.visit ( t,  parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^callback2.visit ( t, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^if  ( callback2 || callback1.crossed.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[buglab_swap_variables]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[buglab_swap_variables]^interferenceGraph.connectIfNotFound ( v1, null ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def,  parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( def, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( !defFound && isAssignTo (  n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( !defFound && isAssignTo ( n, def, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( defFound &&  ( use == null || isReadFrom ( use )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( defFound &&  ( use == null || isReadFrom (  n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( n )  && parent.getName (  ) .equals ( n.getString (  )  )  && var != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^return varame != null && NodeUtil.isName ( name )  && n.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[buglab_swap_variables]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[buglab_swap_variables]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[buglab_swap_variables]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
