[buglab_swap_variables]^throw new ModuleDependenceException ( String.format ( "Modules not in moduleendency order: %s preceded %s", dep.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) ,  dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) .getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^if  ( modulesByDepth == depth.size (  )  )  {^90^^^^^72^95^if  ( depth == modulesByDepth.size (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^depth = Math.max ( depDepth, depth + 1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^depth = Math.max (  depDepth + 1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^depth = Math.max ( depth + 1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^Integer moduleDepthsDepth = dep.get ( dep ) ;^79^^^^^72^95^Integer depDepth = moduleDepths.get ( dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^moduleDepths.put (  depth ) ;^89^^^^^72^95^moduleDepths.put ( module, depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^moduleDepths.put ( module ) ;^89^^^^^72^95^moduleDepths.put ( module, depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^modulesByDepth.get ( module ) .add ( depth ) ;^93^^^^^72^95^modulesByDepth.get ( depth ) .add ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[buglab_swap_variables]^return moduleDepthsDepths.get ( module ) ;^125^^^^^124^126^return moduleDepths.get ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDepth [RETURN_TYPE] int   JSModule module [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^return module.get ( moduleDepths ) ;^125^^^^^124^126^return moduleDepths.get ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDepth [RETURN_TYPE] int   JSModule module [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^Set<JSModule> deps = src.get ( dependencyMap ) ;^133^^^^^132^140^Set<JSModule> deps = dependencyMap.get ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put ( deps, src ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put (  deps ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put ( src ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^return m.contains ( deps ) ;^139^^^^^132^140^return deps.contains ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^if  ( dependsOn ( m, m1 )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn (  m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn ( m21, m )  && dependsOn ( m, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn ( m1 )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn ( m2, m )  && dependsOn ( m1, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn ( m1, m )  && dependsOn (  m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( m1Depthnt depth = Math.min ( i, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min (  m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min ( m2Depth, m1Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min ( m1Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int m1Depth = Math.min ( depth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( depthnt i = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min ( m21Depth, mDepth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min ( m1Depth2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int depth = Math.min ( m1DepthDepth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( modulesAtDepthnt i = i.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^for  ( int i = modulesAtDepthodulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( dependsOn ( m11, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^JSModule m = i.get ( modulesAtDepth ) ;^161^^^^^151^168^JSModule m = modulesAtDepth.get ( i ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^List<JSModule> modulesAtDepth = depth.get ( modulesByDepth ) ;^157^^^^^151^168^List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[buglab_swap_variables]^if  ( m1 == m2 || dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^if  ( m2 == m1 || dependsOn (  m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^if  ( m2 == m1 || dependsOn ( m2 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^} else if  ( dependsOn ( m2, m1 )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^} else if  ( dependsOn (  m2 )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^} else if  ( dependsOn ( m1 )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^return getDeepestCommonDependency ( m2, m1 ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^return getDeepestCommonDependency (  m2 ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^return getDeepestCommonDependency ( m1 ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dep = getDeepestCommonDependencyInclusive ( iter, dep.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dep = getDeepestCommonDependencyInclusive (  iter.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dep = getDeepestCommonDependencyInclusive ( dep.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^Set<JSModule> deps = m.get ( dependencyMap ) ;^210^^^^^209^218^Set<JSModule> deps = dependencyMap.get ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps ( m, deps ) ;^215^^^^^209^218^addDeps ( deps, m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps (  m ) ;^215^^^^^209^218^addDeps ( deps, m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps ( deps ) ;^215^^^^^209^218^addDeps ( deps, m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put (  deps ) ;^216^^^^^209^218^dependencyMap.put ( m, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put ( deps, m ) ;^216^^^^^209^218^dependencyMap.put ( m, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^dependencyMap.put ( m ) ;^216^^^^^209^218^dependencyMap.put ( m, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps ( dep, deps ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps (  dep ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps ( depss, dep ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^addDeps ( deps ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^fileRefs.put ( module.getName (  ) , jsFile ) ;^242^^^^^238^261^fileRefs.put ( jsFile.getName (  ) , module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^fileRefs.put ( jsFile.getName (  )  ) ;^242^^^^^238^261^fileRefs.put ( jsFile.getName (  ) , module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^if  ( depModule != module )  {^252^^^^^238^261^if  ( module != depModule )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^CompilerInput file = path.iterator (  ) .next (  ) .getByName ( refModules ) ;^250^^^^^238^261^CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^Collection<JSModule> refModules = path.get ( fileRefs ) ;^247^^^^^238^261^Collection<JSModule> refModules = fileRefs.get ( path ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[buglab_swap_variables]^if  ( m2 == m1 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[buglab_swap_variables]^return d1 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[buglab_swap_variables]^return m2 < d1 ? -1 : d2 == d1 ? d2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[buglab_swap_variables]^return d2 < m1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( d1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[buglab_swap_variables]^return d2 < d1 ? -1 : d2 == d1 ? m1.getName (  ) .compareTo ( m2.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[buglab_swap_variables]^if  ( m2 == m1 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[buglab_swap_variables]^return d1 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[buglab_swap_variables]^return d2 < m2 ? -1 : d2 == d1 ? d1.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[buglab_swap_variables]^return d2 < d1 ? -1 : d2 == d1 ? m1.getName (  ) .compareTo ( m2.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
