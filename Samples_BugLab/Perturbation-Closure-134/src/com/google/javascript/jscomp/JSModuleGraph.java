[BugLab_Wrong_Literal]^private static final long serialVersionUID = 0;^286^^^^^281^291^private static final long serialVersionUID = 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException   [VARIABLES] 
[BugLab_Argument_Swapping]^if  ( dep == null )  {^80^^^^^72^95^if  ( depDepth == null )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^if  ( depDepthDepth == null )  {^80^^^^^72^95^if  ( depDepth == null )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Operator]^if  ( depDepth != null )  {^80^^^^^72^95^if  ( depDepth == null )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", dependentModule.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^throw new ModuleDependenceException ( String.format ( "Modules not in dependentModuleendency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^throw new ModuleDependenceException ( String.format ( "Modules not in moduleendency order: %s preceded %s", dep.getName (  ) , dep.getName (  )  ) , module, dep ) ;^81^82^83^84^^72^95^throw new ModuleDependenceException ( String.format ( "Modules not in dependency order: %s preceded %s", module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^module.getName (  ) , module.getName (  )  ) , module, dep ) ;^83^84^^^^72^95^module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^if  ( modulesByDepth == depth.size (  )  )  {^90^^^^^72^95^if  ( depth == modulesByDepth.size (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Operator]^if  ( depth != modulesByDepth.size (  )  )  {^90^^^^^72^95^if  ( depth == modulesByDepth.size (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^depth = Math.max ( depDepth, depth + 1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Operator]^depth = Math.max ( depth, depDepth  <  1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Literal]^depth = Math.max ( depth, depDepth + depth ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Literal]^int depth = -1;^77^^^^^72^95^int depth = 0;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^Integer moduleDepth = moduleDepths.get ( dep ) ;^79^^^^^72^95^Integer depDepth = moduleDepths.get ( dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^Integer moduleDepthsDepth = dep.get ( dep ) ;^79^^^^^72^95^Integer depDepth = moduleDepths.get ( dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^for  ( JSModule dep : dependentModule.getDependencies (  )  )  {^78^^^^^72^95^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^module.getName (  ) , dep.getName (  )  ) , dependentModule, dep ) ;^83^84^^^^72^95^module.getName (  ) , dep.getName (  )  ) , module, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Operator]^depth = Math.max ( depth, depDepth  ^  1 ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Wrong_Literal]^depth = Math.max ( depth, depDepth  ) ;^86^^^^^72^95^depth = Math.max ( depth, depDepth + 1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^moduleDepths.put ( dependentModule, depth ) ;^89^^^^^72^95^moduleDepths.put ( module, depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^moduleDepths.put ( depth, module ) ;^89^^^^^72^95^moduleDepths.put ( module, depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^modulesByDepth.get ( depth ) .add ( dependentModule ) ;^93^^^^^72^95^modulesByDepth.get ( depth ) .add ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Argument_Swapping]^modulesByDepth.get ( module ) .add ( depth ) ;^93^^^^^72^95^modulesByDepth.get ( depth ) .add ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule[])   JSModule[] modulesInDepOrder [VARIABLES] Integer  depDepth  boolean  JSModule[]  modulesInDepOrder  JSModule  dep  dependentModule  module  List  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  
[BugLab_Variable_Misuse]^this.module = dependentModule;^294^^^^^291^296^this.module = module;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule)   String message JSModule module JSModule dependentModule [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  String  message  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Literal]^return Iterables.getOnlyElement ( modulesByDepth.get ( -1 )  ) ;^115^^^^^114^116^return Iterables.getOnlyElement ( modulesByDepth.get ( 0 )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getRootModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return dependentModuleDepths.get ( module ) ;^125^^^^^124^126^return moduleDepths.get ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDepth [RETURN_TYPE] int   JSModule module [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^return moduleDepthsDepths.get ( module ) ;^125^^^^^124^126^return moduleDepths.get ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDepth [RETURN_TYPE] int   JSModule module [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^return module.get ( moduleDepths ) ;^125^^^^^124^126^return moduleDepths.get ( module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDepth [RETURN_TYPE] int   JSModule module [VARIABLES] JSModule  dep  dependentModule  module  List  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^Set<JSModule> deps = dependencyMap.get ( m ) ;^133^^^^^132^140^Set<JSModule> deps = dependencyMap.get ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^Set<JSModule> deps = src.get ( dependencyMap ) ;^133^^^^^132^140^Set<JSModule> deps = dependencyMap.get ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^Set<JSModule> deps = 4.get ( src ) ;^133^^^^^132^140^Set<JSModule> deps = dependencyMap.get ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( deps != null )  {^134^^^^^132^140^if  ( deps == null )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^deps = getTransitiveDepsDeepestFirst ( m ) ;^135^^^^^132^140^deps = getTransitiveDepsDeepestFirst ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^deps = getTransitiveDepsDeepestFirst ( module ) ;^135^^^^^132^140^deps = getTransitiveDepsDeepestFirst ( src ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dependencyMap.put ( m, deps ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^dependencyMap.put ( deps, src ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dependencyMap.put ( module, deps ) ;^136^^^^^132^140^dependencyMap.put ( src, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return deps.contains ( src ) ;^139^^^^^132^140^return deps.contains ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^return m.contains ( deps ) ;^139^^^^^132^140^return deps.contains ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return 4.contains ( m ) ;^139^^^^^132^140^return deps.contains ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] dependsOn [RETURN_TYPE] boolean   JSModule src JSModule m [VARIABLES] JSModule  dep  dependentModule  m  module  src  List  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^int m2Depth = getDepth ( m1 ) ;^152^^^^^151^168^int m1Depth = getDepth ( m1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^int srcDepth = getDepth ( m1 ) ;^152^^^^^151^168^int m1Depth = getDepth ( m1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^int srcDepth = getDepth ( m2 ) ;^153^^^^^151^168^int m2Depth = getDepth ( m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^int moduleDepth = getDepth ( m2 ) ;^153^^^^^151^168^int m2Depth = getDepth ( m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( src, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( src1, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( m1, m )  && dependsOn ( src, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^if  ( dependsOn ( m, m1 )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^if  ( dependsOn ( m11, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^if  ( dependsOn ( m21, m )  && dependsOn ( m, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^if  ( dependsOn ( m1, m )  || dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^return src;^163^^^^^151^168^return m;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int depth = Math.min ( m2Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int depth = Math.min ( m1Depth, m1Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( m2Depthnt depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int depth = Math.min ( srcDepth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( m1Depthnt depth = Math.min ( i, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( m2Depthnt depth = Math.min ( m1Depth, i )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( int m2Depth = Math.min ( m1Depth, depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( depthnt i = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( int depth = Math.min ( mDepth, m12Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( int depth = Math.min ( m21Depth, mDepth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int depth = Math.min ( m1Depth, m2Depth )   <<  1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth > 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int depth = Math.min ( miDepth, m2Depth )  - i; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= m2Depth; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int depth = Math.min ( mdepthDepth, m2Depth )  - depth; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^if  ( dependsOn ( m2, m )  && dependsOn ( m1, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^return module;^163^^^^^151^168^return m;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( m2Depthnt i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int i = srcodulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( mnt i = iodulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )   ||  1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )  - 1; i > 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int i = modulesAtDepth.size (  )  ; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int i = modulesAtDepth.size (  )  - 1; i >= -1; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( m1, m )  && dependsOn ( module, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^JSModule m = modulesAtDepth.get ( m2Depth ) ;^161^^^^^151^168^JSModule m = modulesAtDepth.get ( i ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^JSModule m = i.get ( modulesAtDepth ) ;^161^^^^^151^168^JSModule m = modulesAtDepth.get ( i ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( module1, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^List<JSModule> modulesAtDepth = modulesByDepth.get ( m2Depth ) ;^157^^^^^151^168^List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^List<JSModule> modulesAtDepth = depth.get ( modulesByDepth ) ;^157^^^^^151^168^List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )    instanceof   1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( int i = m.size (  )  - 1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )   <=  1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )  - 1; i == 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int i = modulesAtDepth.size (  )  - m2Depth; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^return m2;^163^^^^^151^168^return m;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( dependsOn ( module, m )  && dependsOn ( m2, m )  )  {^162^^^^^151^168^if  ( dependsOn ( m1, m )  && dependsOn ( m2, m )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Argument_Swapping]^for  ( int depth = Math.min ( m2Depth, m1Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int depth = Math.min ( m1Depth, m2Depth )   ^  1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Literal]^for  ( int depth = Math.min ( m1Depth, m2Depth )  ; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Wrong_Operator]^for  ( int i = modulesAtDepth.size (  )   |  1; i >= 0; i-- )  {^160^^^^^151^168^for  ( int i = modulesAtDepth.size (  )  - 1; i >= 0; i-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int depth = Math.min ( i, m2Depth )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^for  ( int depth = Math.min ( m1Depth, i )  - 1; depth >= 0; depth-- )  {^156^^^^^151^168^for  ( int depth = Math.min ( m1Depth, m2Depth )  - 1; depth >= 0; depth-- )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^List<JSModule> modulesAtDepth = 1.get ( depth ) ;^157^^^^^151^168^List<JSModule> modulesAtDepth = modulesByDepth.get ( depth ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependency [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  depth  i  m1Depth  m2Depth  
[BugLab_Variable_Misuse]^if  ( src == m1 || dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( m2 == module || dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( m1 == m2 || dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( m2 == m1 && dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( m2 >= m1 || dependsOn ( m2, m1 )  )  {^181^^^^^179^188^if  ( m2 == m1 || dependsOn ( m2, m1 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^} else if  ( dependsOn ( src, m2 )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^} else if  ( dependsOn ( m1, src )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^} else if  ( dependsOn ( m2, m1 )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return src;^184^^^^^179^188^return m2;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return src;^182^^^^^179^188^return m1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return m1;^184^^^^^179^188^return m2;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^} else if  ( dependsOn ( m1, module )  )  {^183^^^^^179^188^} else if  ( dependsOn ( m1, m2 )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return getDeepestCommonDependency ( src, m2 ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return getDeepestCommonDependency ( m1, src ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^return getDeepestCommonDependency ( m2, m1 ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return getDeepestCommonDependency ( m1, module ) ;^187^^^^^179^188^return getDeepestCommonDependency ( m1, m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dep = getDeepestCommonDependencyInclusive ( src, iter.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^dep = getDeepestCommonDependencyInclusive ( iter, dep.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dep = getDeepestCommonDependencyInclusive ( m2, iter.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dep = getDeepestCommonDependencyInclusive ( dep, 3.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dep = getDeepestCommonDependencyInclusive ( dep, null.next (  )  ) ;^196^^^^^191^199^dep = getDeepestCommonDependencyInclusive ( dep, iter.next (  )  ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^return src;^198^^^^^191^199^return dep;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDeepestCommonDependencyInclusive [RETURN_TYPE] JSModule   JSModule> modules [VARIABLES] boolean  Iterator  iter  JSModule  dep  dependentModule  m  m1  m2  module  src  Collection  modules  List  modulesAtDepth  modulesByDepth  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^Set<JSModule> deps = dependencyMap.get ( module ) ;^210^^^^^209^218^Set<JSModule> deps = dependencyMap.get ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^Set<JSModule> deps = m.get ( dependencyMap ) ;^210^^^^^209^218^Set<JSModule> deps = dependencyMap.get ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^Set<JSModule> deps = dependencyMap.get ( m2 ) ;^210^^^^^209^218^Set<JSModule> deps = dependencyMap.get ( m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( deps == null )  {^211^^^^^209^218^if  ( deps != null )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^addDeps ( deps, module ) ;^215^^^^^209^218^addDeps ( deps, m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^addDeps ( m, deps ) ;^215^^^^^209^218^addDeps ( deps, m ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^dependencyMap.put ( src, deps ) ;^216^^^^^209^218^dependencyMap.put ( m, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^dependencyMap.put ( deps, m ) ;^216^^^^^209^218^dependencyMap.put ( m, deps ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getTransitiveDepsDeepestFirst [RETURN_TYPE] Set   JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^for  ( JSModule dep : m2.getDependencies (  )  )  {^224^^^^^223^228^for  ( JSModule dep : m.getDependencies (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^deps.add ( m2 ) ;^225^^^^^223^228^deps.add ( dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^addDeps ( modules, dep ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^addDeps ( dep, deps ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^addDeps ( depss, dep ) ;^226^^^^^223^228^addDeps ( deps, dep ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] addDeps [RETURN_TYPE] void   JSModule> deps JSModule m [VARIABLES] JSModule  dep  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  Set  deps  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^for  ( CompilerInput jsFile : m1.getInputs (  )  )  {^241^^^^^238^261^for  ( CompilerInput jsFile : module.getInputs (  )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^fileRefs.put ( jsFile.getName (  ) , src ) ;^242^^^^^238^261^fileRefs.put ( jsFile.getName (  ) , module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^fileRefs.put ( module.getName (  ) , jsFile ) ;^242^^^^^238^261^fileRefs.put ( jsFile.getName (  ) , module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^fileRefs.put ( file.getName (  ) , module ) ;^242^^^^^238^261^fileRefs.put ( jsFile.getName (  ) , module ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( refModules.size (  )  >= 1 )  {^248^^^^^238^261^if  ( refModules.size (  )  > 1 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Literal]^if  ( refModules.size (  )  >  )  {^248^^^^^238^261^if  ( refModules.size (  )  > 1 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( src != depModule )  {^252^^^^^238^261^if  ( module != depModule )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( module != m2 )  {^252^^^^^238^261^if  ( module != depModule )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( depModule != module )  {^252^^^^^238^261^if  ( module != depModule )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( module <= depModule )  {^252^^^^^238^261^if  ( module != depModule )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( !refModules.contains ( module )  )  {^256^^^^^238^261^if  ( !refModules.contains ( depModule )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^CompilerInput file = path.iterator (  ) .next (  ) .getByName ( refModules ) ;^250^^^^^238^261^CompilerInput file = refModules.iterator (  ) .next (  ) .getByName ( path ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( !refModules.contains ( m2 )  )  {^256^^^^^238^261^if  ( !refModules.contains ( depModule )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^depModule.add ( jsFile ) ;^257^^^^^238^261^depModule.add ( file ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( !refModules.contains ( src )  )  {^256^^^^^238^261^if  ( !refModules.contains ( depModule )  )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^Collection<JSModule> refModules = path.get ( fileRefs ) ;^247^^^^^238^261^Collection<JSModule> refModules = fileRefs.get ( path ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( 2.size (  )  > 1 )  {^248^^^^^238^261^if  ( refModules.size (  )  > 1 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] coalesceDuplicateFiles [RETURN_TYPE] void   [VARIABLES] Multimap  fileRefs  CompilerInput  file  jsFile  boolean  JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  Collection  refModules  List  modulesAtDepth  modulesByDepth  String  path  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( module == m2 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^if  ( m1 == src )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Argument_Swapping]^if  ( m2 == m1 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Wrong_Operator]^if  ( m1 != m2 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Wrong_Literal]^return -1;^270^^^^^268^275^return 0;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^int d1 = getDepth ( src ) ;^272^^^^^268^275^int d1 = getDepth ( m1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^int d1 = getDepth ( m2 ) ;^272^^^^^268^275^int d1 = getDepth ( m1 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^int d2 = getDepth ( src ) ;^273^^^^^268^275^int d2 = getDepth ( m2 ) ;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d1 ? -1 : d2 == d1 ? module.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( src.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Argument_Swapping]^return d1 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Argument_Swapping]^return d2 < m2 ? -1 : d2 == d1 ? d1.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Argument_Swapping]^return d2 < d1 ? -1 : d2 == d1 ? m1.getName (  ) .compareTo ( m2.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Wrong_Operator]^return d2 <= d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Wrong_Operator]^return d2 < d1 ? -1 : d2 >= d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d1 ? -1 : d2 == d1 ? src.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  int  d1  d2  
[BugLab_Variable_Misuse]^return m2;^303^^^^^302^304^return dependentModule;^[CLASS] JSModuleGraph InverseDepthComparator ModuleDependenceException  [METHOD] getDependentModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  dep  depModule  dependentModule  m  m1  m2  module  src  List  modulesAtDepth  modulesByDepth  boolean  Map  dependencyMap  moduleDepths  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( m2 == m1 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Operator]^if  ( m1 != m2 )  {^269^^^^^268^275^if  ( m1 == m2 )  {^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Literal]^return d1;^270^^^^^268^275^return 0;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^int d1 = getDepth ( m2 ) ;^272^^^^^268^275^int d1 = getDepth ( m1 ) ;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^int d2 = getDepth ( m1 ) ;^273^^^^^268^275^int d2 = getDepth ( m2 ) ;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d1 ? -1 : d2 == d1 ? m1.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Argument_Swapping]^return m2 < d1 ? -1 : d2 == d1 ? d2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Argument_Swapping]^return d1 < d2 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Argument_Swapping]^return d2 < d1 ? -1 : d2 == d1 ? m1.getName (  ) .compareTo ( m2.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Operator]^return d2 <= d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Operator]^return d2 < d1 ? -1 : d2 >= d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Literal]^return d2 < dd1 ? -d1 : d2 == dd1 ? m2.getName (  ) .compareTo ( md1.getName (  )  )  : d1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Literal]^return d2 < d2 ? -2 : d2 == d2 ? m2.getName (  ) .compareTo ( m2.getName (  )  )  : 2;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m2.getName (  )  )  : 1;^274^^^^^268^275^return d2 < d1 ? -1 : d2 == d1 ? m2.getName (  ) .compareTo ( m1.getName (  )  )  : 1;^[CLASS] InverseDepthComparator  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Wrong_Literal]^private static final long serialVersionUID = d1;^286^^^^^281^291^private static final long serialVersionUID = 1;^[CLASS] ModuleDependenceException  [METHOD] compare [RETURN_TYPE] int   JSModule m1 JSModule m2 [VARIABLES] boolean  JSModule  m1  m2  int  d1  d2  
[BugLab_Variable_Misuse]^this.module = dependentModule;^294^^^^^291^296^this.module = module;^[CLASS] ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule)   String message JSModule module JSModule dependentModule [VARIABLES] JSModule  dependentModule  module  String  message  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.dependentModule = module;^295^^^^^291^296^this.dependentModule = dependentModule;^[CLASS] ModuleDependenceException  [METHOD] <init> [RETURN_TYPE] JSModule)   String message JSModule module JSModule dependentModule [VARIABLES] JSModule  dependentModule  module  String  message  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^return dependentModule;^299^^^^^298^300^return module;^[CLASS] ModuleDependenceException  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  dependentModule  module  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return module;^303^^^^^302^304^return dependentModule;^[CLASS] ModuleDependenceException  [METHOD] getDependentModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  dependentModule  module  long  serialVersionUID  boolean  
