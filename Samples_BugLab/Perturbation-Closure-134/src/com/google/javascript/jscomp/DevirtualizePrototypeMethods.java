[buglab_swap_variables]^defFinder.process (  root ) ;^77^^^^^75^82^defFinder.process ( externs, root ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^defFinder.process ( root, externs ) ;^77^^^^^75^82^defFinder.process ( externs, root ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^defFinder.process ( externs ) ;^77^^^^^75^82^defFinder.process ( externs, root ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^rewriteDefinitionIfEligible ( defFinder, defSite ) ;^80^^^^^75^82^rewriteDefinitionIfEligible ( defSite, defFinder ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^rewriteDefinitionIfEligible (  defFinder ) ;^80^^^^^75^82^rewriteDefinitionIfEligible ( defSite, defFinder ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^rewriteDefinitionIfEligible ( defSite ) ;^80^^^^^75^82^rewriteDefinitionIfEligible ( defSite, defFinder ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[buglab_swap_variables]^return  ( node.getFirstChild (  )  == parent )  && NodeUtil.isCall ( parent ) ;^90^^^^^87^91^return  ( parent.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[buglab_swap_variables]^if  (  ( parent == null )  || ( gramp.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[buglab_swap_variables]^if  (  ( node == null )  || ( parent.getFirstChild (  )  != gramp )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[buglab_swap_variables]^!isEligibleDefinition ( defSite, defFinder )  )  {^147^^^^^132^162^!isEligibleDefinition ( defFinder, defSite )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^!isEligibleDefinition (  defSite )  )  {^147^^^^^132^162^!isEligibleDefinition ( defFinder, defSite )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^!isEligibleDefinition ( defFinder )  )  {^147^^^^^132^162^!isEligibleDefinition ( defFinder, defSite )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^for  ( Node node = ancestor.getParent (  ) ;^159^^^^^144^174^for  ( Node ancestor = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^rewriteDefinition ( newMethodName, node ) ;^176^^^^^161^191^rewriteDefinition ( node, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^rewriteDefinition (  newMethodName ) ;^176^^^^^161^191^rewriteDefinition ( node, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^rewriteDefinition ( node ) ;^176^^^^^161^191^rewriteDefinition ( node, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[buglab_swap_variables]^if  ( lValue.isExported ( codingConvention.getLastChild (  ) .getString (  )  )  )  {^216^^^^^201^231^if  ( codingConvention.isExported ( lValue.getLastChild (  ) .getString (  )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^Collection<UseSite> useSites = definition.getUseSites ( defFinder ) ;^220^^^^^205^235^Collection<UseSite> useSites = defFinder.getUseSites ( definition ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  (  ( callModule != definitionModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn (  definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^Collection<Definition> singleSiteDefinitions = nameNode.getDefinitionsReferencedAt ( defFinder ) ;^238^239^^^^223^253^Collection<Definition> singleSiteDefinitions = defFinder.getDefinitionsReferencedAt ( nameNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^Preconditions.checkState ( definition.contains ( singleSiteDefinitions )  ) ;^244^^^^^229^259^Preconditions.checkState ( singleSiteDefinitions.contains ( definition )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^!moduleGraph.dependsOn (  definitionModule )  )  )  {^252^^^^^237^267^!moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^!moduleGraph.dependsOn ( callModule )  )  )  {^252^^^^^237^267^!moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^Collection<UseSite> useSites = definition.getUseSites ( defFinder ) ;^273^^^^^270^284^Collection<UseSite> useSites = defFinder.getUseSites ( definition ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[buglab_swap_variables]^parent.replaceChild ( objectNode, node ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[buglab_swap_variables]^parent.replaceChild (  objectNode ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[buglab_swap_variables]^parent.addChildToFront ( Node.newString ( Token.NAME )  ) ;^281^^^^^270^284^parent.addChildToFront ( Node.newString ( Token.NAME, newMethodName )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[buglab_swap_variables]^block.replaceChild ( expr, new Node ( Token.VAR )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^block.replaceChild ( expr, new Node ( Token. newNameNode )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^block.replaceChild (  new Node ( Token.VAR, newNameNode )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^argList.addChildToFront ( Node.newString ( Token.NAME )  ) ;^310^^^^^296^320^argList.addChildToFront ( Node.newString ( Token.NAME, self )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^replaceReferencesToThis ( self, body ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^replaceReferencesToThis (  self ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^replaceReferencesToThis ( body ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[buglab_swap_variables]^JSType newType = thisType.createFunctionType ( typeRegistry, returnType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType ( returnType, thisType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType (  returnType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType ( thisType, parameterTypes, returnType ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType ( thisType,  parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType ( parameterTypes, returnType, thisType ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = typeRegistry.createFunctionType ( thisType, returnType ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^JSType newType = returnType.createFunctionType ( thisType, typeRegistry, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[buglab_swap_variables]^replaceReferencesToThis ( name, child ) ;^363^^^^^354^366^replaceReferencesToThis ( child, name ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[buglab_swap_variables]^replaceReferencesToThis (  name ) ;^363^^^^^354^366^replaceReferencesToThis ( child, name ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[buglab_swap_variables]^replaceReferencesToThis ( child ) ;^363^^^^^354^366^replaceReferencesToThis ( child, name ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[buglab_swap_variables]^node.replaceChild (  Node.newString ( Token.NAME, name )  ) ;^361^^^^^354^366^node.replaceChild ( child, Node.newString ( Token.NAME, name )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[buglab_swap_variables]^node.replaceChild ( child, Node.newString ( Token.NAME )  ) ;^361^^^^^354^366^node.replaceChild ( child, Node.newString ( Token.NAME, name )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
