[BugLab_Argument_Swapping]^defFinder.process ( root, externs ) ;^77^^^^^75^82^defFinder.process ( externs, root ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[BugLab_Argument_Swapping]^rewriteDefinitionIfEligible ( defFinder, defSite ) ;^80^^^^^75^82^rewriteDefinitionIfEligible ( defSite, defFinder ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  boolean  DefinitionSite  defSite  Node  externs  root  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^89^^^^^87^91^Node parent = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[BugLab_Argument_Swapping]^return  ( node.getFirstChild (  )  == parent )  && NodeUtil.isCall ( parent ) ;^90^^^^^87^91^return  ( parent.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[BugLab_Wrong_Operator]^return  ( parent.getFirstChild (  )  == node )  || NodeUtil.isCall ( parent ) ;^90^^^^^87^91^return  ( parent.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[BugLab_Wrong_Operator]^return  ( parent.getFirstChild (  )  <= node )  && NodeUtil.isCall ( parent ) ;^90^^^^^87^91^return  ( parent.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[BugLab_Variable_Misuse]^return  ( node.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^90^^^^^87^91^return  ( parent.getFirstChild (  )  == node )  && NodeUtil.isCall ( parent ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isCall [RETURN_TYPE] boolean   UseSite site [VARIABLES] AbstractCompiler  compiler  UseSite  site  boolean  Node  node  parent  
[BugLab_Variable_Misuse]^Node parent = nameNode.getParent (  ) ;^97^^^^^96^122^Node parent = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  ( parent != null )  {^98^^^^^96^122^if  ( parent == null )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Literal]^return true;^99^^^^^96^122^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^Node gramp = node.getParent (  ) ;^102^^^^^96^122^Node gramp = parent.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  (  ( node == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  (  ( gramp == null )  || ( nameNode.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != nameNode )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Argument_Swapping]^if  (  ( node == null )  || ( parent.getFirstChild (  )  != gramp )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Argument_Swapping]^if  (  ( gramp == null )  || ( node.getFirstChild (  )  != parent )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  (  ( gramp == null )  && ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  (  ( gramp != null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  == node )  || !NodeUtil.isExprAssign ( gramp )  )  {^103^104^105^^^96^122^if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Literal]^return true;^106^^^^^103^107^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Literal]^return true;^106^^^^^96^122^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^( node.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^104^105^^^^96^122^( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^!NodeUtil.isExprAssign ( parent )  )  {^105^^^^^96^122^!NodeUtil.isExprAssign ( gramp )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^Node functionNode = node.getLastChild (  ) ;^109^^^^^96^122^Node functionNode = parent.getLastChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^Node functionNode = nameNode.getLastChild (  ) ;^109^^^^^96^122^Node functionNode = parent.getLastChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  (  ( parent == null )  || !NodeUtil.isFunction ( functionNode )  )  {^110^^^^^96^122^if  (  ( functionNode == null )  || !NodeUtil.isFunction ( functionNode )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  (  ( functionNode == null )  && !NodeUtil.isFunction ( functionNode )  )  {^110^^^^^96^122^if  (  ( functionNode == null )  || !NodeUtil.isFunction ( functionNode )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  (  ( functionNode != null )  || !NodeUtil.isFunction ( functionNode )  )  {^110^^^^^96^122^if  (  ( functionNode == null )  || !NodeUtil.isFunction ( functionNode )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Literal]^return true;^111^^^^^96^122^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isGetProp ( nameNode )  )  {^114^^^^^96^122^if  ( !NodeUtil.isGetProp ( node )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Literal]^return true;^115^^^^^96^122^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isGetProp ( parent )  )  {^114^^^^^96^122^if  ( !NodeUtil.isGetProp ( node )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^Node nameNode = parent.getFirstChild (  ) ;^118^^^^^96^122^Node nameNode = node.getFirstChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Variable_Misuse]^return NodeUtil.isGetProp ( node )  && nameNode.getLastChild (  ) .getString (  ) .equals ( "prototype" ) ;^119^120^^^^96^122^return NodeUtil.isGetProp ( nameNode )  && nameNode.getLastChild (  ) .getString (  ) .equals ( "prototype" ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^return NodeUtil.isGetProp ( nameNode )  || nameNode.getLastChild (  ) .getString (  ) .equals ( "prototype" ) ;^119^120^^^^96^122^return NodeUtil.isGetProp ( nameNode )  && nameNode.getLastChild (  ) .getString (  ) .equals ( "prototype" ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isPrototypeMethodDefinition [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  Node  functionNode  gramp  nameNode  node  parent  boolean  
[BugLab_Wrong_Operator]^if  ( defSite.inExterns && !defSite.inGlobalScope || !isEligibleDefinition ( defFinder, defSite )  )  {^145^146^147^^^130^160^if  ( defSite.inExterns || !defSite.inGlobalScope || !isEligibleDefinition ( defFinder, defSite )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Argument_Swapping]^!isEligibleDefinition ( defSite, defFinder )  )  {^147^^^^^132^162^!isEligibleDefinition ( defFinder, defSite )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^if  ( !isPrototypeMethodDefinition ( ancestor )  )  {^155^^^^^140^170^if  ( !isPrototypeMethodDefinition ( node )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( node )  )  {^162^^^^^147^177^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^for  ( Node node = node.getParent (  ) ;^159^^^^^144^174^for  ( Node ancestor = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Argument_Swapping]^for  ( Node node = ancestor.getParent (  ) ;^159^^^^^144^174^for  ( Node ancestor = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( node )  )  {^162^^^^^159^165^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^ancestor = node.getParent (  )  )  {^161^^^^^146^176^ancestor = ancestor.getParent (  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^for  ( Node ancestor = ancestor.getParent (  ) ;^159^^^^^144^174^for  ( Node ancestor = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^String newMethodName = getRewrittenMethodName ( ancestor.getLastChild (  ) .getString (  )  ) ;^174^175^^^^159^189^String newMethodName = getRewrittenMethodName ( node.getLastChild (  ) .getString (  )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Variable_Misuse]^rewriteDefinition ( ancestor, newMethodName ) ;^176^^^^^161^191^rewriteDefinition ( node, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Argument_Swapping]^rewriteDefinition ( newMethodName, node ) ;^176^^^^^161^191^rewriteDefinition ( node, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinitionIfEligible [RETURN_TYPE] void   DefinitionSite defSite SimpleDefinitionFinder defFinder [VARIABLES] AbstractCompiler  compiler  SimpleDefinitionFinder  defFinder  String  newMethodName  boolean  DefinitionSite  defSite  Node  ancestor  node  
[BugLab_Wrong_Operator]^if  ( rValue == null && !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^203^204^205^^^188^218^if  ( rValue == null || !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( rValue != null || !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^203^204^205^^^188^218^if  ( rValue == null || !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^206^^^^^203^207^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^206^^^^^191^221^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^!NodeUtil.isFunction ( nameNode )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^204^205^^^^189^219^!NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^NodeUtil.isVarArgsFunction ( nameNode )  )  {^205^^^^^190^220^NodeUtil.isVarArgsFunction ( rValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  (  ( rValue == null )  || !NodeUtil.isGetProp ( lValue )  )  {^211^212^^^^196^226^if  (  ( lValue == null )  || !NodeUtil.isGetProp ( lValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( lValue == null )  && !NodeUtil.isGetProp ( lValue )  )  {^211^212^^^^196^226^if  (  ( lValue == null )  || !NodeUtil.isGetProp ( lValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( lValue != null )  || !NodeUtil.isGetProp ( lValue )  )  {^211^212^^^^196^226^if  (  ( lValue == null )  || !NodeUtil.isGetProp ( lValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^213^^^^^211^214^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^213^^^^^198^228^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^!NodeUtil.isGetProp ( rValue )  )  {^212^^^^^197^227^!NodeUtil.isGetProp ( lValue )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( codingConvention.isExported ( rValue.getLastChild (  ) .getString (  )  )  )  {^216^^^^^201^231^if  ( codingConvention.isExported ( lValue.getLastChild (  ) .getString (  )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( lValue.isExported ( codingConvention.getLastChild (  ) .getString (  )  )  )  {^216^^^^^201^231^if  ( codingConvention.isExported ( lValue.getLastChild (  ) .getString (  )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^217^^^^^202^232^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^Collection<UseSite> useSites = definition.getUseSites ( defFinder ) ;^220^^^^^205^235^Collection<UseSite> useSites = defFinder.getUseSites ( definition ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^224^^^^^209^239^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( this.isEmpty (  )  )  {^223^^^^^208^238^if  ( useSites.isEmpty (  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^233^^^^^218^248^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( singleSiteDefinitions.size (  )  >= 1 )  {^240^^^^^225^255^if  ( singleSiteDefinitions.size (  )  > 1 )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^241^^^^^226^256^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^if  (  ( callModule != definitionModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( definitionModule != callModule )  || (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( definitionModule == callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  && !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  (  ( definitionModule != callModule )  && (  ( callModule != null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^235^265^if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^253^^^^^250^254^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return true;^253^^^^^238^268^return false;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^Collection<Definition> singleSiteDefinitions = nameNode.getDefinitionsReferencedAt ( defFinder ) ;^238^239^^^^223^253^Collection<Definition> singleSiteDefinitions = defFinder.getDefinitionsReferencedAt ( nameNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^Preconditions.checkState ( definition.contains ( singleSiteDefinitions )  ) ;^244^^^^^229^259^Preconditions.checkState ( singleSiteDefinitions.contains ( definition )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^Preconditions.checkState ( 4.contains ( definition )  ) ;^244^^^^^229^259^Preconditions.checkState ( singleSiteDefinitions.contains ( definition )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^!moduleGraph.dependsOn ( definitionModule, callModule )  )  )  {^252^^^^^237^267^!moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^return false;^257^^^^^242^272^return true;^[CLASS] DevirtualizePrototypeMethods  [METHOD] isEligibleDefinition [RETURN_TYPE] boolean   SimpleDefinitionFinder defFinder DefinitionSite definitionSite [VARIABLES] AbstractCompiler  compiler  boolean  Node  lValue  nameNode  rValue  CodingConvention  codingConvention  Definition  definition  JSModule  callModule  definitionModule  Collection  singleSiteDefinitions  useSites  SimpleDefinitionFinder  defFinder  UseSite  site  DefinitionSite  definitionSite  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^Collection<UseSite> useSites = definition.getUseSites ( defFinder ) ;^273^^^^^270^284^Collection<UseSite> useSites = defFinder.getUseSites ( definition ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^Node parent = objectNode.getParent (  ) ;^276^^^^^270^284^Node parent = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^Node objectNode = parent.getFirstChild (  ) ;^278^^^^^270^284^Node objectNode = node.getFirstChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^node.removeChild ( parent ) ;^279^^^^^270^284^node.removeChild ( objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, objectNode ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, parent ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Argument_Swapping]^parent.replaceChild ( objectNode, node ) ;^280^^^^^270^284^parent.replaceChild ( node, objectNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteCallSites [RETURN_TYPE] void   SimpleDefinitionFinder defFinder Definition definition String newMethodName [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  objectNode  parent  Definition  definition  Collection  useSites  SimpleDefinitionFinder  defFinder  String  newMethodName  UseSite  site  
[BugLab_Variable_Misuse]^Node parent = newNameNode.getParent (  ) ;^297^^^^^296^320^Node parent = node.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node functionNode = node.getLastChild (  ) ;^298^^^^^296^320^Node functionNode = parent.getLastChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node expr = node.getParent (  ) ;^299^^^^^296^320^Node expr = parent.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node expr = newNameNode.getParent (  ) ;^299^^^^^296^320^Node expr = parent.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node block = node.getParent (  ) ;^300^^^^^296^320^Node block = expr.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node block = parent.getParent (  ) ;^300^^^^^296^320^Node block = expr.getParent (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node newNameNode = Node.newString ( Token.NAME, self ) ;^302^^^^^296^320^Node newNameNode = Node.newString ( Token.NAME, newMethodName ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^parent.removeChild ( node ) ;^303^^^^^296^320^parent.removeChild ( functionNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^newNameNode.addChildToFront ( parent ) ;^304^^^^^296^320^newNameNode.addChildToFront ( functionNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^block.replaceChild ( expr, new Node ( Token.VAR, functionNode )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^block.replaceChild ( node, new Node ( Token.VAR, newNameNode )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^block.replaceChild ( expr, new Node ( Token.VAR, parent )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Argument_Swapping]^block.replaceChild ( newNameNode, new Node ( Token.VAR, expr )  ) ;^305^^^^^296^320^block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node argList = parent.getFirstChild (  ) .getNext (  ) ;^309^^^^^296^320^Node argList = functionNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node argList = newNameNode.getFirstChild (  ) .getNext (  ) ;^309^^^^^296^320^Node argList = functionNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^argList.addChildToFront ( Node.newString ( Token.NAME, newMethodName )  ) ;^310^^^^^296^320^argList.addChildToFront ( Node.newString ( Token.NAME, self )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node body = node.getLastChild (  ) ;^313^^^^^296^320^Node body = functionNode.getLastChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^Node body = newNameNode.getLastChild (  ) ;^313^^^^^296^320^Node body = functionNode.getLastChild (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^replaceReferencesToThis ( newNameNode, self ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^replaceReferencesToThis ( body, newMethodName ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Argument_Swapping]^replaceReferencesToThis ( self, body ) ;^314^^^^^296^320^replaceReferencesToThis ( body, self ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^fixFunctionType ( parent ) ;^317^^^^^296^320^fixFunctionType ( functionNode ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] rewriteDefinition [RETURN_TYPE] void   Node node String newMethodName [VARIABLES] AbstractCompiler  compiler  String  newMethodName  self  boolean  Node  argList  block  body  expr  functionNode  newNameNode  node  parent  
[BugLab_Variable_Misuse]^FunctionType type =  ( FunctionType )  param.getJSType (  ) ;^329^^^^^328^348^FunctionType type =  ( FunctionType )  functionNode.getJSType (  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Wrong_Operator]^if  ( type == null )  {^330^^^^^328^348^if  ( type != null )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = thisType.createFunctionType ( typeRegistry, returnType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = typeRegistry.createFunctionType ( thisType, parameterTypes, returnType ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Variable_Misuse]^parameterTypes.add ( functionNode.getJSType (  )  ) ;^337^^^^^328^348^parameterTypes.add ( param.getJSType (  )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Variable_Misuse]^JSType newType = typeRegistry.createFunctionType ( thisType, newType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = parameterTypes.createFunctionType ( thisType, returnType, typeRegistry ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = typeRegistry.createFunctionType ( returnType, thisType, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = returnType.createFunctionType ( thisType, typeRegistry, parameterTypes ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Argument_Swapping]^JSType newType = typeRegistry.createFunctionType ( parameterTypes, returnType, thisType ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Variable_Misuse]^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, null ) ;^344^345^^^^328^348^JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Variable_Misuse]^functionNode.setJSType ( returnType ) ;^346^^^^^328^348^functionNode.setJSType ( newType ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] fixFunctionType [RETURN_TYPE] void   Node functionNode [VARIABLES] ObjectType  thisType  AbstractCompiler  compiler  JSTypeRegistry  typeRegistry  JSType  newType  returnType  boolean  Node  functionNode  param  FunctionType  type  List  parameterTypes  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( child )  )  {^355^^^^^354^366^if  ( NodeUtil.isFunction ( node )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Variable_Misuse]^replaceReferencesToThis ( node, name ) ;^363^^^^^354^366^replaceReferencesToThis ( child, name ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Argument_Swapping]^replaceReferencesToThis ( name, child ) ;^363^^^^^354^366^replaceReferencesToThis ( child, name ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Argument_Swapping]^node.replaceChild ( name, Node.newString ( Token.NAME, child )  ) ;^361^^^^^354^366^node.replaceChild ( child, Node.newString ( Token.NAME, name )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Variable_Misuse]^for  ( Node child : child.children (  )  )  {^359^^^^^354^366^for  ( Node child : node.children (  )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isThis ( node )  )  {^360^^^^^354^366^if  ( NodeUtil.isThis ( child )  )  {^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
[BugLab_Variable_Misuse]^node.replaceChild ( node, Node.newString ( Token.NAME, name )  ) ;^361^^^^^354^366^node.replaceChild ( child, Node.newString ( Token.NAME, name )  ) ;^[CLASS] DevirtualizePrototypeMethods  [METHOD] replaceReferencesToThis [RETURN_TYPE] void   Node node String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  node  
