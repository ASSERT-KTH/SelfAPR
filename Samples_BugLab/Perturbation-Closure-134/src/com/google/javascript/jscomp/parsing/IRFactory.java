[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( errorReporter, node.getSourceName (  ) , config, sourceString ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory (  node.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( sourceString, config.getSourceName (  ) , node, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( sourceString.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( config, node.getSourceName (  ) , sourceString, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) ,  errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( node, sourceString.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , errorReporter, config ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^Node irNode = node.transform ( irFactory ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) .getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) ,  fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^comments = comments.getComments (  ) .toArray ( node ) ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) .getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) ,  fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^irFactory.parseAllJsDocInfo (  comments, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^irFactory.parseAllJsDocInfo ( comments, irNode, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^irFactory.parseAllJsDocInfo ( irNode,  0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[buglab_swap_variables]^irNode.putProp ( node, TMP_JSDOC_PROP.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[buglab_swap_variables]^irNode.putProp ( TMP_JSDOC_PROP.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[buglab_swap_variables]^irNode.putProp (  node.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[buglab_swap_variables]^String jsDoc =  ( String )  TMP_JSDOC_PROP.getProp ( node ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^JSDocInfo info = parseJSDocInfo ( comments, jsDoc[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^JSDocInfo info = parseJSDocInfo (  comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^JSDocInfo info = parseJSDocInfo ( jsDoc[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^if  ( TMP_JSDOC_PROP.getProp ( node )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo ( comments, child, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo (  comments, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo ( child,  ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo ( child, ci, comments ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo ( child, comments ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^ci = parseAllJsDocInfo ( ci, comments, child ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[buglab_swap_variables]^return parseJSDocInfo ( lineno, comment, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^return parseJSDocInfo (  lineno, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^return parseJSDocInfo ( comment, position, lineno, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^return parseJSDocInfo ( comment,  position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^return parseJSDocInfo ( comment, lineno,  null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^return parseJSDocInfo ( position, lineno, comment, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[buglab_swap_variables]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , numOpeningChars, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,  position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( position.substring ( numOpeningChars ) , lineno, comment2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, lineno2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,  position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( numOpeningChars.substring ( comment ) , lineno,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , numOpeningChars,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^new JsDocTokenStream ( numOpeningChars.substring ( comment ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[buglab_swap_variables]^int lineIndex = position.lastIndexOf ( '\n', sourceString ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[buglab_swap_variables]^int lineIndex = sourceString.lastIndexOf ( '\n' ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[buglab_swap_variables]^return lineIndex - position - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[buglab_swap_variables]^return node.process ( transformDispatcher ) ;^293^^^^^292^294^return transformDispatcher.process ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] justTransform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  node  
[buglab_swap_variables]^node.putProp ( Node.SKIP_INDEXES_PROP ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[buglab_swap_variables]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[buglab_swap_variables]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[buglab_swap_variables]^return  ( nTypeType == Token.EXPR_RESULT || n == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^return  ( ALLOWED_DIRECTIVESType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && n.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[buglab_swap_variables]^return new Node ( Token. transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^node.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[buglab_swap_variables]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[buglab_swap_variables]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[buglab_swap_variables]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^Node node = new Node ( Token.REGEXP ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^Node node = new Node ( Token. literalStringNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^node = new Node ( Token. transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[buglab_swap_variables]^return new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[buglab_swap_variables]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^return new Node ( Token. transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[buglab_swap_variables]^errorReporter.error ( "destructuring assignment forbidden", sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[buglab_swap_variables]^errorReporter.error ( "destructuring assignment forbidden",  node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[buglab_swap_variables]^node.putProp ( Node.SKIP_INDEXES_PROP ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[buglab_swap_variables]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[buglab_swap_variables]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[buglab_swap_variables]^return  ( n == Token.EXPR_RESULT || nTypeType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[buglab_swap_variables]^return new Node ( Token. transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[buglab_swap_variables]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[buglab_swap_variables]^node.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[buglab_swap_variables]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[buglab_swap_variables]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[buglab_swap_variables]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[buglab_swap_variables]^Node node = new Node ( Token.REGEXP ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[buglab_swap_variables]^Node node = new Node ( Token. literalStringNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[buglab_swap_variables]^node = new Node ( Token. transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[buglab_swap_variables]^return new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[buglab_swap_variables]^Node node = new Node ( Token. transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[buglab_swap_variables]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[buglab_swap_variables]^return new Node ( Token. transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[buglab_swap_variables]^return new Node ( Token. transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[buglab_swap_variables]^errorReporter.error ( "destructuring assignment forbidden", node, sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[buglab_swap_variables]^errorReporter.error ( "destructuring assignment forbidden", sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[buglab_swap_variables]^errorReporter.error ( "destructuring assignment forbidden",  node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
