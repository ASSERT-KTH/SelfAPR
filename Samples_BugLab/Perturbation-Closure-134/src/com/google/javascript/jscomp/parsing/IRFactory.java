[BugLab_Wrong_Literal]^private static int TMP_JSDOC_PROP = Node.LAST_PROP ;^85^^^^^80^90^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[BugLab_Variable_Misuse]^this.sourceString = sourceName;^101^^^^^97^107^this.sourceString = sourceString;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[BugLab_Variable_Misuse]^this.sourceName = sourceString;^102^^^^^97^107^this.sourceName = sourceName;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[BugLab_Variable_Misuse]^IRFactory irFactory = new IRFactory ( sourceName, node.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^IRFactory irFactory = new IRFactory ( config, node.getSourceName (  ) , sourceString, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^IRFactory irFactory = new IRFactory ( sourceString, config.getSourceName (  ) , node, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^IRFactory irFactory = new IRFactory ( sourceString, errorReporter.getSourceName (  ) , config, node ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^Node irNode = node.transform ( irFactory ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( node.getComments (  )  == null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( comment.getCommentType (  )  == JSDOC || ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( comment.getCommentType (  )  >= JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  && comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info != null || fileOverviewInfo == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info == null && fileOverviewInfo == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^fileOverviewInfo = fileOverviewInfo;^135^^^^^127^137^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info != null || fileOverviewInfo == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info == null && fileOverviewInfo == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^fileOverviewInfo = fileOverviewInfo;^135^^^^^120^150^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^if  ( info != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( fileOverviewInfo == null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  (  ( irNode.getJSDocInfo (  )  != null )  || ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  (  ( irNode.getJSDocInfo (  )  == null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  == null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^comments = comments.getComments (  ) .toArray ( node ) ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , null, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^irNode.setJSDocInfo ( info ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^irFactory.parseAllJsDocInfo ( comments, irNode, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Literal]^irFactory.parseAllJsDocInfo ( irNode, comments, -1 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( comment.getCommentType (  )  != JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( comment.getCommentType (  )  < JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Variable_Misuse]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , 4, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Argument_Swapping]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Literal]^irFactory.parseAllJsDocInfo ( irNode, comments, TMP_JSDOC_PROP ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[BugLab_Wrong_Operator]^if  ( irNode.getType (  )  == Token.FUNCTION || irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( irNode.getType (  )  >= Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  >= -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Literal]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -charno )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Literal]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -lineno )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( irNode.getLineno (  )  >= -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Variable_Misuse]^irNode.setLineno ( charno ) ;^171^^^^^158^180^irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Variable_Misuse]^irNode.setCharno ( lineno ) ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( irNode.getLineno (  )  != -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Literal]^if  ( irNode.getLineno (  )  == -TMP_JSDOC_PROP )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( node.getJsDoc (  )  == null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Variable_Misuse]^irNode.putProp ( lineno, node.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[BugLab_Wrong_Operator]^if  ( ci > comments.length )  {^194^^^^^179^209^if  ( ci >= comments.length )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^return lineno;^196^^^^^181^211^return ci;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^while  ( comments[ci].getCommentType (  )  != JSDOC && !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^while  ( comments[ci].getCommentType (  )  == JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ci <= comments.length ) ;^207^^^^^204^208^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( node.getProp ( TMP_JSDOC_PROP )  == null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^while  ( comments[ci].getCommentType (  )  >= JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ci > comments.length ) ;^207^^^^^204^208^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( info != null || info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( info == null && info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^if  ( child.getType (  )  == Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^} else if  ( child.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  == Token.VAR || node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  != Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  >= 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  <= Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == charno )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^} else if  ( child.getType (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  != Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^registry.identifyEnumName ( child.getFirstChild (  ) .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^registry.identifyEnumName ( child.getFirstChild (  ) .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  <= Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^registry.identifyEnumName ( child.getFirstChild (  ) .getString (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^registry.identifyEnumName ( child.getString (  )  ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  != 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == TMP_JSDOC_PROP )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  > Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  > Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  >= Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^String jsDoc =  ( String )  child.getProp ( TMP_JSDOC_PROP ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^String jsDoc =  ( String )  node.getProp ( lineno ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^String jsDoc =  ( String )  TMP_JSDOC_PROP.getProp ( node ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^JSDocInfo info = parseJSDocInfo ( sourceString, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^JSDocInfo info = parseJSDocInfo ( comments, jsDoc[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^!comments[ci].getValue (  ) .equals ( sourceString )  )  {^205^^^^^190^220^!comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ci > comments.length ) ;^207^^^^^192^222^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^node.removeProp ( lineno ) ;^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  > Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  <= 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  ==  )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  >= Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == ci )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^if  ( child.getProp ( TMP_JSDOC_PROP )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^if  ( node.getProp ( lineno )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^if  ( TMP_JSDOC_PROP.getProp ( node )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Wrong_Operator]^Preconditions.checkState ( ci <= comments.length ) ;^207^^^^^192^222^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^ci = parseAllJsDocInfo ( node, comments, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^ci = parseAllJsDocInfo ( child, comments, lineno ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^ci = parseAllJsDocInfo ( ci, comments, child ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^ci = parseAllJsDocInfo ( comments, child, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Argument_Swapping]^ci = parseAllJsDocInfo ( child, ci, comments ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^return lineno;^233^^^^^218^248^return ci;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[BugLab_Variable_Misuse]^return parseJSDocInfo ( sourceString, lineno, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[BugLab_Variable_Misuse]^return parseJSDocInfo ( comment, position, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[BugLab_Variable_Misuse]^return parseJSDocInfo ( comment, lineno, ci, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[BugLab_Argument_Swapping]^return parseJSDocInfo ( position, lineno, comment, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[BugLab_Argument_Swapping]^return parseJSDocInfo ( comment, position, lineno, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[BugLab_Variable_Misuse]^new JsDocInfoParser ( new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , lineno, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, lineno2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , numOpeningChars, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, lineno2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )   |  numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocTokenStream ( comment.substring ( position ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , numOpeningChars, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocTokenStream ( lineno.substring ( numOpeningChars ) , comment, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocTokenStream ( comment.substring ( lineno ) , numOpeningChars, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, lineno2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )   &  numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( position ) , lineno,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , numOpeningChars,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , numOpeningChars,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^new JsDocTokenStream ( numOpeningChars.substring ( comment ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^position2charno ( lineno )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^268^269^270^271^^259^280^position2charno ( position )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^if  ( fileLevelJsDocBuilder == null )  {^275^^^^^259^280^if  ( fileLevelJsDocBuilder != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^int lineIndex = sourceString.lastIndexOf ( '\n', numOpeningChars ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^int lineIndex = sourceName.lastIndexOf ( '\n', position ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^int lineIndex = position.lastIndexOf ( '\n', sourceString ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^if  ( lineno == -1 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^if  ( lineIndex != -1 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return numOpeningChars - lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return position - lineno - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^return lineIndex - position - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^return position  ||  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Literal]^return position - lineIndex - lineno;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return numOpeningChars;^285^^^^^282^290^return position;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return lineIndex;^285^^^^^282^290^return position;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return position - numOpeningChars - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^return position  <  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Operator]^return position  >  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Wrong_Literal]^return position - lineIndex ;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Argument_Swapping]^return node.process ( transformDispatcher ) ;^293^^^^^292^294^return transformDispatcher.process ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] justTransform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  node  
[BugLab_Variable_Misuse]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^Node childode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^return n;^303^^^^^297^304^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[BugLab_Variable_Misuse]^if  ( ret.getType (  )  == Token.transformDispatcher )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Wrong_Operator]^if  ( ret.getType (  )  != Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Wrong_Operator]^if  ( ret.getType (  )  <= Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Variable_Misuse]^} else if  ( ret.getType (  )  == Token.transformDispatcher )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Wrong_Operator]^} else if  ( ret.getType (  )  != Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Wrong_Literal]^ret.putBooleanProp ( Node.QUOTED_PROP, false ) ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^331^^^^^326^356^Node node = new Node ( Token.ARRAYLIT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  == Token.transformDispatcher )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  <= Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^node.addChildToBack ( child ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( lineno > 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( skipCount >= 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > ci )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > skipCount )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > lineIndex )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( child.getType (  )  == Token.transformDispatcher )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^node.removeChild ( c ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^skipIndexes[j] = position;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int i = charno;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int j = -1;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^for  ( Node child : child.children (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^skipIndexes[j] = skipCount;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int i = j;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int j = lineIndex;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^return child;^355^^^^^326^356^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^Node node = new ScriptOrFnNode ( Token.transformDispatcher ) ;^365^^^^^364^371^Node node = new ScriptOrFnNode ( Token.SCRIPT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[BugLab_Variable_Misuse]^parseDirectives ( child ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[BugLab_Variable_Misuse]^return child;^370^^^^^364^371^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[BugLab_Variable_Misuse]^if  ( sourceNames == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Argument_Swapping]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Argument_Swapping]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( directives != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^directives.add ( sourceString ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^directives = Sets.newHashSet ( sourceString ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^if  ( sourceStrings == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( directives == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( n != null )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Literal]^if  ( n == null )  return true;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^return  ( nType == Token.transformDispatcher || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^return  ( nType == Token.EXPR_RESULT || nType == Token.transformDispatcher )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.transformDispatcher && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Argument_Swapping]^return  ( n == Token.EXPR_RESULT || nTypeType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  || n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^return  ( nType == Token.EXPR_RESULT && nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^return  ( nType != Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^return  ( nType > Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^415^^^^^414^420^Node node = new Node ( Token.BREAK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( clauseNode.getCatchCondition (  )  == null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[BugLab_Variable_Misuse]^Node catchCondition = new Node ( Token.transformDispatcher ) ;^429^^^^^423^440^Node catchCondition = new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[BugLab_Variable_Misuse]^catchCondition.setCharno ( nType ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[BugLab_Variable_Misuse]^return catchCondition;^439^^^^^423^440^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^453^^^^^452^458^Node node = new Node ( Token.CONTINUE ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[BugLab_Wrong_Operator]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^478^^^^^477^480^Node node = new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processEmptyExpression [RETURN_TYPE] Node   EmptyExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  EmptyExpression  exprNode  
[BugLab_Wrong_Operator]^int leftParamPos = callNode.getAbsolutePosition (  !=  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^node.setCharno ( position2charno ( lineIndex )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^Boolean isUnnamedFunction = true;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^if  ( fnName == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Operator]^if  ( name != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Literal]^isUnnamedFunction = false;^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^Node newName = transform ( fnName ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Operator]^int lpColumn = functionNode.getAbsolutePosition (  <=  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^newName.setCharno ( position2charno ( lparenCharno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^newName.setCharno ( position2charno ( lineno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Operator]^int lpColumn = functionNode.getAbsolutePosition (  >  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^newName.setCharno ( position2charno ( nType )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^newName.setCharno ( position2charno ( skipCount )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^node.addChildToBack ( lp ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^Node lp = new Node ( Token.transformDispatcher ) ;^549^^^^^534^564^Node lp = new Node ( Token.LP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^if  ( name != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Operator]^if  ( fnName == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Wrong_Operator]^int lparenCharno = functionNode.getLp (  &&  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^lp.setCharno ( position2charno ( nodearenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^lp.setCharno ( position2charno ( numOpeningChars )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Argument_Swapping]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Argument_Swapping]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^lp.setCharno ( position2charno ( nType )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^node.addChildToBack ( newName ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^parseDirectives ( node ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^node.addChildToBack ( newName ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^return newName;^574^^^^^559^589^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^579^^^^^578^586^Node node = new Node ( Token.IF ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   &  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   <=  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^617^^^^^616^630^Node node = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node cur = prev;^619^^^^^616^630^Node cur = node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^if  ( node != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( prev == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^prev.addChildToBack ( node ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^prev = prev;^625^^^^^616^630^prev = cur;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^cur = new Node ( Token.transformDispatcher ) ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^return prev;^629^^^^^616^630^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^654^^^^^649^660^Node node = new Node ( Token.OBJECTLIT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.REGEXP, flagsNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^if  ( sourceString != null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( flags != null || !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( flags == null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node sourceStringNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^node.addChildToBack ( literalStringNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node sourceNameNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^return literalStringNode;^695^^^^^683^696^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^700^^^^^699^705^Node node = new Node ( Token.RETURN ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^node = new Node ( Token.CASE, transform ( child )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Variable_Misuse]^node = new Node ( Token.transformDispatcher ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Variable_Misuse]^Node block = new Node ( Token.transformDispatcher ) ;^727^^^^^719^738^Node block = new Node ( Token.BLOCK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Wrong_Literal]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Wrong_Operator]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Variable_Misuse]^block.addChildToBack ( transform ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Variable_Misuse]^return block;^737^^^^^719^738^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[BugLab_Variable_Misuse]^Node block = new Node ( Token.transformDispatcher ) ;^759^^^^^757^786^Node block = new Node ( Token.BLOCK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^boolean lineSet = true;^760^^^^^757^786^boolean lineSet = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  ( lineSet != false )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^if  ( lineSet == true )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^lineSet = false;^767^^^^^757^786^lineSet = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Argument_Swapping]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet == false )  ||  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet != false )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet == false )  &&  ( finallyBlock == null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^if  (  ( lineSet == true )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Variable_Misuse]^return block;^785^^^^^757^786^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.transformDispatcher ) ;^800^^^^^799^805^Node node = new Node ( Token.VAR ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[BugLab_Wrong_Operator]^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  <<  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[BugLab_Variable_Misuse]^return new Node ( Token.transformDispatcher ) ;^841^^^^^834^842^return new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[BugLab_Variable_Misuse]^errorReporter.error ( "destructuring assignment forbidden", jsDoc, node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[BugLab_Wrong_Literal]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 1 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[BugLab_Variable_Misuse]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[BugLab_Variable_Misuse]^return n;^303^^^^^297^304^return node;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[BugLab_Wrong_Operator]^if  ( ret.getType (  )  <= Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[BugLab_Wrong_Operator]^if  ( ret.getType (  )  < Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[BugLab_Wrong_Operator]^} else if  ( ret.getType (  )  != Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[BugLab_Wrong_Literal]^ret.putBooleanProp ( Node.QUOTED_PROP, false ) ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[BugLab_Wrong_Literal]^int skipCount = ;^332^^^^^326^356^int skipCount = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  != Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^node.addChildToBack ( child ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( j > 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( skipCount >= 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > skipCount )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > 1 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^if  ( skipCount > j )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  <= Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^skipIndexes[j] = skipCount;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^node.removeChild ( c ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int j = i;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^for  ( Node child : child.children (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  < Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Wrong_Literal]^int j = j;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^return child;^355^^^^^326^356^return node;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[BugLab_Variable_Misuse]^parseDirectives ( child ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[BugLab_Argument_Swapping]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[BugLab_Argument_Swapping]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[BugLab_Wrong_Operator]^if  ( directives != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[BugLab_Wrong_Operator]^if  ( directives == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[BugLab_Wrong_Operator]^if  ( n != null )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Wrong_Literal]^if  ( n == null )  return true;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Argument_Swapping]^return  ( ALLOWED_DIRECTIVES == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && nType.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Argument_Swapping]^return  ( nTypeType == Token.EXPR_RESULT || n == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Wrong_Operator]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  || n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Wrong_Operator]^return  ( nType == Token.EXPR_RESULT && nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Wrong_Operator]^return  ( nType <= Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Wrong_Operator]^return  ( nType != Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.0 ) ;^415^^^^^414^420^Node node = new Node ( Token.BREAK ) ;^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[BugLab_Wrong_Operator]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[BugLab_Wrong_Operator]^if  ( clauseNode.getCatchCondition (  )  == null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[BugLab_Variable_Misuse]^return catchCondition;^439^^^^^423^440^return node;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[BugLab_Wrong_Operator]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[BugLab_Wrong_Operator]^int leftParamPos = callNode.getAbsolutePosition (  >  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[BugLab_Wrong_Literal]^Boolean isUnnamedFunction = true;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^if  ( fnName == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^if  ( name != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Literal]^isUnnamedFunction = false;^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^Node newName = transform ( fnName ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^int lpColumn = functionNode.getAbsolutePosition (  |  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^newName.setCharno ( position2charno ( lparenCharno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^int lpColumn = functionNode.getAbsolutePosition (   instanceof   )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^node.addChildToBack ( lp ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^if  ( name != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^if  ( fnName == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^int lparenCharno = functionNode.getLp (  <<  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^lp.setCharno ( position2charno ( nodearenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^lp.setCharno ( position2charno ( lpColumn )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Argument_Swapping]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Argument_Swapping]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^node.addChildToBack ( newName ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^parseDirectives ( node ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^node.addChildToBack ( newName ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Variable_Misuse]^return newName;^574^^^^^559^589^return node;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[BugLab_Wrong_Operator]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[BugLab_Wrong_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   &  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[BugLab_Wrong_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   <<  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[BugLab_Variable_Misuse]^Node cur = prev;^619^^^^^616^630^Node cur = node;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[BugLab_Variable_Misuse]^if  ( node != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[BugLab_Wrong_Operator]^if  ( prev == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[BugLab_Variable_Misuse]^prev.addChildToBack ( node ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[BugLab_Variable_Misuse]^prev = prev;^625^^^^^616^630^prev = cur;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Variable_Misuse]^Node node = new Node ( Token.REGEXP, flagsNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Wrong_Operator]^if  ( flags != null || !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Wrong_Operator]^if  ( flags == null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Variable_Misuse]^node.addChildToBack ( literalStringNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Variable_Misuse]^return literalStringNode;^695^^^^^683^696^return node;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[BugLab_Wrong_Operator]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[BugLab_Variable_Misuse]^node = new Node ( Token.CASE, transform ( child )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Variable_Misuse]^node = new Node ( Token.0 ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Wrong_Literal]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Wrong_Operator]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Variable_Misuse]^block.addChildToBack ( transform ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Variable_Misuse]^return block;^737^^^^^719^738^return node;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[BugLab_Wrong_Literal]^boolean lineSet = true;^760^^^^^757^786^boolean lineSet = false;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  ( lineSet != false )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^if  ( lineSet == true )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^lineSet = false;^767^^^^^757^786^lineSet = true;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock == null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Argument_Swapping]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet == false )  ||  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet != false )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Operator]^if  (  ( lineSet == false )  &&  ( finallyBlock == null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^if  (  ( lineSet == true )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Variable_Misuse]^return block;^785^^^^^757^786^return node;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[BugLab_Wrong_Literal]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[BugLab_Wrong_Operator]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[BugLab_Wrong_Operator]^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  >  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[BugLab_Argument_Swapping]^errorReporter.error ( "destructuring assignment forbidden", node, sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
