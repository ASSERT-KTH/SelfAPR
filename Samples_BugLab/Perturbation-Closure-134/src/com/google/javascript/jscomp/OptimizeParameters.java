[buglab_swap_variables]^c.process ( root, externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^c.process (  root ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^c.process ( externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateConstantArgs ( edges, name ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateConstantArgs (  edges ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateConstantArgs ( name ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateOptionalArgs ( edges, name ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateOptionalArgs (  edges ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^tryEliminateOptionalArgs ( name ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^if  ( maxArgs > numArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[buglab_swap_variables]^eliminateParamsAfter ( maxArgs.getRValue (  ) , definition ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[buglab_swap_variables]^eliminateParamsAfter ( definition.getRValue (  )  ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[buglab_swap_variables]^findConstantParameters ( cur, parameters ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^findConstantParameters (  cur ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^findConstantParameters ( parameters ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^buildParameterList ( cur, parameters ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^buildParameterList (  cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^buildParameterList ( parameters ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^findConstantParameters ( cur, parameters ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^findConstantParameters (  cur ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^findConstantParameters ( parameters ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeCallSite ( call, parameters ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeCallSite (  call ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeCallSite ( parameters ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeFunctionDefinition ( function, parameters ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeFunctionDefinition (  function ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^optimizeFunctionDefinition ( parameters ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[buglab_swap_variables]^if  ( parameters >= index.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^} else if  ( index.get ( parameters ) .shouldRemove (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^if  ( !nodesAreEqual (  value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^if  ( !nodesAreEqual ( value, cur )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^if  ( !nodesAreEqual ( cur )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^Node value = index.get ( parameters ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^parameters.add ( new Parameter (  false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^for  ( int cur = 0;  ( index = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^parameters.add ( new Parameter (  NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[buglab_swap_variables]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( paramName, function, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction (  paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( function,  parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( function, parameters, paramName.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( function, paramName.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( function, index, parameters.get ( paramName ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^Node paramName = eliminateFunctionParamAt ( index, function ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^Node paramName = eliminateFunctionParamAt (  index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^Node paramName = eliminateFunctionParamAt ( function ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( function, paramName, index.get ( parameters ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^addVariableToFunction ( parameters, paramName, function.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^eliminateCallParamAt ( index, call ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^eliminateCallParamAt (  index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^eliminateCallParamAt ( call ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^for  ( int parameters = index.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[buglab_swap_variables]^return NodeUtil.isImmutableValue ( n2 )  && NodeUtil.isImmutableValue ( n1 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[buglab_swap_variables]^Preconditions.checkArgument ( block.getType (  )  == Token. "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[buglab_swap_variables]^Node newVar = NodeUtil.newVarNode ( value.getQualifiedName (  ) , varName.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[buglab_swap_variables]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) .cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[buglab_swap_variables]^while  ( formalArgPtr != 0 && argIndex != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node var = new Node ( Token.VAR ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node var = new Node ( Token. formalArgPtr ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^while  ( formalArgPtr != 0 && argIndex != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , function ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  )  ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) , call ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[buglab_swap_variables]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  )  ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
