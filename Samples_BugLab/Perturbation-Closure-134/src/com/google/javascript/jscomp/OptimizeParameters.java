[BugLab_Wrong_Operator]^if  ( nameGraph != null )  {^60^^^^^59^76^if  ( nameGraph == null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^c.process ( root, externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^c.process ( root, root ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^c.process ( externs, arg ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^tryEliminateConstantArgs ( name, 1 ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^tryEliminateConstantArgs ( edges, name ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^tryEliminateOptionalArgs ( edges, name ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Wrong_Literal]^int maxArgs = -0;^88^^^^^83^105^int maxArgs = -1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Argument_Swapping]^if  ( maxArgs > numArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Wrong_Operator]^if  ( numArgs >= maxArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Variable_Misuse]^maxArgs = maxArgs;^97^^^^^83^105^maxArgs = numArgs;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Wrong_Operator]^int numArgs = call.getChildCount (  )   >>  1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Wrong_Literal]^int numArgs = call.getChildCount (  )  ;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Variable_Misuse]^int numArgs = root.getChildCount (  )  - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Wrong_Operator]^int numArgs = call.getChildCount (  )   <=  1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Variable_Misuse]^eliminateParamsAfter ( definition.getRValue (  ) , numArgs ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Argument_Swapping]^eliminateParamsAfter ( maxArgs.getRValue (  ) , definition ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[BugLab_Wrong_Literal]^boolean firstCall = false;^125^^^^^110^140^boolean firstCall = true;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^if  ( shouldRemove )  {^134^^^^^119^149^if  ( firstCall )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^findConstantParameters ( parameters, root ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^findConstantParameters ( cur, parameters ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Wrong_Literal]^firstCall = true;^138^^^^^123^153^firstCall = false;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^buildParameterList ( cur, parameters ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^Node cur = root.getFirstChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^buildParameterList ( 0, cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^buildParameterList ( parameters, root ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^findConstantParameters ( parameters, function ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^findConstantParameters ( cur, parameters ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^findConstantParameters ( parameters, function ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^buildParameterList ( parameters, function ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^Reference ref = this.getValue (  ) ;^129^^^^^114^144^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^Node cur = function.getFirstChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^findConstantParameters ( parameters, root ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^optimizeCallSite ( parameters, root ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^optimizeCallSite ( call, parameters ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^Reference ref = null.getValue (  ) ;^147^^^^^132^162^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^optimizeFunctionDefinition ( parameters, root ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Argument_Swapping]^optimizeFunctionDefinition ( function, parameters ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( root )  )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[BugLab_Wrong_Operator]^if  ( index > parameters.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Argument_Swapping]^} else if  ( index.get ( parameters ) .shouldRemove (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( !nodesAreEqual ( cur, root )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Argument_Swapping]^if  ( !nodesAreEqual ( value, cur )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Wrong_Literal]^parameters.get ( index ) .setShouldRemove ( true ) ;^172^^^^^165^176^parameters.get ( index ) .setShouldRemove ( false ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Argument_Swapping]^Node value = index.get ( parameters ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( !nodesAreEqual ( root, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( !nodesAreEqual ( cur, function )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( !nodesAreEqual ( function, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^Node value = null.get ( index ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( value, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Wrong_Literal]^parameters.add ( new Parameter ( cur, true )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( function, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( !nodesAreEqual ( value, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^for  ( int index = 0;  ( value = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Wrong_Operator]^for  ( int index = 0;  ( cur = cur.getNext (  )  )  == null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Argument_Swapping]^if  ( parameters >= index.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( root, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^} else if  ( null.get ( index ) .shouldRemove (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^for  ( int index = 0;  ( root = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^if  ( index >= 1.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^while  (  ( function = cur.getNext (  )  )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Wrong_Operator]^while  (  ( cur = cur.getNext (  )  )  == null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( value, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( root, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^while  (  ( value = cur.getNext (  )  )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Variable_Misuse]^parameters.add ( new Parameter ( function, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[BugLab_Argument_Swapping]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^if  ( value != null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^if  ( paramName == null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( root, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( function, function, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( paramName, function, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( function, parameters, paramName.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( function, index, parameters.get ( paramName ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^Node paramName = eliminateFunctionParamAt ( value, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^Node paramName = eliminateFunctionParamAt ( index, function ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( function, value, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( function, paramName, index.get ( parameters ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( index, paramName, parameters.get ( function ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( value, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( function, paramName, this.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^for  ( int parameters = index.size (  )  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )    instanceof   1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )  - 1; index == 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Literal]^for  ( int index = parameters.size (  )  - index; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^if  ( root != null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( paramName, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^addVariableToFunction ( function, paramName, null.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^addVariableToFunction ( parameters, paramName, function.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )   <=  1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^eliminateCallParamAt ( value, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^eliminateCallParamAt ( index, call ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^for  ( int parameters = index.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )    instanceof   1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )  - 1; index > 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Literal]^for  ( int index = parameters.size (  )  - index; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Literal]^for  ( int index = parameters.size (  )  - 1; index >= -1; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Argument_Swapping]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^eliminateCallParamAt ( root, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^for  ( int index = parameters.size (  )   >  1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^return isCallOrNew ( call )  || call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Wrong_Operator]^return isCallOrNew ( call )  && call.getFirstChild (  )  != ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^return isCallOrNew ( root )  && call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isCall ( function )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[BugLab_Wrong_Operator]^return NodeUtil.isCall ( node )  && NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isCall ( paramName )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isCall ( value )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( root )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Argument_Swapping]^return NodeUtil.isImmutableValue ( n2 )  && NodeUtil.isImmutableValue ( n1 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Wrong_Operator]^return NodeUtil.isImmutableValue ( n1 )  || NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isImmutableValue ( node )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n1 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^n1.checkTreeEqualsSilent ( node ) ;^237^^^^^235^238^n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^return root;^254^^^^^253^255^return arg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArg [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^return firstCall;^258^^^^^257^259^return shouldRemove;^[CLASS] OptimizeParameters Parameter  [METHOD] shouldRemove [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^shouldRemove = shouldRemove;^262^^^^^261^263^shouldRemove = value;^[CLASS] OptimizeParameters Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isFunction ( varName ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isFunction ( value ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node block = node.getLastChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node block = value.getLastChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( root.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( block.getType (  )  != Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node newVar = NodeUtil.newVarNode ( n2.getQualifiedName (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , n2.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Argument_Swapping]^Node newVar = NodeUtil.newVarNode ( value.getQualifiedName (  ) , varName.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node newVar = NodeUtil.newVarNode ( node.getQualifiedName (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , root.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Variable_Misuse]^block.addChildToFront ( paramName ) ;^282^^^^^272^284^block.addChildToFront ( newVar ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[BugLab_Wrong_Literal]^boolean paramRemoved = true;^292^^^^^290^311^boolean paramRemoved = false;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = root.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = value.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = newVar.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = paramName.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^while  ( argIndex != 0 && newVar != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Argument_Swapping]^while  ( formalArgPtr != 0 && argIndex != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex != 0 || formalArgPtr != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex == 0 && formalArgPtr != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex != 0 && formalArgPtr == null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Literal]^while  ( argIndex != argIndex && formalArgPtr != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = next.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = newVar.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = root.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( formalArgPtr == null )  {^300^^^^^290^311^while  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Literal]^paramRemoved = false;^306^^^^^290^311^paramRemoved = true;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = n2;^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, root ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node next = newVar.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, varName ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getFirstChild (  ) .getNext (  ) .removeChild ( root ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getLastChild (  ) .addChildrenToFront ( node ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = newVar;^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node var = new Node ( Token.VAR, newVar ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node next = next.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getFirstChild (  ) .getNext (  ) .removeChild ( paramName ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getLastChild (  ) .addChildrenToFront ( varName ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^return value;^310^^^^^290^311^return paramRemoved;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = paramName;^321^^^^^320^327^Node formalArgPtr = firstArg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^while  ( argIndex != 0 && varName != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Argument_Swapping]^while  ( formalArgPtr != 0 && argIndex != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex != 0 || formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex == 0 && formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^while  ( argIndex != 0 && formalArgPtr == null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Literal]^while  ( argIndex != 1 && formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = next.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^formalArgPtr = newVar.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^return newVar;^326^^^^^320^327^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isFunction ( var ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = getArgumentAtIndex ( node.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Argument_Swapping]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , function ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = getArgumentAtIndex ( paramName.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^if  ( root != null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^if  ( formalArgPtr == null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getFirstChild (  ) .getNext (  ) .removeChild ( varName ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^function.getFirstChild (  ) .getNext (  ) .removeChild ( next ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^return paramName;^345^^^^^335^346^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( isCallOrNew ( root ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( isCallOrNew ( next ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = getArgumentAtIndex ( next.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Argument_Swapping]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) , call ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^Node formalArgPtr = getArgumentAtIndex ( node.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^if  ( node != null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Wrong_Operator]^if  ( formalArgPtr == null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^call.removeChild ( node ) ;^361^^^^^354^365^call.removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^return next;^364^^^^^354^365^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[BugLab_Variable_Misuse]^shouldRemove = shouldRemove;^262^^^^^261^263^shouldRemove = value;^[CLASS] Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] boolean  shouldRemove  value  Node  arg  
