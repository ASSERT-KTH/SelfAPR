[BugLab_Wrong_Operator]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal "  <  "expected.  Was \"{0}\"." ) ;^66^67^68^69^^66^69^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", "goog.getCssName called with invalid argument, string literal " + "expected.  Was \"{0}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  ==  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  |  Did you mean " +^71^72^73^74^^71^75^static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR = DiagnosticType.error ( "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", "goog.getCssName called with invalid arguments, string literal " + "passed as first of two arguments.  Did you mean " +^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class "  &  "\"{1}\"." ) ;^77^78^79^80^^77^80^static final DiagnosticType UNKNOWN_SYMBOL_WARNING = DiagnosticType.warning ( "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", "goog.getCssName called with unrecognized symbol \"{0}\" in class " + "\"{1}\"." ) ;^[CLASS] ReplaceCssNames Traversal   [VARIABLES] 
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Traversal (  )  ) ;^102^^^^^96^103^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  externs  root  String  GET_CSS_NAME_FUNCTION  Map  cssNames  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, replacement ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^processStringNode ( first, t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^n.removeChild ( second ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( second, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, second ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^parent.replaceChild ( first, n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  <= Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^} else if  ( second.getType (  )  > Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + first.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  <<  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + parent.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  |  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, parent ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^processStringNode ( second, t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^n.removeChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node.newString ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  ==  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node.newString ( "-" + parent.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( second, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, second ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ^  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  !=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^parent.replaceChild ( replacement, n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( first, n, UNEXPECTED_STRING_LITERAL_ERROR, t.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, UNEXPECTED_STRING_LITERAL_ERROR, n.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , first.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, first, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , n.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNEXPECTED_STRING_LITERAL_ERROR, n, t, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^} else if  ( second.getType (  )  >= Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  !=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, replacement ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  <  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  <=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node first = second.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node second = replacement.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^int count = second.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node first = replacement.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^Node second = second.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNEXPECTED_STRING_LITERAL_ERROR, n, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , t.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  <<  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( parent.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( count, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( t )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, count, String.valueOf ( INVALID_NUM_ARGUMENTS_ERROR )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, second ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( first.getType (  )  == Token.null )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  &  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  >  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^first.getString (  ) , parent.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  >=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^GET_CSS_NAME_FUNCTION.equals ( second.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, second, first.getString (  ) , UNEXPECTED_STRING_LITERAL_ERROR.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, count, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( n )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  first  n  parent  replacement  second  String  GET_CSS_NAME_FUNCTION  Map  cssNames  int  count  
[BugLab_Wrong_Operator]^if  ( symbolMap != null && cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null || cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap != null || cssNames == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( cssNames == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( count != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( -1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( i ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf (  ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^Integer count = parts.get ( cssNames[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   |  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^cssNames.put ( parts[i], count.intValue (  )  +  ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^if  ( n != symbolMapull )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Variable_Misuse]^if  ( GET_CSS_NAME_FUNCTION == null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( replacement != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( parts, n, UNKNOWN_SYMBOL_WARNING, t[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, parts, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNKNOWN_SYMBOL_WARNING, n, t, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, parts, UNKNOWN_SYMBOL_WARNING, n[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Variable_Misuse]^parts[i] = GET_CSS_NAME_FUNCTION;^194^^^^^175^201^parts[i] = replacement;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNKNOWN_SYMBOL_WARNING, n, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^if  ( n != symbolMapull )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^cssNames.put ( count[i], parts.intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   ^  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^cssNames.put ( parts[i], count.intValue (  )   ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^String replacement = parts.get ( symbolMap[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^if  ( n == replacementull )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )    instanceof   1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   <=  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   ==  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^cssNames.put ( parts[i], count.intValue (  )  + i ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^for  ( parts.lengthnt i = 0; i < i; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < parts.length.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^for  <  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   >>  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] ReplaceCssNames Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  AbstractCompiler  compiler  boolean  CssRenamingMap  symbolMap  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  STRING_LITERAL_EXPECTED_ERROR  UNEXPECTED_STRING_LITERAL_ERROR  UNKNOWN_SYMBOL_WARNING  Node  n  String  GET_CSS_NAME_FUNCTION  replacement  String[]  parts  Map  cssNames  int  i  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.CALL || GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^114^115^^^^99^129^if  ( n.getType (  )  == Token.CALL && GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  >= Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, second ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^processStringNode ( first, t ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^n.removeChild ( second ) ;^123^^^^^108^138^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( second, first ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, second ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^parent.replaceChild ( first, n ) ;^124^^^^^109^139^parent.replaceChild ( n, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^if  ( second.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  != Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^} else if  ( second.getType (  )  >= Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( parent.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, replacement, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + replacement.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + first.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  <=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, second, Node.newString ( "-" + second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + parent.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ^  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, parent ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^processStringNode ( second, t ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^n.removeChild ( second ) ;^145^^^^^130^160^n.removeChild ( first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node.newString ( "-" + parent.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  <  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( second, replacement ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, second ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  <  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  &&  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, replacement ) ;^144^^^^^129^159^processStringNode ( t, second ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node.newString ( "-" + replacement.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  ||  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^parent.replaceChild ( replacement, n ) ;^148^^^^^133^163^parent.replaceChild ( n, replacement ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( replacement.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( second, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , t.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, UNEXPECTED_STRING_LITERAL_ERROR, n.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , first.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNEXPECTED_STRING_LITERAL_ERROR, n, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, second.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , replacement.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( first, n, UNEXPECTED_STRING_LITERAL_ERROR, t.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, first, UNEXPECTED_STRING_LITERAL_ERROR.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^first.getString (  ) , replacement.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, replacement, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, n, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^153^^^^^143^154^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"   instanceof   second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  &  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  !=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  !=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^int count = second.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node first = second.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node second = replacement.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node first = replacement.getFirstChild (  ) .getNext (  ) ;^117^^^^^102^132^Node first = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( first, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( t.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, first, STRING_LITERAL_EXPECTED_ERROR, Token.name ( n.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, first, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^127^128^^^^112^142^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( second.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Node second = second.getNext (  ) ;^136^^^^^121^151^Node second = first.getNext (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNEXPECTED_STRING_LITERAL_ERROR, n, t, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, second, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , n.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  |  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^153^^^^^138^168^Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, count, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( n )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, count, String.valueOf ( INVALID_NUM_ARGUMENTS_ERROR )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  < Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, n, t, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^127^128^^^^121^129^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^121^129^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^if  ( first.getType (  )  <= Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^} else if  ( second.getType (  )  != Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, second, Token.name ( STRING_LITERAL_EXPECTED_ERROR.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  ==  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  >=  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ||  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node.newString ( "-"  <=  second.getString (  )  )  ) ;^147^^^^^132^162^Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, second, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( parent.getType (  )  )  )  ) ;^152^153^^^^137^167^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, replacement.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^first.getString (  ) , parent.getString (  )  )  ) ;^141^^^^^126^156^first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^} else if  ( second.getType (  )  > Token.STRING )  {^143^^^^^128^158^} else if  ( second.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, 1, Token.name ( second.getType (  )  )  )  ) ;^152^153^^^^143^154^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name ( second.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  ==  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Wrong_Operator]^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-"  |  second.getString (  )  )  ) ;^146^147^^^^131^161^Node replacement = new Node ( Token.ADD, first, Node.newString ( "-" + second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^GET_CSS_NAME_FUNCTION.equals ( second.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^GET_CSS_NAME_FUNCTION.equals ( replacement.getFirstChild (  ) .getQualifiedName (  )  )  )  {^115^^^^^100^130^GET_CSS_NAME_FUNCTION.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^int count = replacement.getChildCount (  ) ;^116^^^^^101^131^int count = n.getChildCount (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.STRING )  {^121^^^^^106^136^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^processStringNode ( t, replacement ) ;^122^^^^^107^137^processStringNode ( t, first ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^Token.name ( replacement.getType (  )  )  )  ) ;^128^^^^^113^143^Token.name ( first.getType (  )  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.STRING )  {^138^^^^^123^153^if  ( first.getType (  )  == Token.STRING )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, 1, first.getString (  ) , second.getString (  )  )  ) ;^139^140^141^^^124^154^compiler.report ( JSError.make ( t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString (  ) , second.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( count, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( t )  )  ) ;^158^159^^^^143^173^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf ( count )  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  first  n  parent  replacement  second  int  count  
[BugLab_Variable_Misuse]^if  ( symbolMap != null || null != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap != null && cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null || cssNames != null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap != null || cssNames == null )  {^176^^^^^175^201^if  ( symbolMap != null || cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( cssNames == null )  {^179^^^^^175^201^if  ( cssNames != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( count != null )  {^181^^^^^175^201^if  ( count == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( i ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^Integer count = parts.get ( cssNames[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^cssNames.put ( count[i], parts.intValue (  )  + 1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   <<  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^cssNames.put ( parts[i], count.intValue (  )  + i ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( 1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( replacement != null )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, parts, UNKNOWN_SYMBOL_WARNING, n[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, parts, UNKNOWN_SYMBOL_WARNING[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNKNOWN_SYMBOL_WARNING, n, t, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNKNOWN_SYMBOL_WARNING, n, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^String replacement = parts.get ( symbolMap[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( parts, n, UNKNOWN_SYMBOL_WARNING, t[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^if  ( n != symbolMapull )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^if  ( symbolMap == null )  {^197^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^for  ( partsnt i = 0; i < i.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf (  ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^count = Integer.valueOf ( -1 ) ;^182^^^^^175^201^count = Integer.valueOf ( 0 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   >  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^if  ( n != symbolMapull )  {^186^^^^^175^201^if  ( symbolMap != null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, null, parts[i], n.getString (  )  )  ) ;^190^191^^^^175^201^compiler.report ( JSError.make ( t, n, UNKNOWN_SYMBOL_WARNING, parts[i], n.getString (  )  )  ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Variable_Misuse]^Integer count = null.get ( parts[i] ) ;^180^^^^^175^201^Integer count = cssNames.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   ^  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^cssNames.put ( parts[i], count.intValue (  )   ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   ==  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   !=  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^if  ( n == replacementull )  {^188^^^^^175^201^if  ( replacement == null )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Argument_Swapping]^for  ( parts.lengthnt i = 0; i < i; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^for  >=  ( int i = 0; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < parts.length; i++ )  {^178^^^^^175^201^for  ( int i = 0; i < parts.length; i++ )  {^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )   ||  1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Variable_Misuse]^String replacement = this.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Variable_Misuse]^String replacement = 2.get ( parts[i] ) ;^187^^^^^175^201^String replacement = symbolMap.get ( parts[i] ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
[BugLab_Wrong_Operator]^cssNames.put ( parts[i], count.intValue (  )    instanceof   1 ) ;^184^^^^^175^201^cssNames.put ( parts[i], count.intValue (  )  + 1 ) ;^[CLASS] Traversal  [METHOD] processStringNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Integer  count  boolean  NodeTraversal  t  Node  n  String[]  parts  String  replacement  int  i  
