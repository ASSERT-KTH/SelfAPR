[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( jsDoc != null ||  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( jsDoc == null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  && jsDoc.hasThisType (  )  )  )  {^88^^^^^73^103^if  ( jsDoc != null &&  ( jsDoc.isConstructor (  )  || jsDoc.hasThisType (  )  )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return true;^89^^^^^74^104^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^JSDocInfo jsDoc = getFunctionJsDocInfo ( rhs ) ;^87^^^^^72^102^JSDocInfo jsDoc = getFunctionJsDocInfo ( n ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION )  {^84^^^^^69^99^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs != null && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent != rhsull && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Argument_Swapping]^if  ( n != parentull && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  == Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( parent != null && parent.getType (  )  != Token.ASSIGN )  {^93^^^^^78^108^if  ( parent != null && parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs == lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( n == rhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Argument_Swapping]^if  ( lhs == n )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( n != lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  <= Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return true;^109^^^^^97^116^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( leftName != null || leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^97^116^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return true;^113^^^^^97^116^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^String leftName = parent.getQualifiedName (  ) ;^111^^^^^97^116^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^97^116^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs == null )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( assignLhsChild != null )  {^101^^^^^86^116^if  ( assignLhsChild == null )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^assignLhsChild = rhs;^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^assignLhsChild = parent;^102^^^^^87^117^assignLhsChild = lhs;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  != Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( rhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return true;^109^^^^^94^124^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( leftName != null || leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( leftName == null && leftName.contains ( ".prototype." )  )  {^112^^^^^97^127^if  ( leftName != null && leftName.contains ( ".prototype." )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return true;^113^^^^^98^128^return false;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^String leftName = rhs.getQualifiedName (  ) ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^108^^^^^93^123^if  ( lhs.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^String leftName = parent.getQualifiedName (  ) ;^111^^^^^96^126^String leftName = lhs.getQualifiedName (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = parent.getFirstChild (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^Node rhs = parent.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^Node rhs = rhs.getNext (  ) ;^95^^^^^80^110^Node rhs = lhs.getNext (  ) ;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent == lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( n <= lhs )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  >= Token.GETPROP )  {^107^^^^^97^116^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  >= Token.GETPROP )  {^107^^^^^92^122^if  ( lhs.getType (  )  == Token.GETPROP )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Wrong_Literal]^return false;^119^^^^^104^134^return true;^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[BugLab_Variable_Misuse]^if  ( assignLhsChild != rhsull && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( rhs != null && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^if  ( n != assignLhsChildull && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( assignLhsChild != null || n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( assignLhsChild == null && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( assignLhsChild != null && n.getType (  )  != Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, rhs, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, level, n, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, GLOBAL_THIS, level, n )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( level, n, t, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, GLOBAL_THIS, level )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( GLOBAL_THIS, n, level, t )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( rhs == assignLhsChild )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^if  ( n == rhs )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Argument_Swapping]^if  ( assignLhsChild == n )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Wrong_Operator]^if  ( n <= assignLhsChild )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[BugLab_Variable_Misuse]^JSDocInfo jsDoc = parent.getJSDocInfo (  ) ;^142^^^^^141^157^JSDocInfo jsDoc = n.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^Node parent = rhs.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^143^^^^^141^157^Node parent = n.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( jsDoc != null )  {^144^^^^^141^157^if  ( jsDoc == null )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( rhsType == Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( parentType == Token.NAME && parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( parentType != Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( parentType >= Token.NAME || parentType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( jsDoc == null && rhsType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Argument_Swapping]^if  ( parent == null && jsDocType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Argument_Swapping]^if  ( jsDoc == null && parent == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( jsDoc == null || parentType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( jsDoc != null && parentType == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( gramps.getType (  )  != Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^jsDoc = rhs.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^jsDoc = parent.getJSDocInfo (  ) ;^151^^^^^141^157^jsDoc = gramps.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^jsDoc = n.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^Node gramps = rhs.getParent (  ) ;^149^^^^^141^157^Node gramps = parent.getParent (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( jsDoc == null && parentType == Token.null )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Argument_Swapping]^if  ( parentType == null && jsDoc == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^if  ( gramps.getType (  )  == Token.4 )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( gramps.getType (  )  > Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^int nType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^int rhsType = parent.getType (  ) ;^145^^^^^141^157^int parentType = parent.getType (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Variable_Misuse]^jsDoc = rhs.getJSDocInfo (  ) ;^147^^^^^141^157^jsDoc = parent.getJSDocInfo (  ) ;^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Argument_Swapping]^if  ( parent == Token.NAME || parentTypeType == Token.ASSIGN )  {^146^^^^^141^157^if  ( parentType == Token.NAME || parentType == Token.ASSIGN )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( gramps.getType (  )  >= Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
[BugLab_Wrong_Operator]^if  ( gramps.getType (  )  < Token.VAR )  {^150^^^^^141^157^if  ( gramps.getType (  )  == Token.VAR )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
