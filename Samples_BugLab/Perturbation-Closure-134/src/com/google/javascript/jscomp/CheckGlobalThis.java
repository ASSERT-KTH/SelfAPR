[buglab_swap_variables]^if  ( lhs == n )  {^97^^^^^82^112^if  ( n == lhs )  {^[CLASS] CheckGlobalThis  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  String  leftName  JSDocInfo  jsDoc  
[buglab_swap_variables]^if  ( n != assignLhsChildull && n.getType (  )  == Token.THIS )  {^123^^^^^122^129^if  ( assignLhsChild != null && n.getType (  )  == Token.THIS )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  level, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( GLOBAL_THIS, n, level, t )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, level )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, GLOBAL_THIS, level, n )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, GLOBAL_THIS, level )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, level, n, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^compiler.report ( JSError.make ( level, n, t, GLOBAL_THIS )  ) ;^124^^^^^122^129^compiler.report ( JSError.make ( t, n, level, GLOBAL_THIS )  ) ;^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^if  ( assignLhsChild == n )  {^126^^^^^122^129^if  ( n == assignLhsChild )  {^[CLASS] CheckGlobalThis  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  lhs  n  parent  rhs  
[buglab_swap_variables]^if  ( jsDoc == null && parent == Token.NAME )  {^148^^^^^141^157^if  ( jsDoc == null && parentType == Token.NAME )  {^[CLASS] CheckGlobalThis  [METHOD] getFunctionJsDocInfo [RETURN_TYPE] JSDocInfo   Node n [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  GLOBAL_THIS  CheckLevel  level  Node  assignLhsChild  gramps  lhs  n  parent  rhs  JSDocInfo  jsDoc  int  parentType  
