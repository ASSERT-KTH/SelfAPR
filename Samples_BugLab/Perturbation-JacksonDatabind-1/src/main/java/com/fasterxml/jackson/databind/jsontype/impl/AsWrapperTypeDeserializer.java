[BugLab_Argument_Swapping]^super ( typePropertyName, idRes, bt, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[BugLab_Argument_Swapping]^super ( idRes, bt, typePropertyName, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[BugLab_Argument_Swapping]^super ( bt, typePropertyName, idRes, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[BugLab_Argument_Swapping]^super ( typeIdVisible, idRes, typePropertyName, bt, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[BugLab_Argument_Swapping]^super ( property, src ) ;^36^^^^^35^37^super ( src, property ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] BeanProperty)   AsWrapperTypeDeserializer src BeanProperty property [VARIABLES] boolean  long  serialVersionUID  AsWrapperTypeDeserializer  src  BeanProperty  property  
[BugLab_Argument_Swapping]^if  ( _property == prop )  {^42^^^^^40^46^if  ( prop == _property )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[BugLab_Wrong_Operator]^if  ( prop <= _property )  {^42^^^^^40^46^if  ( prop == _property )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[BugLab_Argument_Swapping]^return _deserialize ( ctxt, jp ) ;^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^return _deserialize ( ctxt, jp ) ;^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^return _deserialize ( ctxt, jp ) ;^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^return _deserialize ( ctxt, jp ) ;^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_OBJECT.getCurrentToken (  )  != jp )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^if  ( jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^throw jp.wrongTokenException ( ctxt, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  >=  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  <  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  >>  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^if  ( JsonToken.FIELD_NAME.nextToken (  )  != jp )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^if  ( jp.nextToken (  )  <= JsonToken.FIELD_NAME )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^throw jp.wrongTokenException ( ctxt, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id   instanceof   ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ||  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  >  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  <<  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  <=  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  >>  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  >=  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^JsonDeserializer<Object> deser = _findDeserializer ( typeId, ctxt ) ;^109^^^^^94^124^JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_OBJECT && jp.getCurrentToken (  )  == _typeIdVisible )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^if  ( _typeIdVisible || jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^if  ( _typeIdVisible && jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^jp = JsonParserSequence.createFlattened ( jp.asParser ( tb ) , jp ) ;^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Variable_Misuse]^tb.writeFieldName ( 1 ) ;^118^^^^^103^133^tb.writeFieldName ( _typePropertyName ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Variable_Misuse]^Object value = 4.deserialize ( jp, ctxt ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^Object value = jp.deserialize ( deser, ctxt ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^Object value = deser.deserialize ( ctxt, jp ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^Object value = ctxt.deserialize ( jp, deser ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^if  ( JsonToken.END_OBJECT.nextToken (  )  != jp )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Wrong_Operator]^if  ( jp.nextToken (  )  == JsonToken.END_OBJECT )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[BugLab_Argument_Swapping]^throw jp.wrongTokenException ( ctxt, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
