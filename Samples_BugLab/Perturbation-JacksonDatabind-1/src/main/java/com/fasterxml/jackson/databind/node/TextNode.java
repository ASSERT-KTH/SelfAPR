[BugLab_Variable_Misuse]^public TextNode ( String _value )  { _value = v; }^24^^^^^19^29^public TextNode ( String v )  { _value = v; }^[CLASS] TextNode  [METHOD] <init> [RETURN_TYPE] String)   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Variable_Misuse]^if  ( _value == null )  {^37^^^^^35^44^if  ( v == null )  {^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Wrong_Operator]^if  ( v != null )  {^37^^^^^35^44^if  ( v == null )  {^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Wrong_Operator]^if  ( v.length (  )  <= 0 )  {^40^^^^^35^44^if  ( v.length (  )  == 0 )  {^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Wrong_Literal]^if  ( v.length (  )  == INT_SPACE )  {^40^^^^^35^44^if  ( v.length (  )  == 0 )  {^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Variable_Misuse]^if  ( _value.length (  )  == 0 )  {^40^^^^^35^44^if  ( v.length (  )  == 0 )  {^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Variable_Misuse]^return new TextNode ( _value ) ;^43^^^^^35^44^return new TextNode ( v ) ;^[CLASS] TextNode  [METHOD] valueOf [RETURN_TYPE] TextNode   String v [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Variable_Misuse]^return EMPTY_STRING_NODE;^49^^^^^47^50^return JsonNodeType.STRING;^[CLASS] TextNode  [METHOD] getNodeType [RETURN_TYPE] JsonNodeType   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Variable_Misuse]^return v;^56^^^^^55^57^return _value;^[CLASS] TextNode  [METHOD] textValue [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  v  boolean  int  INT_SPACE  
[BugLab_Wrong_Literal]^ByteArrayBuilder builder = new ByteArrayBuilder (  ) ;^68^^^^^53^83^ByteArrayBuilder builder = new ByteArrayBuilder ( 100 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^final String str = v;^69^^^^^54^84^final String str = _value;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^int ptr = bits;^70^^^^^55^85^int ptr = 0;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^int len = v.length (  ) ;^71^^^^^56^86^int len = str.length (  ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^while  ( len < len )  {^74^^^^^59^89^while  ( ptr < len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^while  ( ptr < decodedData )  {^74^^^^^59^89^while  ( ptr < len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^while  ( ptr <= len )  {^74^^^^^59^89^while  ( ptr < len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^while  ( ptr > len )  {^74^^^^^59^89^while  ( ptr < len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( decodedData >= len )  {^79^^^^^64^94^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= decodedData )  {^79^^^^^64^94^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^if  ( len >= ptr )  {^79^^^^^64^94^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr > len )  {^79^^^^^64^94^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len < 0 )  {^84^^^^^69^99^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits == 0 )  {^84^^^^^69^99^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits < 1 )  {^84^^^^^69^99^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( ch, b64variant, 0 ) ;^85^^^^^70^100^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= decodedData )  {^89^^^^^74^104^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^if  ( len >= ptr )  {^89^^^^^74^104^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr == len )  {^89^^^^^74^104^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr < 0 )  {^94^^^^^79^109^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits <= 0 )  {^94^^^^^79^109^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits < -1 )  {^94^^^^^79^109^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( ch, b64variant, 1 ) ;^95^^^^^80^110^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, ptr ) ;^95^^^^^80^110^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= decodedData )  {^99^^^^^84^114^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr == len )  {^99^^^^^84^114^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= 5;^103^^^^^88^118^decodedData >>= 4;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.append ( len ) ;^104^^^^^89^119^builder.append ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.append ( ptr ) ;^104^^^^^89^119^builder.append ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( !b6variant.usesPadding (  )  )  {^101^^^^^86^116^if  ( !b64variant.usesPadding (  )  )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len < 0 )  {^113^^^^^98^128^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits > 0 )  {^113^^^^^98^128^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr != Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( bits != EMPTY_STRING_NODE )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits >= Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( ch, b64variant, 2 ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, ptr ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( decodedData >= len )  {^118^^^^^103^133^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= decodedData )  {^118^^^^^103^133^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^if  ( len >= ptr )  {^118^^^^^103^133^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr > len )  {^118^^^^^103^133^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( ch, b64variant, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ^  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ==  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^ch = v.charAt ( ptr++ ) ;^121^^^^^106^136^ch = str.charAt ( ptr++ ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch,  ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  <<  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ||  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, len, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.append ( len ) ;^127^^^^^112^142^builder.append ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len != Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits <= Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (   instanceof   ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  >  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, 2, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( decodedData >= len )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= decodedData )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^if  ( len >= ptr )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr > len )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= 3;^136^^^^^121^151^decodedData >>= 2;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendTwoBytes ( ptr ) ;^137^^^^^122^152^builder.appendTwoBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= ptr;^136^^^^^121^151^decodedData >>= 2;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendTwoBytes ( len ) ;^137^^^^^122^152^builder.appendTwoBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr < 0 )  {^144^^^^^129^159^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits == 0 )  {^144^^^^^129^159^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits < decodedData )  {^144^^^^^129^159^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( ptr << 6 )  | bits;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( decodedData << 6 )  | ptr;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^decodedData =  ( bits << 6 )  | decodedData;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  &&  =  ( decodedData << 6 )  | bits;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData   instanceof   6 )  | bits;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr != Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( bits != EMPTY_STRING_NODE )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^if  ( Base64Variant.BASE64_VALUE_PADDING != bits )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits >= Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( ch, b64variant, 3 ) ;^146^^^^^131^161^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^146^^^^^131^161^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendTwoBytes ( len ) ;^149^^^^^134^164^builder.appendTwoBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits == Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, INT_SPACE ) ;^146^^^^^131^161^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^ch = v.charAt ( ptr++ ) ;^78^^^^^63^93^ch = str.charAt ( ptr++ ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^ch = v.charAt ( ptr++ ) ;^92^^^^^77^107^ch = str.charAt ( ptr++ ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^bits = ch.decodeBase64Char ( b64variant ) ;^93^^^^^78^108^bits = b64variant.decodeBase64Char ( ch ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( ptr << 6 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( decodedData << 6 )  | ptr;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^decodedData =  ( bits << 6 )  | decodedData;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  &&  =  ( decodedData << 6 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData   instanceof   6 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << 5 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= INT_SPACE;^103^^^^^88^118^decodedData >>= 4;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^ch = v.charAt ( ptr++ ) ;^109^^^^^94^124^ch = str.charAt ( ptr++ ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^bits = ch.decodeBase64Char ( b64variant ) ;^110^^^^^95^125^bits = b64variant.decodeBase64Char ( ch ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( ptr << 6 )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( decodedData << 6 )  | ptr;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^decodedData =  ( bits << 6 )  | decodedData;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  >>  =  ( decodedData << 6 )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData  !=  6 )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << ptr )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^ch = v.charAt ( ptr++ ) ;^142^^^^^127^157^ch = str.charAt ( ptr++ ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^bits = ch.decodeBase64Char ( b64variant ) ;^143^^^^^128^158^bits = b64variant.decodeBase64Char ( ch ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( ptr << 6 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^decodedData =  ( bits << 6 )  | decodedData;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  &&  =  ( decodedData << 6 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData  &&  6 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << 5 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Argument_Swapping]^int bits = ch.decodeBase64Char ( b64variant ) ;^83^^^^^68^98^int bits = b64variant.decodeBase64Char ( ch ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^int decodedData = ptr;^87^^^^^72^102^int decodedData = bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, -1 ) ;^85^^^^^70^100^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, len ) ;^95^^^^^80^110^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, bits ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  &  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, ptr, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.append ( ptr ) ;^127^^^^^112^142^builder.append ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendThreeBytes ( len ) ;^153^^^^^138^168^builder.appendThreeBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr == len )  {^79^^^^^64^94^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits > 0 )  {^84^^^^^69^99^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits < ptr )  {^84^^^^^69^99^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, INT_SPACE ) ;^85^^^^^70^100^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( decodedData >= len )  {^89^^^^^74^104^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr > len )  {^89^^^^^74^104^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len >= len )  {^99^^^^^84^114^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr > len )  {^99^^^^^84^114^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( !b6ptrvariant.usesPadding (  )  )  {^101^^^^^86^116^if  ( !b64variant.usesPadding (  )  )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits == 0 )  {^113^^^^^98^128^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits <  )  {^113^^^^^98^128^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, INT_SPACE ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr == len )  {^118^^^^^103^133^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  &&  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= 5;^126^^^^^111^141^decodedData >>= 4;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, len ) ;^115^^^^^100^130^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  <=  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  <  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, decodedData, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits == Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^99^129^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  >=  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, 4, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^123^^^^^108^138^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len >= len )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( ptr >= ptr )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( ptr < len )  {^133^^^^^118^148^if  ( ptr >= len )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= len;^136^^^^^121^151^decodedData >>= 2;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( bits < bits )  {^144^^^^^129^159^if  ( bits < 0 )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  &  =  ( decodedData << 6 )  | bits;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << bits )  | bits;^152^^^^^144^154^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendThreeBytes ( ptr ) ;^153^^^^^144^154^builder.appendThreeBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits <= Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch,  ) ;^146^^^^^131^161^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendTwoBytes ( ptr ) ;^149^^^^^134^164^builder.appendTwoBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( len != Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( bits < Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^130^160^if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, 4 ) ;^146^^^^^131^161^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  &  =  ( decodedData << 6 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData  >  6 )  | bits;^97^^^^^82^112^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= 3;^126^^^^^111^141^decodedData >>= 4;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  <=  =  ( decodedData << 6 )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData  >>  6 )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << len )  | bits;^131^^^^^116^146^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData >>= decodedData;^148^^^^^133^163^decodedData >>= 2;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^decodedData =  ( decodedData << 6 )  | ptr;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData  >  =  ( decodedData << 6 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^decodedData =  ( decodedData  ==  6 )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^decodedData =  ( decodedData << INT_SPACE )  | bits;^152^^^^^137^167^decodedData =  ( decodedData << 6 )  | bits;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^85^^^^^70^100^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^builder.appendThreeBytes ( ptr ) ;^153^^^^^138^168^builder.appendThreeBytes ( decodedData ) ;^[CLASS] TextNode  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] boolean  char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  str  v  ByteArrayBuilder  builder  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^return v;^173^^^^^172^174^return _value;^[CLASS] TextNode  [METHOD] asText [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Operator]^if  ( _value == null )  {^180^^^^^179^186^if  ( _value != null )  {^[CLASS] TextNode  [METHOD] asBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  defaultValue  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^if  ( "true".equals ( v.trim (  )  )  )  {^181^^^^^179^186^if  ( "true".equals ( _value.trim (  )  )  )  {^[CLASS] TextNode  [METHOD] asBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  defaultValue  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^if  ( "false".equals ( _value.trim (  )  )  )  {^181^^^^^179^186^if  ( "true".equals ( _value.trim (  )  )  )  {^[CLASS] TextNode  [METHOD] asBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  defaultValue  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Wrong_Literal]^return false;^182^^^^^179^186^return true;^[CLASS] TextNode  [METHOD] asBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  defaultValue  int  INT_SPACE  bits  decodedData  len  ptr  
[BugLab_Variable_Misuse]^return NumberInput.parseAsInt ( _value, ptr ) ;^190^^^^^189^191^return NumberInput.parseAsInt ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asInt [RETURN_TYPE] int   int defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^return NumberInput.parseAsInt ( v, defaultValue ) ;^190^^^^^189^191^return NumberInput.parseAsInt ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asInt [RETURN_TYPE] int   int defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^return NumberInput.parseAsInt ( defaultValue, _value ) ;^190^^^^^189^191^return NumberInput.parseAsInt ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asInt [RETURN_TYPE] int   int defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^return NumberInput.parseAsLong ( v, defaultValue ) ;^195^^^^^194^196^return NumberInput.parseAsLong ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asLong [RETURN_TYPE] long   long defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  long  defaultValue  
[BugLab_Argument_Swapping]^return NumberInput.parseAsLong ( defaultValue, _value ) ;^195^^^^^194^196^return NumberInput.parseAsLong ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asLong [RETURN_TYPE] long   long defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  long  defaultValue  
[BugLab_Variable_Misuse]^return NumberInput.parseAsDouble ( v, defaultValue ) ;^200^^^^^199^201^return NumberInput.parseAsDouble ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  double  defaultValue  
[BugLab_Argument_Swapping]^return NumberInput.parseAsDouble ( defaultValue, _value ) ;^200^^^^^199^201^return NumberInput.parseAsDouble ( _value, defaultValue ) ;^[CLASS] TextNode  [METHOD] asDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  double  defaultValue  
[BugLab_Variable_Misuse]^if  ( v == null )  {^213^^^^^210^218^if  ( _value == null )  {^[CLASS] TextNode  [METHOD] serialize [RETURN_TYPE] void   JsonGenerator jg SerializerProvider provider [VARIABLES] JsonGenerator  jg  TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  SerializerProvider  provider  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( _value != null )  {^213^^^^^210^218^if  ( _value == null )  {^[CLASS] TextNode  [METHOD] serialize [RETURN_TYPE] void   JsonGenerator jg SerializerProvider provider [VARIABLES] JsonGenerator  jg  TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  SerializerProvider  provider  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^jg.writeString ( v ) ;^216^^^^^210^218^jg.writeString ( _value ) ;^[CLASS] TextNode  [METHOD] serialize [RETURN_TYPE] void   JsonGenerator jg SerializerProvider provider [VARIABLES] JsonGenerator  jg  TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  SerializerProvider  provider  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( o > this )  return true;^229^^^^^227^235^if  ( o == this )  return true;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^if  ( o == this )  return false;^229^^^^^227^235^if  ( o == this )  return true;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( o != null )  return false;^230^^^^^227^235^if  ( o == null )  return false;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^if  ( o == null )  return true;^230^^^^^227^235^if  ( o == null )  return false;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( o.getClass (  )  == getClass (  )  )  {^231^^^^^227^235^if  ( o.getClass (  )  != getClass (  )  )  {^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^return true;^232^^^^^227^235^return false;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^return  (  ( TextNode )  o ) ._value.equals ( v ) ;^234^^^^^227^235^return  (  ( TextNode )  o ) ._value.equals ( _value ) ;^[CLASS] TextNode  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] TextNode  EMPTY_STRING_NODE  Object  o  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^public int hashCode (  )  { return v.hashCode (  ) ; }^238^^^^^233^243^public int hashCode (  )  { return _value.hashCode (  ) ; }^[CLASS] TextNode  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^int len = v.length (  ) ;^246^^^^^244^251^int len = _value.length (  ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^len = ptr + 2 +  ( len >> 4 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^len = len + 2 +  &&  ( len >> 4 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^len = len  |  2 +  ( len >> 4 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^len = len + 2 +  ( len   instanceof   4 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^len = len + bits +  ( len >> 4 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^len = len + 2 +  ( len >> 3 ) ;^247^^^^^244^251^len = len + 2 +  ( len >> 4 ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^StringBuilder sb = new StringBuilder ( ptr ) ;^248^^^^^244^251^StringBuilder sb = new StringBuilder ( len ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^StringBuilder sb = new StringBuilder ( defaultValue ) ;^248^^^^^244^251^StringBuilder sb = new StringBuilder ( len ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^appendQuoted ( sb, v ) ;^249^^^^^244^251^appendQuoted ( sb, _value ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^appendQuoted ( _value, sb ) ;^249^^^^^244^251^appendQuoted ( sb, _value ) ;^[CLASS] TextNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^CharTypes.appendQuoted ( content, sb ) ;^256^^^^^253^258^CharTypes.appendQuoted ( sb, content ) ;^[CLASS] TextNode  [METHOD] appendQuoted [RETURN_TYPE] void   StringBuilder sb String content [VARIABLES] TextNode  EMPTY_STRING_NODE  String  _value  content  str  v  boolean  StringBuilder  sb  int  INT_SPACE  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^_reportInvalidBase64 ( b64variant, ch, len, null ) ;^269^^^^^266^270^_reportInvalidBase64 ( b64variant, ch, bindex, null ) ;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  content  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( bindex, ch, b64variant, null ) ;^269^^^^^266^270^_reportInvalidBase64 ( b64variant, ch, bindex, null ) ;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  content  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^_reportInvalidBase64 ( b64variant, bindex, ch, null ) ;^269^^^^^266^270^_reportInvalidBase64 ( b64variant, ch, bindex, null ) ;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  content  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^if  ( ch <= ptr )  {^280^^^^^276^294^if  ( ch <= INT_SPACE )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^if  ( INT_SPACE <= ch )  {^280^^^^^276^294^if  ( ch <= INT_SPACE )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( ch < INT_SPACE )  {^280^^^^^276^294^if  ( ch <= INT_SPACE )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^} else if  ( ch.usesPaddingChar ( b64variant )  )  {^282^^^^^276^294^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^} else if  ( !Character.isDefined ( ch )  && Character.isISOControl ( ch )  )  {^284^^^^^276^294^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  >  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  <  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( ptr+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  &  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  <<  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  >  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  &&  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+len ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  |  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  &&  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( len+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  <  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  !=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ==  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character   instanceof   ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( ptr+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^base = "Illegal white space bindexaracter  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( ch+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  &&  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+INT_SPACE ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  &  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  &  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ==  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ^  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ||  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+INT_SPACE ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  >  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( len+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  ==  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal white space character  <  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+bindex ) +" of 4-char base64 unit: can only used between units";^281^^^^^276^294^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  <=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  |  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+decodedData ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^276^294^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character  ==  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^^^^^276^294^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^288^^^^^276^294^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^if  ( v != null )  {^290^^^^^276^294^if  ( msg != null )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^if  ( msg == null )  {^290^^^^^276^294^if  ( msg != null )  {^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = v + ": " + msg;^291^^^^^276^294^base = base + ": " + msg;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Variable_Misuse]^base = base + ": " + v;^291^^^^^276^294^base = base + ": " + msg;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Argument_Swapping]^base = msg + ": " + base;^291^^^^^276^294^base = base + ": " + msg;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = base  &  ": " + msg;^291^^^^^276^294^base = base + ": " + msg;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
[BugLab_Wrong_Operator]^base = base  ==  ": " + msg;^291^^^^^276^294^base = base + ": " + msg;^[CLASS] TextNode  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  TextNode  EMPTY_STRING_NODE  String  _value  base  content  msg  str  v  boolean  int  INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr  
