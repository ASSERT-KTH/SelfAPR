[buglab_swap_variables]^return  ( _view == activeView )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[buglab_swap_variables]^if  (  ( view == activeView )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( _views.lengthnt i = 0, len = i; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0 = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0, len = _views; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0, len = _views.length.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^return  ( _view == activeView )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[buglab_swap_variables]^if  (  ( view == activeView )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( lennt i = 0, i = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0, _views.length = len; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0 = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( _views.lengthnt i = 0, len = i; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0, len = _views.length.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[buglab_swap_variables]^for  ( int i = 0, len = _views; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
