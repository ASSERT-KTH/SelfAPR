[BugLab_Variable_Misuse]^_objectCodec = _objectCodec;^72^^^^^69^82^_objectCodec = codec;^[CLASS] TreeTraversingParser  [METHOD] <init> [RETURN_TYPE] ObjectCodec)   JsonNode n ObjectCodec codec [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  codec  
[BugLab_Variable_Misuse]^_nextToken = 2;^77^^^^^69^82^_nextToken = JsonToken.START_OBJECT;^[CLASS] TreeTraversingParser  [METHOD] <init> [RETURN_TYPE] ObjectCodec)   JsonNode n ObjectCodec codec [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  codec  
[BugLab_Variable_Misuse]^_objectCodec = codec;^86^^^^^85^87^_objectCodec = c;^[CLASS] TreeTraversingParser  [METHOD] setCodec [RETURN_TYPE] void   ObjectCodec c [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^return codec;^91^^^^^90^92^return _objectCodec;^[CLASS] TreeTraversingParser  [METHOD] getCodec [RETURN_TYPE] ObjectCodec   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( !_startContainer )  {^108^^^^^106^113^if  ( !_closed )  {^[CLASS] TreeTraversingParser  [METHOD] close [RETURN_TYPE] void   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_closed = false;^109^^^^^106^113^_closed = true;^[CLASS] TreeTraversingParser  [METHOD] close [RETURN_TYPE] void   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _nextToken == null )  {^124^^^^^109^139^if  ( _nextToken != null )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( _closed )  {^130^^^^^115^145^if  ( _startContainer )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( JsonToken.START_OBJECT == _currToken )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( _currToken == JsonToken.END_OBJECT )  ? JsonToken.START_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^_currToken =  ( _currToken <= JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( _currToken == null || _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_ARRAY == JsonToken.START_OBJECT || _currToken == _currToken )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_OBJECT == _currToken || _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT && _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken <= JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT || _currToken != JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_startContainer = false;^141^^^^^126^156^_startContainer = true;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_startContainer = true;^131^^^^^116^146^_startContainer = false;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : null;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( JsonToken.END_ARRAY == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : _currToken;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( _currToken == JsonToken.END_ARRAY )  ? JsonToken.END_OBJECT : JsonToken.START_OBJECT;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^_currToken =  ( _currToken != JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^return null;^143^^^^^128^158^return _currToken;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^_currToken =  ( 0 == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^_currToken =  ( JsonToken.END_OBJECT == JsonToken.START_OBJECT )  ? _currToken : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( _currToken == 4 || _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( _currToken == JsonToken.START_ARRAY || _currToken == JsonToken.START_OBJECT )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken != JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT || _currToken <= JsonToken.START_ARRAY )  {^140^^^^^125^155^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^_currToken =  ( _currToken >= JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^134^135^^^^119^149^_currToken =  ( _currToken == JsonToken.START_OBJECT )  ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _nodeCursor != null )  {^146^^^^^131^161^if  ( _nodeCursor == null )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_closed = false;^147^^^^^132^162^_closed = true;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^152^^^^^137^167^if  ( _currToken != null )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_OBJECT == _currToken || _currToken == JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( _currToken == JsonToken.START_ARRAY || _currToken == JsonToken.START_OBJECT )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_ARRAY == JsonToken.START_OBJECT || _currToken == _currToken )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT && _currToken == JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken != JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT || _currToken <= JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_startContainer = false;^154^^^^^139^169^_startContainer = true;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken > JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT || _currToken != JsonToken.START_ARRAY )  {^153^^^^^138^168^if  ( _currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^return null;^156^^^^^141^171^return _currToken;^[CLASS] TreeTraversingParser  [METHOD] nextToken [RETURN_TYPE] JsonToken   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken != JsonToken.START_OBJECT )  {^170^^^^^168^178^if  ( _currToken == JsonToken.START_OBJECT )  {^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _currToken <= JsonToken.START_OBJECT )  {^170^^^^^168^178^if  ( _currToken == JsonToken.START_OBJECT )  {^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^} else if  ( _currToken != JsonToken.START_ARRAY )  {^173^^^^^168^178^} else if  ( _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_startContainer = true;^174^^^^^168^178^_startContainer = false;^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^_startContainer = true;^171^^^^^168^178^_startContainer = false;^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^} else if  ( JsonToken.START_ARRAY == _currToken )  {^173^^^^^168^178^} else if  ( _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^} else if  ( _currToken < JsonToken.START_ARRAY )  {^173^^^^^168^178^} else if  ( _currToken == JsonToken.START_ARRAY )  {^[CLASS] TreeTraversingParser  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^return  ( _nodeCursor != null )  ? null : _nodeCursor.getCurrentName (  ) ;^193^^^^^192^194^return  ( _nodeCursor == null )  ? null : _nodeCursor.getCurrentName (  ) ;^[CLASS] TreeTraversingParser  [METHOD] getCurrentName [RETURN_TYPE] String   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _nodeCursor == null )  {^199^^^^^197^202^if  ( _nodeCursor != null )  {^[CLASS] TreeTraversingParser  [METHOD] overrideCurrentName [RETURN_TYPE] void   String name [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  String  name  
[BugLab_Variable_Misuse]^if  ( _startContainer )  {^228^^^^^226^249^if  ( _closed )  {^[CLASS] TreeTraversingParser  [METHOD] getText [RETURN_TYPE] String   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n != null || n.isBinary (  )  )  {^242^^^^^226^249^if  ( n != null && n.isBinary (  )  )  {^[CLASS] TreeTraversingParser  [METHOD] getText [RETURN_TYPE] String   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n == null && n.isBinary (  )  )  {^242^^^^^226^249^if  ( n != null && n.isBinary (  )  )  {^[CLASS] TreeTraversingParser  [METHOD] getText [RETURN_TYPE] String   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^return  ( _currToken != null )  ? null : _currToken.asString (  ) ;^247^^^^^226^249^return  ( _currToken == null )  ? null : _currToken.asString (  ) ;^[CLASS] TreeTraversingParser  [METHOD] getText [RETURN_TYPE] String   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^return true;^269^^^^^267^270^return false;^[CLASS] TreeTraversingParser  [METHOD] hasTextCharacters [RETURN_TYPE] boolean   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^return  ( n != null )  ? null : n.numberType (  ) ;^283^^^^^281^284^return  ( n == null )  ? null : n.numberType (  ) ;^[CLASS] TreeTraversingParser  [METHOD] getNumberType [RETURN_TYPE] NumberType   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( !_startContainer )  {^325^^^^^323^337^if  ( !_closed )  {^[CLASS] TreeTraversingParser  [METHOD] getEmbeddedObject [RETURN_TYPE] Object   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n == null )  {^327^^^^^323^337^if  ( n != null )  {^[CLASS] TreeTraversingParser  [METHOD] getEmbeddedObject [RETURN_TYPE] Object   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n == null )  {^351^^^^^346^367^if  ( n != null )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( data == null )  {^354^^^^^346^367^if  ( data != null )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( ob  >>  byte[] )  {^360^^^^^346^367^if  ( ob instanceof byte[] )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( ob  >  byte[] )  {^360^^^^^346^367^if  ( ob instanceof byte[] )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( ob  &&  byte[] )  {^360^^^^^346^367^if  ( ob instanceof byte[] )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( ob  >=  byte[] )  {^360^^^^^346^367^if  ( ob instanceof byte[] )  {^[CLASS] TreeTraversingParser  [METHOD] getBinaryValue [RETURN_TYPE] byte[]   Base64Variant b64variant [VARIABLES] byte[]  data  boolean  _closed  _startContainer  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  JsonNode  n  Object  ob  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( data == null )  {^375^^^^^371^380^if  ( data != null )  {^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^return data.length.length;^377^^^^^371^380^return data.length;^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^return data;^377^^^^^371^380^return data.length;^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^out.write ( data.length, 0, data ) ;^376^^^^^371^380^out.write ( data, 0, data.length ) ;^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^out.write ( data, 1, data.length ) ;^376^^^^^371^380^out.write ( data, 0, data.length ) ;^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Literal]^return 1;^379^^^^^371^380^return 0;^[CLASS] TreeTraversingParser  [METHOD] readBinaryValue [RETURN_TYPE] int   Base64Variant b64variant OutputStream out [VARIABLES] byte[]  data  boolean  _closed  _startContainer  OutputStream  out  Base64Variant  b64variant  NodeCursor  _nodeCursor  JsonToken  _nextToken  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^if  ( _startContainer || _nodeCursor == null )  {^389^^^^^388^393^if  ( _closed || _nodeCursor == null )  {^[CLASS] TreeTraversingParser  [METHOD] currentNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Argument_Swapping]^if  ( _nodeCursor || _closed == null )  {^389^^^^^388^393^if  ( _closed || _nodeCursor == null )  {^[CLASS] TreeTraversingParser  [METHOD] currentNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _closed && _nodeCursor == null )  {^389^^^^^388^393^if  ( _closed || _nodeCursor == null )  {^[CLASS] TreeTraversingParser  [METHOD] currentNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( _closed || _nodeCursor != null )  {^389^^^^^388^393^if  ( _closed || _nodeCursor == null )  {^[CLASS] TreeTraversingParser  [METHOD] currentNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n == null && !n.isNumber (  )  )  {^399^^^^^395^404^if  ( n == null || !n.isNumber (  )  )  {^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^if  ( n != null || !n.isNumber (  )  )  {^399^^^^^395^404^if  ( n == null || !n.isNumber (  )  )  {^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^JsonToken t =  ( n != null )  ? null : n.asToken (  ) ;^400^^^^^395^404^JsonToken t =  ( n == null )  ? null : n.asToken (  ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Variable_Misuse]^throw _constructError ( "Current _nextTokenoken  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  ^  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  |  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  >>  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  &  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  >  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
[BugLab_Wrong_Operator]^throw _constructError ( "Current token  ||  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^401^^^^^395^404^throw _constructError ( "Current token  ( "+t+" )  not numeric, can not use numeric value accessors" ) ;^[CLASS] TreeTraversingParser  [METHOD] currentNumericNode [RETURN_TYPE] JsonNode   [VARIABLES] NodeCursor  _nodeCursor  JsonToken  _nextToken  t  JsonNode  n  boolean  _closed  _startContainer  ObjectCodec  _objectCodec  c  codec  
