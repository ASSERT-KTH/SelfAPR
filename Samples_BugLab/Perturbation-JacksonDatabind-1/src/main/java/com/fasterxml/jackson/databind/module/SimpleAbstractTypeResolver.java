[BugLab_Argument_Swapping]^if  ( subType == superType )  {^55^^^^^52^68^if  ( superType == subType )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( superType != subType )  {^55^^^^^52^68^if  ( superType == subType )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <<  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  >>  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  >=  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &&  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <=  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ^  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  >  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  |  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &&  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException   instanceof   (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  |  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  >=  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ^  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <=  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ||  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Argument_Swapping]^_mappings.put ( new ClassKey ( subType ) , superType ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Argument_Swapping]^Class<?> dst = src.get ( new ClassKey ( _mappings )  ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( dst != null )  {^76^^^^^71^80^if  ( dst == null )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[BugLab_Argument_Swapping]^return dst.narrowBy ( type ) ;^79^^^^^71^80^return type.narrowBy ( dst ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
