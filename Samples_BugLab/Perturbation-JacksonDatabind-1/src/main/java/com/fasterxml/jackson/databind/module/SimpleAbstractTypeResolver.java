[buglab_swap_variables]^if  ( subType == superType )  {^55^^^^^52^68^if  ( superType == subType )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[buglab_swap_variables]^_mappings.put ( new ClassKey ( subType ) , superType ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[buglab_swap_variables]^_mappings.put ( new ClassKey ( superType )  ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[buglab_swap_variables]^Class<?> dst = src.get ( new ClassKey ( _mappings )  ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[buglab_swap_variables]^return dst.narrowBy ( type ) ;^79^^^^^71^80^return type.narrowBy ( dst ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
