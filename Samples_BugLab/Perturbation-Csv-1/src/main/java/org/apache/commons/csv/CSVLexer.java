[BugLab_Argument_Swapping]^super ( in, format ) ;^28^^^^^27^29^super ( format, in ) ;^[CLASS] CSVLexer  [METHOD] <init> [RETURN_TYPE] ExtendedBufferedReader)   CSVFormat format ExtendedBufferedReader in [VARIABLES] boolean  ExtendedBufferedReader  in  CSVFormat  format  
[BugLab_Variable_Misuse]^boolean eol = isEndOfLine ( lastChar ) ;^52^^^^^37^67^boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^c = null.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == null ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol ||  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar == '\n' && lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar != '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar <= '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar <= ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^if  ( isEndOfFile ( lastChar )  )  {^66^^^^^57^71^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^lastChar = lastChar;^61^^^^^57^71^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^eol = isEndOfLine ( lastChar ) ;^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar >= '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar != '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar > ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^if  ( isEndOfFile ( lastChar )  )  {^66^^^^^51^81^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^lastChar = lastChar;^61^^^^^46^76^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^eol = isEndOfLine ( lastChar ) ;^63^^^^^48^78^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^&& !isEndOfFile ( c )  )  {^59^^^^^44^74^&& !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Argument_Swapping]^if  ( isEndOfFile ( c )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( lastChar )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^if  ( isEndOfFile ( lastChar )  &&  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  || isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^if  ( isEndOfFile ( c )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( lastChar )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( tkn.type <= INVALID )  {^82^^^^^67^97^while  ( tkn.type == INVALID )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^while  ( isWhitespace ( lastChar )  && !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Operator]^while  ( isWhitespace ( c )  || !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^eol = isEndOfLine ( lastChar ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^c = 3.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^if  ( isCommentStart ( lastChar )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^} else if  ( isEncapsulator ( lastChar )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^simpleTokenLexer ( tkn, lastChar ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Argument_Swapping]^simpleTokenLexer ( c, tkn ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Literal]^tkn.isReady = false;^110^^^^^95^125^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^simpleTokenLexer ( tkn, lastChar ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Argument_Swapping]^simpleTokenLexer ( c, tkn ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^encapsulatedTokenLexer ( tkn, lastChar ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Argument_Swapping]^encapsulatedTokenLexer ( c, tkn ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^} else if  ( isEndOfFile ( lastChar )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = 2;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = null;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^} else if  ( isDelimiter ( lastChar )  )  {^96^^^^^81^111^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = this;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = null;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^c = this.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = null;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Variable_Misuse]^tkn.type = 2;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[BugLab_Wrong_Literal]^while  ( false )  {^138^^^^^137^166^while  ( true )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Wrong_Literal]^tkn.isReady = false;^146^^^^^137^166^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Variable_Misuse]^tkn.type = 4;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Variable_Misuse]^tkn.type = this;^141^^^^^137^166^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Variable_Misuse]^tkn.type = null;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Variable_Misuse]^tkn.type = 0;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[BugLab_Wrong_Literal]^while  ( false )  {^186^^^^^171^201^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Wrong_Literal]^while  ( false )  {^198^^^^^183^213^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^if  ( isDelimiter ( startLineNumber )  )  {^200^^^^^185^215^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Wrong_Literal]^tkn.isReady = false;^205^^^^^190^220^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = null;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 4;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEndOfFile ( startLineNumber )  )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = this;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Wrong_Literal]^while  ( false )  {^198^^^^^192^216^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^if  ( isDelimiter ( startLineNumber )  )  {^200^^^^^192^216^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Wrong_Literal]^tkn.isReady = false;^205^^^^^192^216^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 0;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = null;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 2;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = null;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 1;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^if  ( isEncapsulator ( 4.lookAhead (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = null;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 2;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 0;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^} else if  ( isEncapsulator ( startLineNumber )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.content.append (  ( startLineNumberhar )  readEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = null;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^c = null.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 4;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 3;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^c = null.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^c = null.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^if  ( isEscape ( startLineNumber )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = this;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 4;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = this;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 3;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 0;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^tkn.type = 4;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^c = this.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[BugLab_Variable_Misuse]^c = 1.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
