[BugLab_Wrong_Literal]^boolean eatTheRest = true;^66^^^^^51^81^boolean eatTheRest = false;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  ( currentOption == null ) {^85^86^^^^70^100^if  ( option == null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^if  ( option != null ) {^85^86^^^^70^100^if  ( option == null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  (  ( option != null )  &&  ( option == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  (  ( specialOption != null )  &&  ( currentOption == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^if  (  ( option != null )  &&  ( specialOption == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^if  (  ( specialOption != null )  ||  ( option == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^if  (  ( specialOption == null )  &&  ( option == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^if  (  ( specialOption != null )  &&  ( option != null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  (  ( specialOption != null )  && currentOption.hasArg (  )  ) {^119^120^^^^104^134^else if  (  ( currentOption != null )  && currentOption.hasArg (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^else if  (  ( currentOption != null )  || currentOption.hasArg (  )  ) {^119^120^^^^104^134^else if  (  ( currentOption != null )  && currentOption.hasArg (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^else if  (  ( currentOption == null )  && currentOption.hasArg (  )  ) {^119^120^^^^104^134^else if  (  ( currentOption != null )  && currentOption.hasArg (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  ( specialOption != null ) {^141^142^^^^126^156^else if  ( currentOption != null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else currentOptionf  ( i != null ) {^141^142^^^^126^156^else if  ( currentOption != null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^else if  ( currentOption == null ) {^141^142^^^^126^156^else if  ( currentOption != null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  ( eatTheRest ) {^145^146^^^^130^160^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else stopAtNonOptionf  ( i ) {^145^146^^^^130^160^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^147^^^^^145^154^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^147^^^^^132^162^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  ( specialOption.hasArg (  )  ) {^121^122^^^^106^136^if  ( currentOption.hasArg (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  ( specialOption.hasArgs (  )  ) {^126^127^^^^111^141^else if  ( currentOption.hasArgs (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else currentOptionf  ( i.hasArgs (  )  ) {^126^127^^^^111^141^else if  ( currentOption.hasArgs (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  ( eatTheRest ) {^130^131^^^^115^145^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else stopAtNonOptionf  ( i ) {^130^131^^^^115^145^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^132^^^^^130^139^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^132^^^^^117^147^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, i )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i, 2 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i )  ) ;^117^^^^^102^132^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^currentOption = specialOption;^108^^^^^93^123^currentOption = option;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^Option specialOption = arguments.getOption ( options[i].substring ( 0, 2 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( , 2 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, i )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( , 2 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, i )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0,  )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1, 2 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 1 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  ( option != null ) {^91^92^^^^76^106^if  ( specialOption != null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^if  ( specialOption == null ) {^91^92^^^^76^106^if  ( specialOption != null ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^else if  ( eatTheRest ) {^96^97^^^^81^111^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^98^^^^^96^104^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^98^^^^^83^113^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 1 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, i )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring (  )  ) ;^94^^^^^91^104^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i )  ) ;^94^^^^^91^104^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^Option specialOption = arguments.getOption ( options[i].substring ( 0, 2 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( i, 2 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, i )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( -1, 2 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, 1 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 1 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i, 2 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, i )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i )  ) ;^94^^^^^79^109^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else stopAtNonOptionf  ( i ) {^96^97^^^^81^111^else if  ( stopAtNonOption ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( i, 2 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1 )  ) ;^117^^^^^102^132^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^Option option = arguments.getOption ( options[i] ) ;^82^^^^^67^97^Option option = options.getOption ( arguments[i] ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( -1, 2 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, 3 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( i, 2 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0,  )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1 )  ) ;^94^^^^^79^109^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( i, 2 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, 3 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  (  ( specialOption != null )  &&  ( specialOption == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else currentOptionf  (  ( i != null )  && currentOption.hasArg (  )  ) {^119^120^^^^104^134^else if  (  ( currentOption != null )  && currentOption.hasArg (  )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 3 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( i, 2 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, 3 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, 1 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 3 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1, 2 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0,  )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 3 )  ) ;^94^^^^^79^109^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1 )  ) ;^94^^^^^91^104^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  (  ( currentOption != null )  &&  ( option == null )  ) {^114^115^^^^99^129^if  (  ( specialOption != null )  &&  ( option == null )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, i )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else argumentsf  ( i[i].startsWith ( "-" )  ) {^80^81^^^^65^95^else if  ( arguments[i].startsWith ( "-" )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( , 2 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( -1, 2 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( -1, 2 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, 1 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 1, 2 )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 3 )  ) ;^94^^^^^91^104^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0, 3 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 3 )  ) ;^117^^^^^102^132^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( -1, 2 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring (  )  ) ;^94^^^^^79^109^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0, 3 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( -1, 2 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( , 2 )  ) ;^116^^^^^101^131^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 1, 2 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^else argumentsf  ( "-".equals ( i[i] )  ) {^76^77^^^^61^91^else if  ( "-".equals ( arguments[i] )  ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^eatTheRest = false;^73^^^^^58^88^eatTheRest = true;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( , 2 )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 1, 2 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( , 2 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 0,  )  ) ;^93^^^^^91^104^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^if  ( stopAtNonOption ) {^162^163^^^^147^177^if  ( eatTheRest ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( arguments++; i < i.length; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( arguments.length++; i < i; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^for  ( i++; i <= arguments.length; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( arguments.lengthnt i = 0; i < i; i++ ) {^69^70^^^^54^84^for  ( int i = 0; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= arguments.length; i++ ) {^69^70^^^^54^84^for  ( int i = 0; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < arguments.length; i++ ) {^69^70^^^^54^84^for  ( int i = 0; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < arguments.length; i++ ) {^69^70^^^^54^84^for  ( int i = 0; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring (  )  ) ;^117^^^^^102^132^tokens.add ( arguments[i].substring ( 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^tokens.add ( arguments[i].substring ( 1, 2 )  ) ;^93^^^^^78^108^tokens.add ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( -1, 2 )  ) ;^111^112^^^^96^126^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^Option specialOption = options.getOption ( arguments[i].substring ( 0, 1 )  ) ;^88^89^^^^73^103^Option specialOption = options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 1, 2 )  ) ;^89^^^^^74^104^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Literal]^options.getOption ( arguments[i].substring ( 0,  )  ) ;^112^^^^^97^127^options.getOption ( arguments[i].substring ( 0, 2 )  ) ;^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Variable_Misuse]^for  ( i++; i < i; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( i++; i < arguments.length.length; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^for  ( i++; i == arguments.length; i++ ) {^164^165^^^^162^168^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( arguments.length++; i < i; i++ ) {^164^165^^^^149^179^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^for  ( i++; i <= arguments.length; i++ ) {^164^165^^^^149^179^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Argument_Swapping]^for  ( arguments++; i < i.length; i++ ) {^164^165^^^^149^179^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
[BugLab_Wrong_Operator]^for  ( i++; i > arguments.length; i++ ) {^164^165^^^^149^179^for  ( i++; i < arguments.length; i++ ) {^[CLASS] GnuParser  [METHOD] flatten [RETURN_TYPE] String[]   Options options String[] arguments boolean stopAtNonOption [VARIABLES] ArrayList  tokens  Options  options  Option  currentOption  option  specialOption  String[]  arguments  boolean  eatTheRest  stopAtNonOption  int  i  
