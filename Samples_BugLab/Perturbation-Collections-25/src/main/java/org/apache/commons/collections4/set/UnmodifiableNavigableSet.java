[BugLab_Wrong_Operator]^if  ( set  >=  Unmodifiable )  {^54^^^^^53^58^if  ( set instanceof Unmodifiable )  {^[CLASS] UnmodifiableNavigableSet  [METHOD] unmodifiableNavigableSet [RETURN_TYPE] <E>   NavigableSet<E> set [VARIABLES] long  serialVersionUID  NavigableSet  set  boolean  
[BugLab_Variable_Misuse]^final SortedSet<E> sub = decorated (  ) .subSet ( toElement, toElement ) ;^111^^^^^110^113^final SortedSet<E> sub = decorated (  ) .subSet ( fromElement, toElement ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] SortedSet   final E fromElement final E toElement [VARIABLES] boolean  E  fromElement  toElement  SortedSet  sub  long  serialVersionUID  
[BugLab_Variable_Misuse]^final SortedSet<E> sub = decorated (  ) .subSet ( fromElement, fromElement ) ;^111^^^^^110^113^final SortedSet<E> sub = decorated (  ) .subSet ( fromElement, toElement ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] SortedSet   final E fromElement final E toElement [VARIABLES] boolean  E  fromElement  toElement  SortedSet  sub  long  serialVersionUID  
[BugLab_Argument_Swapping]^final SortedSet<E> sub = decorated (  ) .subSet ( toElement, fromElement ) ;^111^^^^^110^113^final SortedSet<E> sub = decorated (  ) .subSet ( fromElement, toElement ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] SortedSet   final E fromElement final E toElement [VARIABLES] boolean  E  fromElement  toElement  SortedSet  sub  long  serialVersionUID  
[BugLab_Variable_Misuse]^final NavigableSet<E> sub = decorated (  ) .subSet ( toElement, fromInclusive, toElement, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Variable_Misuse]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, fromElement, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> sub = decorated (  ) .subSet ( toElement, fromInclusive, fromElement, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromInclusive, fromElement, toElement, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> sub = decorated (  ) .subSet ( toInclusive, fromInclusive, toElement, fromElement ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Variable_Misuse]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, toInclusive, toElement, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, toInclusive, toElement, fromInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, toElement, fromInclusive, toInclusive ) ;^141^^^^^140^143^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> head = decorated (  ) .headSet ( inclusive, toElement ) ;^147^^^^^146^149^final NavigableSet<E> head = decorated (  ) .headSet ( toElement, inclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[BugLab_Argument_Swapping]^final NavigableSet<E> tail = decorated (  ) .tailSet ( inclusive, fromElement ) ;^153^^^^^152^155^final NavigableSet<E> tail = decorated (  ) .tailSet ( fromElement, inclusive ) ;^[CLASS] UnmodifiableNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
