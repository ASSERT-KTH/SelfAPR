[BugLab_Variable_Misuse]^iPredicate = this;^74^^^^^72^77^iPredicate = predicate;^[CLASS] WhileClosure  [METHOD] <init> [RETURN_TYPE] Closure,boolean)   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Variable_Misuse]^iDoLoop = iDoLoop;^76^^^^^72^77^iDoLoop = doLoop;^[CLASS] WhileClosure  [METHOD] <init> [RETURN_TYPE] Closure,boolean)   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Wrong_Operator]^if  ( predicate != null )  {^55^^^^^53^62^if  ( predicate == null )  {^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Wrong_Operator]^if  ( closure != null )  {^58^^^^^53^62^if  ( closure == null )  {^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Variable_Misuse]^return new WhileClosure<E> ( predicate, closure, iDoLoop ) ;^61^^^^^53^62^return new WhileClosure<E> ( predicate, closure, doLoop ) ;^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Argument_Swapping]^return new WhileClosure<E> ( closure, predicate, doLoop ) ;^61^^^^^53^62^return new WhileClosure<E> ( predicate, closure, doLoop ) ;^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Argument_Swapping]^return new WhileClosure<E> ( doLoop, closure, predicate ) ;^61^^^^^53^62^return new WhileClosure<E> ( predicate, closure, doLoop ) ;^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Argument_Swapping]^return new WhileClosure<E> ( predicate, doLoop, closure ) ;^61^^^^^53^62^return new WhileClosure<E> ( predicate, closure, doLoop ) ;^[CLASS] WhileClosure  [METHOD] whileClosure [RETURN_TYPE] <E>   Predicate<? super E> predicate Closure<? super E> closure final boolean doLoop [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Variable_Misuse]^if  ( doLoop )  {^85^^^^^84^91^if  ( iDoLoop )  {^[CLASS] WhileClosure  [METHOD] execute [RETURN_TYPE] void   final E input [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  E  input  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Argument_Swapping]^while  ( input.evaluate ( iPredicate )  )  {^88^^^^^84^91^while  ( iPredicate.evaluate ( input )  )  {^[CLASS] WhileClosure  [METHOD] execute [RETURN_TYPE] void   final E input [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  E  input  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Variable_Misuse]^return 0;^100^^^^^99^101^return iPredicate;^[CLASS] WhileClosure  [METHOD] getPredicate [RETURN_TYPE] Predicate   [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
[BugLab_Variable_Misuse]^return doLoop;^120^^^^^119^121^return iDoLoop;^[CLASS] WhileClosure  [METHOD] isDoLoop [RETURN_TYPE] boolean   [VARIABLES] boolean  doLoop  iDoLoop  Closure  closure  iClosure  long  serialVersionUID  Predicate  iPredicate  predicate  
