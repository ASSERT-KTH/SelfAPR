[buglab_swap_variables]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( mid, start, iterator - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> (  start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator,  mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, start, mid - 1,  prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, start, prev - 1, mid, mid, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, start, mid - 1, mid,  this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( prev, start, mid - 1, mid, iterator, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^if  ( end < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( end, mid + 1, iterator, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> (  mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, end,  this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1,  mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, next, mid, this, end ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( mid, iterator + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.next = parent.root.root == null ? null : parent.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^this.next = parent == null ? null : parent.root.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return index.get ( root ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return object.indexOf ( root, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return root.indexOf (  root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return root.indexOf ( object.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return root.relativePosition.indexOf ( object, root ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return root.indexOf ( object ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^return root.indexOf ( root.relativePosition, object ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root.toArray ( root, array.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root.toArray (  root.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root.toArray ( array.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root.toArray ( array, root ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root.toArray ( array ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root.toArray ( root.relativePosition, array ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[buglab_swap_variables]^root = index.insert ( root, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root.insert (  obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = obj.insert ( index, root ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root.insert ( index ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root.insert ( obj, index ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = new AVLNode<E> ( obj, index, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = new AVLNode<E> (  obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = new AVLNode<E> ( index,  null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = cTree == null ? root : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root == null ? cTree : root.addAll (  size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = size == null ? cTree : root.addAll ( cTree, root ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root == null ? cTree : root.addAll ( cTree ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = root == null ? size : root.addAll ( cTree, cTree ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^final AVLNode<E> node = index.get ( root ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^final E result = node.value.value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^final E result = node;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^root = index.remove ( root ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[buglab_swap_variables]^if  ( endIndex < startIndex || index > index )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[buglab_swap_variables]^if  ( index < endIndex || index > startIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[buglab_swap_variables]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[buglab_swap_variables]^final int result = left.indexOf ( index, object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = left.indexOf (  index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = index.indexOf ( object, left + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = left.indexOf ( object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = left.relativePosition.indexOf ( object, index + left ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.indexOf ( right.relativePosition, index + object ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.indexOf (  index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.indexOf ( object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray (  index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray ( array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray ( array, index + left.relativePosition.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray ( index, array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^left.toArray ( array, left + index.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray ( right.relativePosition, index + array ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray (  index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray ( array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray ( array, index + right.relativePosition.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^right.toArray ( right, index + array.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[buglab_swap_variables]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnLeft (  obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnLeft ( indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnRight (  obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return insertOnRight ( indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.insert (  obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.insert ( indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1,  this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1, obj, this ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.insert (  obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.insert ( indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1,  right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1, obj,  this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.remove ( indexRelativeToMe ) .left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.remove ( indexRelativeToMe )  ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.remove ( indexRelativeToMe ) .right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.remove ( indexRelativeToMe )  ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.removeMax (  ) .right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( right.removeMax (  )  ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.removeMin (  ) .left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( left.removeMin (  )  ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left.max (  ) .setRight ( null ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right.min (  ) .setLeft ( null ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight (  newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setRight ( movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset (  newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset (  movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft (  newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setLeft ( movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset (  newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset (  movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^setOffset ( movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left = previous ? leftIsPrevious : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^right = next ? rightIsNext : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[buglab_swap_variables]^while  ( leftSubTree != null && s.height > getHeight ( s )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAncestor.setLeft (  null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^leftSubTree.max (  ) .setRight ( null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.min (  ) .setLeft ( null ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^int s.relativePositionAbsolutePosition = s + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^maxNode.setLeft (  null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^maxNode.setRight (  otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^maxNode.setRight ( s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = s - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = currentSizeAbsolutePosition - s + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^while  ( s != null && otherTree > getHeight ( s.height )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTreeMin.setRight (  null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTreeMin.setLeft (  maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTreeMin.setLeft ( maxNode, s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTreeMin.setLeft ( s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( nullMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.max (  ) .setRight ( null ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^otherTreeMin.relativePosition = sParentAbsolutePosition - currentSize;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^sAncestor.setRight (  null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^if  ( parent != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^if  ( expectedModCount.modCount != parent )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = parent.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = parent.root.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^parent.add ( nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^parent.add (  obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[buglab_swap_variables]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> (  start, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator,  mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, start, mid - 1,  prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( iterator, start, mid - 1, mid,  this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^left = new AVLNode<E> ( mid, start, iterator - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^if  ( end < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( mid, iterator + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> (  mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, end,  this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1,  mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( iterator, mid + 1, next, mid, this, end ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^right = new AVLNode<E> ( end, mid + 1, iterator, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[buglab_swap_variables]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[buglab_swap_variables]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.indexOf (  index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.indexOf ( object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.relativePosition.indexOf ( object, index + left ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.indexOf ( index, object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = index.indexOf ( object, left + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int result = left.indexOf ( left.relativePosition, index + object ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.indexOf ( right.relativePosition, index + object ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.indexOf (  index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.indexOf ( object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^left.toArray (  index + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^left.toArray ( array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^left.toArray ( array, index + left.relativePosition.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^left.toArray ( left, index + array.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^right.toArray ( right, index + array.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^right.toArray (  index + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^right.toArray ( array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^right.toArray ( right.relativePosition, index + array ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[buglab_swap_variables]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnLeft (  obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnLeft ( indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnRight (  obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return insertOnRight ( indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.insert (  obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.insert ( indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1,  this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( new AVLNode<E> ( -1, obj, this ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.insert (  obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.insert ( indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1,  right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( new AVLNode<E> ( +1, obj,  this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.remove ( left.left ) , indexRelativeToMe ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.remove ( indexRelativeToMe ) .left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.remove ( indexRelativeToMe )  ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.remove ( right.right ) , indexRelativeToMe ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.remove ( indexRelativeToMe ) .right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.remove ( indexRelativeToMe )  ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.removeMax (  ) .right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setRight ( right.removeMax (  )  ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.removeMin (  ) .left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( left.removeMin (  )  ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^left.max (  ) .setRight ( null ) ;^628^^^^^613^643^left.max (  ) .setRight ( null, right ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^right.min (  ) .setLeft ( null ) ;^633^^^^^618^648^right.min (  ) .setLeft ( null, left ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[buglab_swap_variables]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setRight (  newTop ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setRight ( movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset (  newTopPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset (  movedPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setLeft (  newTop ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setLeft ( movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset (  newTopPosition ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset (  movedPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^setOffset ( movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^left = previous ? leftIsPrevious : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^right = node ? next : rightIsNext;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[buglab_swap_variables]^while  ( leftSubTree != null && s.height > getHeight ( s )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAncestor.setLeft (  null ) ;^864^^^^^849^879^sAncestor.setLeft ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^if  ( height.height > otherTree )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^leftSubTree.max (  ) .setRight ( null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.min (  ) .setLeft ( null ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^int s.relativePositionAbsolutePosition = s + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^maxNode.setLeft (  null ) ;^847^^^^^832^862^maxNode.setLeft ( leftSubTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^maxNode.setRight (  otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^maxNode.setRight ( s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = s - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^int currentSizeAbsolutePosition = s.relativePosition + s;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^while  ( s.height != null && s > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^while  ( otherTree != null && s.height > getHeight ( s )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTreeMin.setRight (  null ) ;^884^^^^^869^899^otherTreeMin.setRight ( otherTree, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTreeMin.setLeft ( maxNode, s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTreeMin.setLeft (  maxNode ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTreeMin.setLeft ( s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( nullMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^otherTree.min (  ) .setLeft ( null ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.max (  ) .setRight ( null ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^s.relativePosition = s - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^sAncestor.setRight (  null ) ;^899^^^^^884^914^sAncestor.setRight ( s, null ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^this.next = parent.root.root == null ? null : parent.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^if  ( expectedModCount.modCount != parent )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = nextIndex.root.get ( parent - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^parent.add ( nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[buglab_swap_variables]^parent.add (  obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
