[BugLab_Variable_Misuse]^size = 3.size (  ) ;^88^^^^^84^90^size = coll.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Variable_Misuse]^root = new AVLNode<E> ( null ) ;^87^^^^^84^90^root = new AVLNode<E> ( coll ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  next  right  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Variable_Misuse]^this.relativePosition = size;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Literal]^rightIsNext = false;^333^^^^^329^337^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Variable_Misuse]^right = 0;^335^^^^^329^337^right = rightFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Variable_Misuse]^left = 2;^336^^^^^329^337^left = leftFollower;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Operator]^this ( coll.iterator (  ) , 0, coll.size (  )   |  1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Literal]^this ( coll.iterator (  ) , height, coll.size (  )  - 1, height, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Literal]^this ( coll.iterator (  ) , 0, coll.size (  )  - currentIndex, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Wrong_Literal]^this ( coll.iterator (  ) , 1, coll.size (  )  - 1, 1, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  current  left  leftFollower  next  right  rightFollower  root  TreeList  parent  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  currentIndex  expectedModCount  height  nextIndex  relativePosition  size  
[BugLab_Variable_Misuse]^final int mid = nextIndex +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final int mid = start +  ( relativePosition - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^final int mid = start +  >>  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^final int mid = start +  ( end - start )  + 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^final int mid = start +  ( end  >>  start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^final int mid = start +  ( end - start )  / 3;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^if  ( nextIndex < mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^if  ( start < size )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^if  ( start > mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, nextIndex, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, start, relativePosition - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( prev, start, mid - 1, mid, iterator, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  ==  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^left = new AVLNode<E> ( iterator, start, mid , mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, start, nextIndex - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, start, prev - 1, mid, mid, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  ||  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^left = new AVLNode<E> ( iterator, start, mid - start, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, size, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, start, size - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  !=  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^left = 0;^378^^^^^371^389^left = prev;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( mid, start, iterator - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  >=  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^left = new AVLNode<E> ( iterator, start, mid - absolutePositionOfParent, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^relativePosition = relativePosition - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^relativePosition = mid - relativePosition;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^relativePosition = mid   instanceof   absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^if  ( mid < relativePosition )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^if  ( mid <= end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^rightIsNext = false;^385^^^^^371^389^rightIsNext = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = null;^386^^^^^371^389^right = next;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( null, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, relativePosition + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, mid + 1, relativePosition, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^right = new AVLNode<E> ( iterator, mid , end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, mid + 1, start, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( end, mid + 1, iterator, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( 0, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, start + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( mid, iterator + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( iterator, mid + 1, next, mid, this, end ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^right = new AVLNode<E> ( iterator, mid + nextIndex, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  Iterator  iterator  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^this.expectedModCount = start;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^this.next = parent.root == null ? null : parent.root.get ( start ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.next = parent.root.root == null ? null : parent.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^this.next = parent.root != null ? null : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^this.next = parent.root == null ? null : parent.root.get ( mid ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^this.next = parent == null ? null : parent.root.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^this.nextIndex = mid;^1020^^^^^1015^1022^this.nextIndex = fromIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^this.currentIndex = -0;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^checkInterval ( index, 0, size (  )   ^  1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, absolutePositionOfParent, size (  )  - 1 ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, 0, size (  )  - mid ) ;^101^^^^^100^103^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return root.get ( mid ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^return index.get ( root ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return root.get ( nextIndex ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return root.get ( relativePosition ) .getValue (  ) ;^102^^^^^100^103^return root.get ( index ) .getValue (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return index;^112^^^^^111^113^return size;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] size [RETURN_TYPE] int   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^return listIterator ( index ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^return listIterator ( expectedModCount ) ;^123^^^^^121^124^return listIterator ( 0 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^checkInterval ( size, 0, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( fromIndex, -1, size (  )  ) ;^147^^^^^144^149^checkInterval ( fromIndex, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return new TreeListIterator<E> ( this, size ) ;^148^^^^^144^149^return new TreeListIterator<E> ( this, fromIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^if  ( root != null )  {^160^^^^^158^164^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^return -;^161^^^^^158^164^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return 0.indexOf ( object, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return root.indexOf ( object, index ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^return object.indexOf ( root, root.relativePosition ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^return root.relativePosition.indexOf ( object, root ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return root.indexOf ( object, nextIndex ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^return root.indexOf ( root.relativePosition, object ) ;^163^^^^^158^164^return root.indexOf ( object, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^return indexOf ( object )  < 0;^174^^^^^173^175^return indexOf ( object )  >= 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^if  ( 4 != null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Wrong_Operator]^if  ( root == null )  {^186^^^^^183^190^if  ( root != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Variable_Misuse]^root.toArray ( array, relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Argument_Swapping]^root.toArray ( root.relativePosition, array ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Argument_Swapping]^root.toArray ( root, array.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Argument_Swapping]^root.toArray ( array, root ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Argument_Swapping]^root.toArray ( array, root.relativePosition.relativePosition ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Variable_Misuse]^root.toArray ( array, start ) ;^187^^^^^183^190^root.toArray ( array, root.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  Object[]  array  
[BugLab_Variable_Misuse]^checkInterval ( nextIndex, 0, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, -1, size (  )  ) ;^202^^^^^200^209^checkInterval ( index, 0, size (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^if  ( root != null )  {^203^^^^^200^209^if  ( root == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.insert ( relativePosition, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.insert ( index, value ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = this.insert ( index, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = root.insert ( obj, index ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = obj.insert ( index, root ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.insert ( nextIndex, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = index.insert ( root, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = new AVLNode<E> ( start, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = new AVLNode<E> ( index, value, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = new AVLNode<E> ( obj, index, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = new AVLNode<E> ( size, obj, null, null ) ;^204^^^^^200^209^root = new AVLNode<E> ( index, obj, null, null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.insert ( start, obj ) ;^206^^^^^200^209^root = root.insert ( index, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AVLNode  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^return true;^225^^^^^223^232^return false;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final AVLNode<E> thisTree = new AVLNode<E> ( c ) ;^228^^^^^223^232^final AVLNode<E> cTree = new AVLNode<E> ( c ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = 2 == null ? cTree : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root == null ? cTree : root.addAll ( cTree, nextIndex ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = cTree == null ? root : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = size == null ? cTree : root.addAll ( cTree, root ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^root = root != null ? cTree : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root == null ? 2 : root.addAll ( cTree, size ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = root == null ? size : root.addAll ( cTree, cTree ) ;^229^^^^^223^232^root = root == null ? cTree : root.addAll ( cTree, size ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^return false;^231^^^^^223^232^return true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> c [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  prev  right  rightFollower  root  TreeList  parent  Collection  c  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^checkInterval ( start, 0, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^checkInterval ( index, 0, size (  )   <<  1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, fromIndex, size (  )  - 1 ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, 0, size (  )  - mid ) ;^244^^^^^243^249^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final AVLNode<E> node = root.get ( nextIndex ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^final AVLNode<E> node = index.get ( root ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final AVLNode<E> node = root.get ( size ) ;^245^^^^^243^249^final AVLNode<E> node = root.get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final E result = value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^final E result = node.value.value;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^final E result = node;^246^^^^^243^249^final E result = node.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^node.setValue ( value ) ;^247^^^^^243^249^node.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return value;^248^^^^^243^249^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^checkInterval ( nextIndex, 0, size (  )  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Operator]^checkInterval ( index, 0, size (  )   >>  1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, -1, size (  )  - 1 ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Wrong_Literal]^checkInterval ( index, 0, size (  )  - size ) ;^260^^^^^258^265^checkInterval ( index, 0, size (  )  - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final E result = get ( size ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^final E result = get ( nextIndex ) ;^261^^^^^258^265^final E result = get ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.remove ( mid ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Argument_Swapping]^root = index.remove ( root ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^root = root.remove ( relativePosition ) ;^262^^^^^258^265^root = root.remove ( index ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^return value;^264^^^^^258^265^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  
[BugLab_Variable_Misuse]^if  ( relativePosition < startIndex || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( index < start || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( endIndex < startIndex || index > index )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( index < endIndex || index > startIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( index < startIndex && index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( index > startIndex || index > endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( index < startIndex || index >= endIndex )  {^287^^^^^286^290^if  ( index < startIndex || index > endIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkInterval [RETURN_TYPE] void   final int index final int startIndex final int endIndex [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return result;^397^^^^^396^398^return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^this.value = value;^406^^^^^405^407^this.value = obj;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setValue [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^final int sizeRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^final int indexRelativeToMe = index - nextIndex;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  <<  relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe <= 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe == -1 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^final AVLNode<E> nextNode = mid < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^final AVLNode<E> nextNode = indexRelativeToMe <= 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( nextNode != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return nextNode.get ( index ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( result >= -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return indexRelativeToMe;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, startIndex + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + startIndex ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index   instanceof   left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, relativePosition + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + size ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int result = left.indexOf ( index, object + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int result = left.relativePosition.indexOf ( object, index + left ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  >=  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( result == -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return start;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return startIndex;^434^^^^^430^444^return result;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, start + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + mid ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  ==  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, mid + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + start ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int result = index.indexOf ( object, left + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  &  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( result == null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( value != null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( value == null ? value != object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return result;^438^^^^^430^444^return index;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return startIndex;^438^^^^^430^444^return index;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return right.indexOf ( object, nextIndex + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return right.indexOf ( object, index + result ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  ||  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return right.indexOf ( object, index + nextIndex ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return right.indexOf ( right.relativePosition, index + object ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  &&  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  >=  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return right.indexOf ( object, result + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return right.indexOf ( object, index + mid ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  <<  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^return -expectedModCount;^443^^^^^430^444^return -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^array[index] = result;^453^^^^^452^460^array[index] = value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, result + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( left, index + array.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^left.toArray ( array, index  &&  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, mid + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( array, left + index.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( array, index + left ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^left.toArray ( array, index  ||  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, startIndex + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, index + result ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( right, index + array.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, right + index.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, index + right ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^right.toArray ( array, index   instanceof   right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, nextIndex + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, index + size ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, index + null.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( index, array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Wrong_Operator]^right.toArray ( array, index  <=  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  Object[]  array  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( rightIsNext && right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( rightIsNext || right != null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( rightIsNext || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( leftIsPrevious && left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( leftIsPrevious || left != null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int relativePositionRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int indexRelativeToMe = index - nextIndex;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  >=  relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( relativePosition <= 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe < 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe <= absolutePositionOfParent )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnLeft ( size, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnLeft ( indexRelativeToMe, value ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnLeft ( relativePosition, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnLeft ( mid, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnRight ( result, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnRight ( indexRelativeToMe, value ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return insertOnRight ( mid, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( nextIndex, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( indexRelativeToMe, value ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^setLeft ( new AVLNode<E> ( -0, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( new AVLNode<E> ( -1, value, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^setLeft ( new AVLNode<E> ( -absolutePositionOfParent, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( startIndex, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe >= 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition > 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition >= 1 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return this;^514^^^^^502^515^return ret;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.insert ( result, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.insert ( indexRelativeToMe, value ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.insert ( startIndex, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( new AVLNode<E> ( +1, value, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +currentIndex, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( new AVLNode<E> ( +1, obj, 1, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +relativePosition, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +mid, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.insert ( nextIndex, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return rightIsNext ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return leftIsPrevious ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return getRightSubTree (  )  != null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return getLeftSubTree (  )  != null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int resultRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  !=  relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( start == 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe != 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe == result )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( relativePosition > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe >= 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe > 1 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( mid > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( left.remove ( result ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( left.remove ( startIndex ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.remove ( relativePosition ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition < mid )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( nextIndex > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition > mid )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setRight ( right.remove ( mid ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( left.remove ( left.left ) , indexRelativeToMe ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( result < 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition < height )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( 1.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( startIndex > 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  next  nextNode  node  prev  ret  right  rightFollower  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null || getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  != null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition > start )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left.relativePosition += result +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  >>  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  ( relativePosition < 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : result ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left.relativePosition += nextIndex +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  !=  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  ( relativePosition >= 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > currentIndex ? currentIndex : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : indexRelativeToMe ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( mid > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition < 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition > absolutePositionOfParent )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition > -1 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +   instanceof   ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > nextIndex ? nextIndex : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > expectedModCount ? expectedModCount : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 :  ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left.relativePosition += mid +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  <  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : startIndex ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^right.relativePosition += nextIndex -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition  <   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition -  ( relativePosition == 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < -1 ? -1 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : endIndex ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition  |   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition -  ( relativePosition <= 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 1 ? 1 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < expectedModCount ? expectedModCount : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 0 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( heightRightMinusLeft (  )  < 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( heightRightMinusLeft (  )  >= 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( heightRightMinusLeft (  )  > -1 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( heightRightMinusLeft (  )  >  )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious )  {^652^^^^^637^666^if  ( rightIsNext )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( left != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^value = value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^right = 3;^653^^^^^637^666^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( rightIsNext )  {^641^^^^^626^656^if  ( leftIsPrevious )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition < start )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^value = value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left = this;^642^^^^^627^657^left = rightMin.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( result < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious )  {^652^^^^^637^667^if  ( rightIsNext )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( left != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left = 1;^660^^^^^645^675^left = leftPrevious;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( mid > 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( relativePosition > endIndex )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^value = this.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^value = result;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( left.heightRightMinusLeft (  )  >= 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setLeft ( null.rotateLeft (  ) , null ) ;^683^^^^^675^694^setLeft ( left.rotateLeft (  ) , null ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( right.heightRightMinusLeft (  )  <= 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( 3.heightRightMinusLeft (  )  < 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( node != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^return ;^701^^^^^699^704^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  nextIndex  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( node != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^return index;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^return endIndex;^711^^^^^709^716^return 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^node.relativePosition = result;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return nextIndex;^715^^^^^709^716^return oldOffset;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^height = Math.max ( getLeftSubTree (  &&  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^height = Math.max ( getLeftSubTree (  )  != null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -oldOffset : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -oldOffset : getRightSubTree (  ) .height )  + oldOffset;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  ;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -index : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -index : getRightSubTree (  ) .height )  + index;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -end : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -end : getRightSubTree (  ) .height )  + end;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^return node == null ? -1 : nextIndex;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return node != null ? -1 : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Literal]^return node == null ? -index : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^return getHeight ( getRightSubTree (  )  )   &&  getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  newOffest  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final AVLNode<E> newTop = null;^742^^^^^741^756^final AVLNode<E> newTop = right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int newTopPosition = movedPosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int movedPosition = getOffset ( newTop )  &  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( newTop, myNewPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( this, relativePosition ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( movedNode, myNewPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int 1Position = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^final int newTopPosition = movedPosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^final int movedPosition = getOffset ( newTop )  <  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( newTop, result ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( this, oldOffset ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^setOffset ( movedNode, myNewPosition ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^leftIsPrevious = node != null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^left = leftIsPrevious ? previous : 4;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^left = node ? previous : leftIsPrevious;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Wrong_Operator]^rightIsNext = node != null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^right = leftIsPrevious ? next : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Argument_Swapping]^right = next ? rightIsNext : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  root  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  size  start  startIndex  
[BugLab_Variable_Misuse]^while  ( s != null && nextIndex > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^while  ( leftSubTree != null && s.height > getHeight ( s )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s != null || s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s == null && s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s != null && s.height == getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( s == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += newOffest;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = relativePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += myNewPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( newOffest > height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( otherTree.height > newTopPosition )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( otherTree.height >= height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^while  ( s != null && myNewPosition > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s != null && s.height >= getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += 3.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = newOffest;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += 1.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( leftSubTree == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^leftSubTree.relativePosition -= oldOffset - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize   instanceof   1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition += currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^leftSubTree.relativePosition -= currentSize ;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( s == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = relativePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - size + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  &  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^s.relativePosition = sAbsolutePosition - currentSize + height;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = nextIndex;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^leftSubTree.relativePosition -= newTopPosition - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  >  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition = currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = newOffest - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - oldOffset + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = currentSizeAbsolutePosition - s + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = s - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  ==  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^s.relativePosition = sAbsolutePosition - currentSize ;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^maxNode.relativePosition = newOffest - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^maxNode.relativePosition = currentSize - 1 - oldOffset;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  ==  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  &&  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^maxNode.relativePosition = currentSize - result - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^otherTree.relativePosition += newOffest;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^int sAbsolutePosition = s.relativePosition + newTopPosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^int sAbsolutePosition = result + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^int s.relativePositionAbsolutePosition = s + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^int sParentAbsolutePosition = startIndex;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAncestors.push ( 2 ) ;^837^^^^^822^852^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^maxNode.setRight ( 4, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s = null.balance (  ) ;^865^^^^^850^880^s = sAncestor.balance (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^leftSubTree.relativePosition -= startIndex - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  &&  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^leftSubTree.relativePosition -= currentSize - startIndex;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^leftSubTree.max (  ) .setRight ( null, null ) ;^850^^^^^835^865^leftSubTree.max (  ) .setRight ( null, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = oldOffset - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  |  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = myNewPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += result;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^leftSubTree.relativePosition -= start - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  <  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^leftSubTree.relativePosition -= currentSize - size;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - result + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  <=  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  <=  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^otherTree.relativePosition += newTopPosition;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^int sAbsolutePosition = s.relativePosition + startIndex;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^int currentSizeAbsolutePosition = s.relativePosition + s;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^int sParentAbsolutePosition = 1;^834^^^^^819^849^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = null.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^int sAbsolutePosition = result;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^int sParentAbsolutePosition = size;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^while  ( s != null && s.height > getHeight ( 4 )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^while  ( s != null && nextIndex > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s != null || s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s == null && s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^while  ( s != null && s.height >= getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( s == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += result;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = sParentAbsolutePosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s = 0.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += nextIndex;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = oldOffset;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAbsolutePosition += startIndex;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^sAncestors.push ( null ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^otherTreeMin.setLeft ( maxNode, s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( otherTree == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( s == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = newOffest - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - oldOffset;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  ||  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - sParentAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^s.relativePosition = s - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  !=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^otherTreeMin.relativePosition = newTopPosition - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^otherTreeMin.relativePosition = currentSize - newTopPosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^otherTreeMin.relativePosition = sParentAbsolutePosition - currentSize;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^otherTreeMin.relativePosition = currentSize  >  sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = 0.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  Deque  sAncestors  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newTopPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( myNewPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( oldOffset ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( result ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( size ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( sAbsolutePosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( newTopPosition != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( parent.modCount != result )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( expectedModCount.modCount != parent )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( parent.modCount <= expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return myNewPosition < parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^return nextIndex <= parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( next != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( newOffest ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( myNewPosition ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = 3.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( newTopPosition ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = parent.root.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = 2.next (  ) ;^1052^^^^^1041^1054^next = next.next (  ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return relativePosition > 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^return nextIndex >= 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^return nextIndex > fromIndex;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( next != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  ||  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex  ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^next = nextIndex.root.get ( parent - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  >  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex - oldOffset ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( newTopPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex - relativePosition ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( myNewPosition - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  &&  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex - currentSize ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return result;^1073^^^^^1060^1074^return value;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^return relativePosition;^1077^^^^^1076^1078^return nextIndex;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^return nextIndex (  )   &  1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^return nextIndex (  )  - endIndex;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( currentIndex != -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^if  ( currentIndex == -relativePosition )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^parent.remove ( newOffest ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( newTopPosition != currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^if  ( nextIndex != newOffest )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( nextIndex <= currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Literal]^currentIndex = -;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Wrong_Operator]^if  ( current != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^current.setValue ( value ) ;^1107^^^^^1102^1108^current.setValue ( obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^parent.add ( nextIndex, value ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^parent.add ( relativePosition, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Argument_Swapping]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeList AVLNode TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  cTree  current  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  root  s  sAncestor  TreeList  parent  boolean  leftIsPrevious  rightIsNext  E  obj  result  value  int  absolutePositionOfParent  currentIndex  currentSize  end  endIndex  expectedModCount  fromIndex  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  nextIndex  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  size  start  startIndex  
[BugLab_Variable_Misuse]^this.relativePosition = height;^331^^^^^329^337^this.relativePosition = relativePosition;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Variable_Misuse]^value = value;^332^^^^^329^337^value = obj;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Wrong_Literal]^rightIsNext = false;^333^^^^^329^337^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^334^^^^^329^337^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   final int relativePosition final E obj AVLNode<E> rightFollower AVLNode<E> leftFollower [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Variable_Misuse]^this ( 4.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Wrong_Operator]^this ( coll.iterator (  ) , 0, coll.size (  )   >=  1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Wrong_Literal]^this ( coll.iterator (  ) , 0, coll.size (  )  , 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Variable_Misuse]^this ( 3.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^347^^^^^346^348^this ( coll.iterator (  ) , 0, coll.size (  )  - 1, 0, null, null ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] Collection)   Collection<? extends E> coll [VARIABLES] AVLNode  left  leftFollower  right  rightFollower  Collection  coll  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  height  relativePosition  
[BugLab_Variable_Misuse]^final int mid = relativePosition +  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^final int mid = start +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^final int mid = end +  ( start - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^final int mid = start +  >  ( end - start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^final int mid = start +  ( end - start )  * 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^final int mid = start +  ( end  <=  start )  / 2;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^final int mid = start +  ( end - start )  / relativePosition;^373^^^^^371^389^final int mid = start +  ( end - start )  / 2;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^if  ( mid < mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^if  ( start < relativePosition )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^if  ( mid < start )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^if  ( start == mid )  {^374^^^^^371^389^if  ( start < mid )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^377^^^^^371^389^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, relativePosition, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, start, relativePosition - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( mid, start, iterator - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, prev, mid - 1, mid, start, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, mid, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( prev, start, mid - 1, mid, iterator, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  |  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^left = new AVLNode<E> ( iterator, start, mid , mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^left = new AVLNode<E> ( iterator, start, start - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  >>  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( start, iterator, mid - 1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  <=  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^left = new AVLNode<E> ( iterator, start, prev - 1, mid, mid, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^left = new AVLNode<E> ( iterator, start, mid  &&  1, mid, prev, this ) ;^375^^^^^371^389^left = new AVLNode<E> ( iterator, start, mid - 1, mid, prev, this ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^relativePosition = start - absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^relativePosition = mid - start;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^relativePosition = absolutePositionOfParent - mid;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^relativePosition = mid  >>  absolutePositionOfParent;^381^^^^^371^389^relativePosition = mid - absolutePositionOfParent;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^if  ( start < end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^if  ( end < mid )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Operator]^if  ( mid <= end )  {^382^^^^^371^389^if  ( mid < end )  {^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^rightIsNext = false;^385^^^^^371^389^rightIsNext = true;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( 3, mid + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, start + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( next, mid + 1, end, mid, this, iterator ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( iterator, end + 1, mid, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( iterator, next + 1, end, mid, this, mid ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^right = new AVLNode<E> ( iterator, mid , end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, mid + 1, start, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Argument_Swapping]^right = new AVLNode<E> ( end, mid + 1, iterator, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, relativePosition + 1, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^right = new AVLNode<E> ( iterator, mid + end, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^right = new AVLNode<E> ( iterator, mid + 1, relativePosition, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Wrong_Literal]^right = new AVLNode<E> ( iterator, mid + relativePosition, end, mid, this, next ) ;^383^^^^^371^389^right = new AVLNode<E> ( iterator, mid + 1, end, mid, this, next ) ;^[CLASS] AVLNode  [METHOD] <init> [RETURN_TYPE] TreeList$AVLNode)   Iterator<? extends E> iterator final int start final int end final int absolutePositionOfParent AVLNode<E> prev AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  Iterator  iterator  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^return obj;^397^^^^^396^398^return value;^[CLASS] AVLNode  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] AVLNode  left  leftFollower  next  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  mid  relativePosition  start  
[BugLab_Variable_Misuse]^final int relativePositionRelativeToMe = index - relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Variable_Misuse]^final int indexRelativeToMe = index - mid;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  >>  relativePosition;^414^^^^^413^425^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Variable_Misuse]^if  ( relativePosition == 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe != 0 )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe == relativePosition )  {^416^^^^^413^425^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Variable_Misuse]^final AVLNode<E> nextNode = mid < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Operator]^final AVLNode<E> nextNode = indexRelativeToMe > 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Literal]^final AVLNode<E> nextNode = indexRelativeToMe < start ? getLeftSubTree (  )  : getRightSubTree (  ) ;^420^^^^^413^425^final AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree (  )  : getRightSubTree (  ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Operator]^if  ( nextNode != null )  {^421^^^^^413^425^if  ( nextNode == null )  {^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Variable_Misuse]^return nextNode.get ( mid ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Argument_Swapping]^return indexRelativeToMe.get ( nextNode ) ;^424^^^^^413^425^return nextNode.get ( indexRelativeToMe ) ;^[CLASS] AVLNode  [METHOD] get [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  start  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  == null )  {^431^^^^^430^444^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( start != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( result >= -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return mid;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, mid + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + indexRelativeToMe ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int result = object.indexOf ( left, index + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int result = left.indexOf ( object, left.relativePosition + index ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int result = left.indexOf ( left.relativePosition, index + object ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  |  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, start + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + mid ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  ||  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( mid != -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( result <= -1 )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( result != -start )  {^433^^^^^430^444^if  ( result != -1 )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return indexRelativeToMe;^434^^^^^430^444^return result;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + start ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int result = index.indexOf ( object, left + left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  <=  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int result = left.indexOf ( object, index + relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int result = left.indexOf ( object, index  <  left.relativePosition ) ;^432^^^^^430^444^final int result = left.indexOf ( object, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( obj == null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^if  ( object == null ? value == value : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( value != null ? value == object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( value == null ? value != object : value.equals ( object )  )  {^437^^^^^430^444^if  ( value == null ? value == object : value.equals ( object )  )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return result;^438^^^^^430^444^return index;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return relativePosition;^438^^^^^430^444^return index;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null )  {^440^^^^^430^444^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return right.indexOf ( object, mid + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return right.indexOf ( object, index + start ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return object.indexOf ( right, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return right.indexOf ( object, right.relativePosition + index ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return index.indexOf ( object, right + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return right.relativePosition.indexOf ( object, index + right ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  ==  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return right.indexOf ( object, start + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return right.indexOf ( object, index + indexRelativeToMe ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return right.indexOf ( index, object + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  >  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return right.indexOf ( object, relativePosition + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return 0.indexOf ( object, index + right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  !=  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return right.indexOf ( object, index  <=  right.relativePosition ) ;^441^^^^^430^444^return right.indexOf ( object, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] indexOf [RETURN_TYPE] int   Object object final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  Object  object  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^array[index] = obj;^453^^^^^452^460^array[index] = value;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  == null )  {^454^^^^^452^460^if  ( getLeftSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, mid + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, index + result ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( left.relativePosition, index + array ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( index, array + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( array, left.relativePosition + index ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^left.toArray ( array, index  ||  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, start + left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^left.toArray ( array, index + start ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( left, index + array.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^left.toArray ( array, index + left ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^left.toArray ( array, index  ^  left.relativePosition ) ;^455^^^^^452^460^left.toArray ( array, index + left.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null )  {^457^^^^^452^460^if  ( getRightSubTree (  )  != null )  {^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, mid + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, index + start ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( index, array + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, right.relativePosition + index ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, index + right ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Argument_Swapping]^right.toArray ( array, right + index.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^right.toArray ( array, index  |  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, start + right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^right.toArray ( array, index + indexRelativeToMe ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Wrong_Operator]^right.toArray ( array, index  <=  right.relativePosition ) ;^458^^^^^452^460^right.toArray ( array, index + right.relativePosition ) ;^[CLASS] AVLNode  [METHOD] toArray [RETURN_TYPE] void   Object[] array final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  Object[]  array  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^if  ( right || rightIsNext == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^if  ( rightIsNextIsNext || right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( rightIsNext && right == null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( rightIsNext || right != null )  {^468^^^^^467^472^if  ( rightIsNext || right == null )  {^[CLASS] AVLNode  [METHOD] next [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( rightIsNext || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( thisIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^if  ( left || leftIsPrevious == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^if  ( leftIsPreviousIsPrevious || left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( leftIsPrevious && left == null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( leftIsPrevious || left != null )  {^480^^^^^479^484^if  ( leftIsPrevious || left == null )  {^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return 3.max (  ) ;^483^^^^^479^484^return left.max (  ) ;^[CLASS] AVLNode  [METHOD] previous [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int startRelativeToMe = index - relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int indexRelativeToMe = index - start;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  ==  relativePosition;^494^^^^^493^500^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( result <= 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe < 0 )  {^496^^^^^493^500^if  ( indexRelativeToMe <= 0 )  {^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return insertOnLeft ( relativePosition, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return insertOnLeft ( indexRelativeToMe, value ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return insertOnLeft ( obj, indexRelativeToMe ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return insertOnLeft ( start, obj ) ;^497^^^^^493^500^return insertOnLeft ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return insertOnRight ( start, obj ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return insertOnRight ( indexRelativeToMe, value ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return insertOnRight ( obj, indexRelativeToMe ) ;^499^^^^^493^500^return insertOnRight ( indexRelativeToMe, obj ) ;^[CLASS] AVLNode  [METHOD] insert [RETURN_TYPE] TreeList$AVLNode   final int index final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^503^^^^^502^515^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( start, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( indexRelativeToMe, value ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( left.insert ( obj, indexRelativeToMe ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( indexRelativeToMe.insert ( left, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( new AVLNode<E> ( -1, value, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( new AVLNode<E> ( -1, left, this, obj ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^setLeft ( new AVLNode<E> ( -2, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^setLeft ( new AVLNode<E> ( -start, obj, this, left ) , null ) ;^504^^^^^502^515^setLeft ( new AVLNode<E> ( -1, obj, this, left ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( obj.insert ( indexRelativeToMe, left ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.insert ( relativePosition, obj ) , null ) ;^506^^^^^502^515^setLeft ( left.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( start >= 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition > 0 )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition >= absolutePositionOfParent )  {^509^^^^^502^515^if  ( relativePosition >= 0 )  {^[CLASS] AVLNode  [METHOD] insertOnLeft [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^518^^^^^517^529^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( right.insert ( start, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( right.insert ( indexRelativeToMe, value ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( indexRelativeToMe.insert ( right, obj ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( right.insert ( obj, indexRelativeToMe ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( obj.insert ( indexRelativeToMe, right ) , null ) ;^521^^^^^517^529^setRight ( right.insert ( indexRelativeToMe, obj ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( new AVLNode<E> ( +1, value, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( new AVLNode<E> ( +1, right, obj, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +height, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +0, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^setRight ( new AVLNode<E> ( +mid, obj, right, this ) , null ) ;^519^^^^^517^529^setRight ( new AVLNode<E> ( +1, obj, right, this ) , null ) ;^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition < 1 )  {^523^^^^^517^529^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] insertOnRight [RETURN_TYPE] TreeList$AVLNode   final int indexRelativeToMe final E obj [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return rightIsNext ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return left ? null : leftIsPrevious;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return leftIsPreviousIsPrevious ? null : left;^536^^^^^535^537^return leftIsPrevious ? null : left;^[CLASS] AVLNode  [METHOD] getLeftSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^return leftIsPrevious ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return right ? null : rightIsNext;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return rightIsNextIsNext ? null : right;^543^^^^^542^544^return rightIsNext ? null : right;^[CLASS] AVLNode  [METHOD] getRightSubTree [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return getRightSubTree (  )  != null ? this : right.max (  ) ;^552^^^^^551^553^return getRightSubTree (  )  == null ? this : right.max (  ) ;^[CLASS] AVLNode  [METHOD] max [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^return getLeftSubTree (  )  != null ? this : left.min (  ) ;^561^^^^^560^562^return getLeftSubTree (  )  == null ? this : left.min (  ) ;^[CLASS] AVLNode  [METHOD] min [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int relativePositionRelativeToMe = index - relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int indexRelativeToMe = index - result;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int relativePositionRelativeToMe = index - index;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int indexRelativeToMe = index  >=  relativePosition;^571^^^^^570^589^final int indexRelativeToMe = index - relativePosition;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( start == 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe > 0 )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe == indexRelativeToMe )  {^573^^^^^570^589^if  ( indexRelativeToMe == 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( result > 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe == 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( indexRelativeToMe < 0 )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe > mid )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe > end )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( indexRelativeToMe > index )  {^576^^^^^570^589^if  ( indexRelativeToMe > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( mid > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > start )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.remove ( mid ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( indexRelativeToMe.remove ( left ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( left.left.remove ( indexRelativeToMe ) , left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.remove ( result ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition < 1 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( right.remove ( start ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( indexRelativeToMe.remove ( right ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( right.right.remove ( indexRelativeToMe ) , right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( right.remove ( relativePosition ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^578^^^^^570^589^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( result > 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > mid )  {^583^^^^^570^589^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setRight ( 2.remove ( indexRelativeToMe ) , right.right ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( right.remove ( right.right ) , indexRelativeToMe ) ;^577^^^^^570^589^setRight ( right.remove ( indexRelativeToMe ) , right.right ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( left.remove ( start ) , left.left ) ;^582^^^^^570^589^setLeft ( left.remove ( indexRelativeToMe ) , left.left ) ;^[CLASS] AVLNode  [METHOD] remove [RETURN_TYPE] TreeList$AVLNode   final int index [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^592^^^^^591^601^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( right.right.removeMax (  ) , right ) ;^595^^^^^591^601^setRight ( right.removeMax (  ) , right.right ) ;^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition < height )  {^596^^^^^591^601^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeMax [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^604^^^^^603^613^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^setLeft ( 2.removeMin (  ) , left.left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( left.left.removeMin (  ) , left ) ;^607^^^^^603^613^setLeft ( left.removeMin (  ) , left.left ) ;^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition >  )  {^608^^^^^603^613^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeMin [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  next  nextNode  prev  ret  right  rightFollower  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null || getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null && getLeftSubTree (  )  == null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  != null )  {^621^^^^^606^636^if  ( getRightSubTree (  )  == null && getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getRightSubTree (  )  != null )  {^624^^^^^609^639^if  ( getRightSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( start > 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition >= 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > height )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > indexRelativeToMe )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^left.relativePosition += mid +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  <=  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  ( relativePosition >= 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > mid ? mid : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 2 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^left.relativePosition += result +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +   instanceof   ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  ( relativePosition == 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition >  ?  : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > result )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > index )  {^625^^^^^610^640^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^left.relativePosition += indexRelativeToMe +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  >  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > end ? end : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 :  ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^left.relativePosition += start +  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^left.relativePosition += relativePosition +  >=  ( relativePosition > 0 ? 0 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > 1 ? 1 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^left.relativePosition += relativePosition +  ( relativePosition > -1 ? -1 : 1 ) ;^626^^^^^611^641^left.relativePosition += relativePosition +  ( relativePosition > 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( getLeftSubTree (  )  != null )  {^631^^^^^616^646^if  ( getLeftSubTree (  )  == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^right.relativePosition += indexRelativeToMe -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition  !=   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition -  ( relativePosition <= 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < relativePosition ? relativePosition : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < -1 ? -1 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : index ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^right.relativePosition += start -  ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition  <=   ( relativePosition < 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^right.relativePosition += relativePosition -  ( relativePosition == 0 ? 0 : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^right.relativePosition += relativePosition -  ( relativePosition <  ?  : 1 ) ;^632^^^^^617^647^right.relativePosition += relativePosition -  ( relativePosition < 0 ? 0 : 1 ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( heightRightMinusLeft (  )  >= 0 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( heightRightMinusLeft (  )  > start )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( heightRightMinusLeft (  )  > -1 )  {^637^^^^^622^652^if  ( heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious )  {^652^^^^^637^666^if  ( rightIsNext )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = leftMax.right.right;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = leftMax;^653^^^^^637^666^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( left != null )  {^657^^^^^637^666^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^661^^^^^637^666^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( start > 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition < 0 )  {^663^^^^^637^666^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^value = value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = leftMax.value.value;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = leftMax;^651^^^^^637^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final AVLNode<E> left.leftPrevious = left;^655^^^^^637^666^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( rightIsNext )  {^641^^^^^626^656^if  ( leftIsPrevious )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^left = rightMin.left.left;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^left = rightMin;^642^^^^^627^657^left = rightMin.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( indexRelativeToMe < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition == 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition < 1 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^value = value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = rightMin.value.value;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = rightMin;^640^^^^^625^655^value = rightMin.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( mid < 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition <= 0 )  {^645^^^^^630^660^if  ( relativePosition < 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( leftIsPrevious )  {^652^^^^^637^667^if  ( rightIsNext )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = leftMax.right.right;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = leftMax;^653^^^^^638^668^right = leftMax.right;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( left != null )  {^657^^^^^642^672^if  ( left == null )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^leftIsPrevious = false;^661^^^^^646^676^leftIsPrevious = true;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^if  ( mid > 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( relativePosition < 0 )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( relativePosition > relativePosition )  {^663^^^^^648^678^if  ( relativePosition > 0 )  {^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^value = value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = leftMax.value.value;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^value = leftMax;^651^^^^^636^666^value = leftMax.value;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final AVLNode<E> 2Max = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^final AVLNode<E> left.leftPrevious = left;^655^^^^^640^670^final AVLNode<E> leftPrevious = left.left;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Variable_Misuse]^final AVLNode<E> nullMax = left.max (  ) ;^650^^^^^635^665^final AVLNode<E> leftMax = left.max (  ) ;^[CLASS] AVLNode  [METHOD] removeSelf [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( left.heightRightMinusLeft (  )  >= 0 )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( left.heightRightMinusLeft (  )  > result )  {^682^^^^^675^694^if  ( left.heightRightMinusLeft (  )  > 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( right.heightRightMinusLeft (  )  <= 0 )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^if  ( right.heightRightMinusLeft (  )  <  )  {^687^^^^^675^694^if  ( right.heightRightMinusLeft (  )  < 0 )  {^[CLASS] AVLNode  [METHOD] balance [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( node != null )  {^700^^^^^699^704^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^return ;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Literal]^return end;^701^^^^^699^704^return 0;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return node.relativePosition.relativePosition;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Argument_Swapping]^return node;^703^^^^^699^704^return node.relativePosition;^[CLASS] AVLNode  [METHOD] getOffset [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  relativePosition  result  start  
[BugLab_Wrong_Operator]^if  ( node != null )  {^710^^^^^709^716^if  ( node == null )  {^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^return result;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^return ;^711^^^^^709^716^return 0;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^node.relativePosition = start;^714^^^^^709^716^node.relativePosition = newOffest;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^return mid;^715^^^^^709^716^return oldOffset;^[CLASS] AVLNode  [METHOD] setOffset [RETURN_TYPE] int   AVLNode<E> node final int newOffest [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^height = Math.max ( getLeftSubTree (  &  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^height = Math.max ( getLeftSubTree (  )  != null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -height : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -height : getRightSubTree (  ) .height )  + height;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -absolutePositionOfParent : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -absolutePositionOfParent : getRightSubTree (  ) .height )  + absolutePositionOfParent;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? - : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? - : getRightSubTree (  ) .height )  + ;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  ;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Literal]^height = Math.max ( getLeftSubTree (  )  == null ? -relativePosition : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -relativePosition : getRightSubTree (  ) .height )  + relativePosition;^722^723^724^^^721^725^height = Math.max ( getLeftSubTree (  )  == null ? -1 : getLeftSubTree (  ) .height, getRightSubTree (  )  == null ? -1 : getRightSubTree (  ) .height )  + 1;^[CLASS] AVLNode  [METHOD] recalcHeight [RETURN_TYPE] void   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^return node == null ? -1 : mid;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^return node.height == null ? -1 : node;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^return node != null ? -1 : node.height;^731^^^^^730^732^return node == null ? -1 : node.height;^[CLASS] AVLNode  [METHOD] getHeight [RETURN_TYPE] int   AVLNode<E> node [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^return getHeight ( getRightSubTree (  )  )   <=  getHeight ( getLeftSubTree (  )  ) ;^738^^^^^737^739^return getHeight ( getRightSubTree (  )  )  - getHeight ( getLeftSubTree (  )  ) ;^[CLASS] AVLNode  [METHOD] heightRightMinusLeft [RETURN_TYPE] int   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  newOffest  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int newTopPosition = myNewPosition + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^745^^^^^741^756^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int movedPosition = getOffset ( newTop )  >  + getOffset ( movedNode ) ;^747^^^^^741^756^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setRight ( newTop, movedNode ) ;^749^^^^^741^756^setRight ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( newTop, myNewPosition ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setOffset ( newTopPosition, newTop ) ;^752^^^^^741^756^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( this, newOffest ) ;^753^^^^^741^756^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( movedNode, newTopPosition ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setOffset ( movedPosition, movedNode ) ;^754^^^^^741^756^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateLeft [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^final AVLNode<E> newTop = 2;^759^^^^^758^773^final AVLNode<E> newTop = left;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int newTopPosition = start + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int relativePositionPosition = newTop + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^final int nullPosition = relativePosition + getOffset ( newTop ) ;^762^^^^^758^773^final int newTopPosition = relativePosition + getOffset ( newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^final int movedPosition = getOffset ( movedNode )  + getOffset ( newTop ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^final int movedPosition = getOffset ( newTop )  >=  + getOffset ( movedNode ) ;^764^^^^^758^773^final int movedPosition = getOffset ( newTop )  + getOffset ( movedNode ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setLeft ( newTop, movedNode ) ;^766^^^^^758^773^setLeft ( movedNode, newTop ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( newTop, newOffest ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setOffset ( newTopPosition, newTop ) ;^769^^^^^758^773^setOffset ( newTop, newTopPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( this, start ) ;^770^^^^^758^773^setOffset ( this, myNewPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^setOffset ( movedNode, oldOffset ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^setOffset ( movedPosition, movedNode ) ;^771^^^^^758^773^setOffset ( movedNode, movedPosition ) ;^[CLASS] AVLNode  [METHOD] rotateRight [RETURN_TYPE] TreeList$AVLNode   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^leftIsPrevious = node != null;^782^^^^^781^785^leftIsPrevious = node == null;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^left = leftIsPrevious ? previous : 0;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^left = rightIsNext ? previous : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^left = previous ? leftIsPrevious : node;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^left = leftIsPrevious ? node : previous;^783^^^^^781^785^left = leftIsPrevious ? previous : node;^[CLASS] AVLNode  [METHOD] setLeft [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> previous [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^rightIsNext = 1 == null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Wrong_Operator]^rightIsNext = node != null;^794^^^^^793^797^rightIsNext = node == null;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^right = leftIsPrevious ? next : node;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = rightIsNext ? node : next;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Argument_Swapping]^right = node ? next : rightIsNext;^795^^^^^793^797^right = rightIsNext ? next : node;^[CLASS] AVLNode  [METHOD] setRight [RETURN_TYPE] void   AVLNode<E> node AVLNode<E> next [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  movedNode  newTop  next  nextNode  node  prev  previous  ret  right  rightFollower  rightMin  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  start  
[BugLab_Variable_Misuse]^while  ( s != null && newTopPosition > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^while  ( leftSubTree != null && s.height > getHeight ( s )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s != null || s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s == null && s.height > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s != null && s.height >= getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( s == null )  {^839^^^^^824^854^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += oldOffset;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^sAbsolutePosition += s.relativePosition.relativePosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^sAbsolutePosition += s;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = relativePosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s = s.left.left;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s = s;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += newOffest;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = 1.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^if  ( myNewPosition > height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^if  ( otherTree.height > start )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( otherTree.height >= height )  {^820^^^^^805^835^if  ( otherTree.height > height )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^while  ( s != null && start > getHeight ( leftSubTree )  )  {^835^^^^^820^850^while  ( s != null && s.height > getHeight ( leftSubTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += newTopPosition;^840^^^^^825^855^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = newOffest;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = 2.pop (  ) ;^863^^^^^848^878^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( leftSubTree == null )  {^849^^^^^834^864^if  ( leftSubTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^leftSubTree.relativePosition -= newOffest - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  &&  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition += currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^leftSubTree.relativePosition -= currentSize ;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^if  ( null != null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( s == null )  {^853^^^^^838^868^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - newOffest + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = currentSizeAbsolutePosition - s + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = s - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  <  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^s.relativePosition = sAbsolutePosition - currentSize ;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.min (  ) .setLeft ( null, 2 ) ;^854^^^^^839^869^s.min (  ) .setLeft ( null, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = newTopPosition;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s = 3;^838^^^^^823^853^s = s.left;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  <  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition = currentSize - 1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = start - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - relativePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = sAbsolutePositionAbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = currentSize - sAbsolutePosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  ^  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^s.relativePosition = sAbsolutePosition - currentSize + relativePosition;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^maxNode.relativePosition = start - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^maxNode.relativePosition = currentSize - 1 - oldOffset;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^maxNode.relativePosition = sParentAbsolutePosition - 1 - currentSize;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  >=  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  <  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^maxNode.relativePosition = currentSize  - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^otherTree.relativePosition += sAbsolutePosition;^858^^^^^843^873^otherTree.relativePosition += currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^int sAbsolutePosition = s.relativePosition + newTopPosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^int sAbsolutePosition = newOffest + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^int s.relativePositionAbsolutePosition = s + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^int sAbsolutePosition = currentSize + s.relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^maxNode.setRight ( otherTreeMin, s ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  <=  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^leftSubTree.relativePosition -= currentSize - currentSize;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = 0AbsolutePosition - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = newOffest - currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  &&  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^s.relativePosition = sAbsolutePosition - currentSize + height;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = result;^836^^^^^821^851^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^leftSubTree.relativePosition -= currentSize  ==  1;^851^^^^^836^866^leftSubTree.relativePosition -= currentSize - 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - newTopPosition + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  >=  currentSize + 1;^855^^^^^840^870^s.relativePosition = sAbsolutePosition - currentSize + 1;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^maxNode.relativePosition = oldOffset - 1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^maxNode.relativePosition = currentSize - 1 - relativePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  ==  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^maxNode.relativePosition = currentSize  >>  1 - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^maxNode.relativePosition = currentSize - oldOffset - sParentAbsolutePosition;^857^^^^^842^872^maxNode.relativePosition = currentSize - 1 - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^int sAbsolutePosition = s.relativePosition + relativePosition;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^int sAbsolutePosition = oldOffset + currentSize;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^int currentSizeAbsolutePosition = s.relativePosition + s;^833^^^^^818^848^int sAbsolutePosition = s.relativePosition + currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^maxNode.setRight ( 1, otherTreeMin ) ;^848^^^^^833^863^maxNode.setRight ( s, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^int sAbsolutePosition = myNewPosition;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^int s.relativePositionAbsolutePosition = s;^873^^^^^858^888^int sAbsolutePosition = s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Literal]^int sParentAbsolutePosition = indexRelativeToMe;^874^^^^^859^889^int sParentAbsolutePosition = 0;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s != null || s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s == null && s.height > getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^while  ( s != null && s.height >= getHeight ( otherTree )  )  {^875^^^^^860^890^while  ( s != null && s.height > getHeight ( otherTree )  )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( s == null )  {^879^^^^^864^894^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += start;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^sAbsolutePosition += s.relativePosition.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^sAbsolutePosition += s;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = newOffest;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s = s.right.right;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s = s;^878^^^^^863^893^s = s.right;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += null.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += newOffest;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAncestors.push ( null ) ;^877^^^^^862^892^sAncestors.push ( s ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sAbsolutePosition += 1.relativePosition;^880^^^^^865^895^sAbsolutePosition += s.relativePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^sParentAbsolutePosition = newTopPosition;^876^^^^^861^891^sParentAbsolutePosition = sAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^otherTreeMin.setLeft ( maxNode, s ) ;^885^^^^^870^900^otherTreeMin.setLeft ( s, maxNode ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( otherTree == null )  {^886^^^^^871^901^if  ( otherTree != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^otherTree.min (  ) .setLeft ( null, otherTreeMinMin ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^otherTree.min (  ) .setLeft ( null, otherTree ) ;^887^^^^^872^902^otherTree.min (  ) .setLeft ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^if  ( s == null )  {^890^^^^^875^905^if  ( s != null )  {^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = myNewPosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = sAbsolutePosition - newTopPosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = currentSizeAbsolutePosition - s;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = currentSize - sAbsolutePosition;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  >>  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.relativePosition = relativePosition - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^s.relativePosition = s - currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^s.relativePosition = sAbsolutePosition  <=  currentSize;^892^^^^^877^907^s.relativePosition = sAbsolutePosition - currentSize;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^s.max (  ) .setRight ( null, 4 ) ;^891^^^^^876^906^s.max (  ) .setRight ( null, otherTreeMin ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^otherTreeMin.relativePosition = newOffest - sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^otherTreeMin.relativePosition = currentSize - newTopPosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Argument_Swapping]^otherTreeMin.relativePosition = sParentAbsolutePosition - currentSize;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Wrong_Operator]^otherTreeMin.relativePosition = currentSize  >  sParentAbsolutePosition;^894^^^^^879^909^otherTreeMin.relativePosition = currentSize - sParentAbsolutePosition;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = 2.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^final AVLNode<E> sAncestor = this.pop (  ) ;^898^^^^^883^913^final AVLNode<E> sAncestor = sAncestors.pop (  ) ;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return this;^902^^^^^887^917^return s;^[CLASS] AVLNode  [METHOD] addAll [RETURN_TYPE] TreeList$AVLNode   AVLNode<E> otherTree final int currentSize [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  Deque  sAncestors  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newTopPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( newOffest ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( myNewPosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( sAbsolutePosition ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( result ) .append ( ',' )^962^963^964^965^^961^975^return new StringBuilder (  ) .append ( "AVLNode ( " ) .append ( relativePosition ) .append ( ',' )^[CLASS] AVLNode  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AVLNode  left  leftFollower  leftMax  leftPrevious  leftSubTree  maxNode  movedNode  newTop  next  nextNode  node  otherTree  otherTreeMin  prev  previous  ret  right  rightFollower  rightMin  s  sAncestor  boolean  leftIsPrevious  rightIsNext  E  obj  value  int  absolutePositionOfParent  currentSize  end  height  index  indexRelativeToMe  mid  movedPosition  myNewPosition  newOffest  newTopPosition  oldOffset  relativePosition  result  sAbsolutePosition  sParentAbsolutePosition  start  
[BugLab_Variable_Misuse]^this.expectedModCount = nextIndex;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^1018^^^^^1015^1022^this.expectedModCount = parent.modCount;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^this.next = parent.root == null ? null : parent.root.get ( nextIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.next = parent.root.root == null ? null : parent.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.next = fromIndex.root == null ? null : parent.root.get ( parent ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.next = parent == null ? null : parent.root.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^this.next = parent.root != null ? null : parent.root.get ( fromIndex ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^this.next = fromIndex == null ? null : parent.root.get ( parent.root ) ;^1019^^^^^1015^1022^this.next = parent.root == null ? null : parent.root.get ( fromIndex ) ;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^this.currentIndex = -0;^1021^^^^^1015^1022^this.currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] <init> [RETURN_TYPE] TreeList,int)   TreeList<E> parent final int fromIndex [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^if  ( nextIndex != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^if  ( parent.modCount != nextIndex )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^if  ( parent.modCount.modCount != expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( parent.modCount == expectedModCount )  {^1032^^^^^1031^1035^if  ( parent.modCount != expectedModCount )  {^[CLASS] TreeListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^return fromIndex < parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^return parent < nextIndex.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^return nextIndex <= parent.size (  ) ;^1038^^^^^1037^1039^return nextIndex < parent.size (  ) ;^[CLASS] TreeListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( next != null )  {^1046^^^^^1041^1054^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( fromIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = nextIndex.get ( parent.root ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = nextIndex.root.get ( parent ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = parent.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = parent.root.root.get ( nextIndex ) ;^1047^^^^^1041^1054^next = parent.root.get ( nextIndex ) ;^[CLASS] TreeListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^return fromIndex > 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^return nextIndex >= 0;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^return nextIndex > nextIndex;^1057^^^^^1056^1058^return nextIndex > 0;^[CLASS] TreeListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( next != null )  {^1065^^^^^1060^1074^if  ( next == null )  {^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^next = null.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^next = parent.root.get ( fromIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = nextIndex.get ( parent.root - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = parent.root.root.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  >=  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex  ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = nextIndex.root.get ( parent - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  ^  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^next = parent.root.get ( nextIndex  >>  1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^next = parent.root.get ( nextIndex - nextIndex ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^next = parent.get ( nextIndex - 1 ) ;^1066^^^^^1060^1074^next = parent.root.get ( nextIndex - 1 ) ;^[CLASS] TreeListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  value  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^return fromIndex;^1077^^^^^1076^1078^return nextIndex;^[CLASS] TreeListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^return nextIndex (  )   <<  1;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^return nextIndex (  )  - nextIndex;^1081^^^^^1080^1082^return nextIndex (  )  - 1;^[CLASS] TreeListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( currentIndex <= -1 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^if  ( currentIndex == -2 )  {^1086^^^^^1084^1100^if  ( currentIndex == -1 )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^parent.remove ( nextIndex ) ;^1089^^^^^1084^1100^parent.remove ( currentIndex ) ;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^if  ( fromIndex != currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^if  ( nextIndex != fromIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^if  ( currentIndex != nextIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( nextIndex <= currentIndex )  {^1090^^^^^1084^1100^if  ( nextIndex != currentIndex )  {^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^currentIndex = -2;^1098^^^^^1084^1100^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Operator]^if  ( current != null )  {^1104^^^^^1102^1108^if  ( current == null )  {^[CLASS] TreeListIterator  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Variable_Misuse]^parent.add ( fromIndex, obj ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Argument_Swapping]^parent.add ( obj, nextIndex ) ;^1112^^^^^1110^1117^parent.add ( nextIndex, obj ) ;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
[BugLab_Wrong_Literal]^currentIndex = -2;^1114^^^^^1110^1117^currentIndex = -1;^[CLASS] TreeListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AVLNode  current  next  TreeList  parent  boolean  E  obj  int  currentIndex  expectedModCount  fromIndex  nextIndex  
