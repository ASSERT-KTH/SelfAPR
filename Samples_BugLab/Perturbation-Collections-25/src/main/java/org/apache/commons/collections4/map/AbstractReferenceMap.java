[buglab_swap_variables]^super ( loadFactor, capacity ) ;^167^^^^^164^171^super ( capacity, loadFactor ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] AbstractReferenceMap$ReferenceStrength,int,float,boolean)   ReferenceStrength keyType ReferenceStrength valueType final int capacity final float loadFactor final boolean purgeValues [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  AbstractReferenceMap  parent  K  currentKey  nextKey  float  loadFactor  int  capacity  expectedModCount  hash  index  value  
[buglab_swap_variables]^super (  loadFactor ) ;^167^^^^^164^171^super ( capacity, loadFactor ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] AbstractReferenceMap$ReferenceStrength,int,float,boolean)   ReferenceStrength keyType ReferenceStrength valueType final int capacity final float loadFactor final boolean purgeValues [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  AbstractReferenceMap  parent  K  currentKey  nextKey  float  loadFactor  int  capacity  expectedModCount  hash  index  value  
[buglab_swap_variables]^super ( capacity ) ;^167^^^^^164^171^super ( capacity, loadFactor ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] AbstractReferenceMap$ReferenceStrength,int,float,boolean)   ReferenceStrength keyType ReferenceStrength valueType final int capacity final float loadFactor final boolean purgeValues [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  AbstractReferenceMap  parent  K  currentKey  nextKey  float  loadFactor  int  capacity  expectedModCount  hash  index  value  
[buglab_swap_variables]^super ( hashCode, next, null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super (  hashCode, null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super ( next,  null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( hashCode.keyType, key, parent ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( key, parent.keyType, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( parent.keyType,  hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( hashCode, key, parent.keyType ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( parent.keyType, key ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference (  key, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( parent.keyType, hashCode, key ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.key = toReference ( parent, key, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( value.valueType, parent, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( parent.valueType, hashCode, value ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( parent.valueType,  hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( parent.valueType, value ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( hashCode, value, parent.valueType ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference (  value, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( hashCode.valueType, value, parent ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^this.value = toReference ( value, parent.valueType, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super ( q, r ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super (  q ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super ( r ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super ( q, r ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super (  q ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^super ( r ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  r  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return  ( value == null ? 0 : key.hashCode (  )  )  ^ ( key == null ? 0 : value.hashCode (  )  ) ;^439^440^^^^438^441^return  ( key == null ? 0 : key.hashCode (  )  )  ^ ( value == null ? 0 : value.hashCode (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] hashEntry [RETURN_TYPE] int   Object key Object value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  Object  key  value  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^key2 = key2 == ReferenceStrength.HARD ? keyType :  (  ( Reference<K> )  key2 ) .get (  ) ;^456^^^^^455^458^key2 = keyType == ReferenceStrength.HARD ? key2 :  (  ( Reference<K> )  key2 ) .get (  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] isEqualKey [RETURN_TYPE] boolean   Object key1 Object key2 [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  Object  key1  key2  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return key2 == key1 || key1.equals ( key2 ) ;^457^^^^^455^458^return key1 == key2 || key1.equals ( key2 ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] isEqualKey [RETURN_TYPE] boolean   Object key1 Object key2 [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  Object  key1  key2  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, key, hashCode, next, value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this,  hashCode, key, value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next, key, hashCode, value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next,  key, value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next, hashCode, value, key ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next, hashCode,  value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next, value, key, hashCode ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, next, hashCode, key ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new ReferenceEntry<K, V> ( this, hashCode, next, key, value ) ;^472^^^^^470^473^return new ReferenceEntry<K, V> ( this, next, hashCode, key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] createEntry [RETURN_TYPE] AbstractReferenceMap$ReferenceEntry   HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  HashEntry  next  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return arr.toArray ( list ) ;^527^^^^^521^528^return list.toArray ( arr ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  T[]  arr  ArrayList  list  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return arr.toArray ( list ) ;^553^^^^^547^554^return list.toArray ( arr ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  T[]  arr  List  list  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return arr.toArray ( list ) ;^579^^^^^573^580^return list.toArray ( arr ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  T[]  arr  List  list  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return  ( K )   ( key.keyType == ReferenceStrength.HARD ? parent :  (  ( Reference<K> )  key ) .get (  )  ) ;^622^^^^^621^623^return  ( K )   ( parent.keyType == ReferenceStrength.HARD ? key :  (  ( Reference<K> )  key ) .get (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] getKey [RETURN_TYPE] K   [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return  ( K )   ( key == ReferenceStrength.HARD ? parent.keyType :  (  ( Reference<K> )  key ) .get (  )  ) ;^622^^^^^621^623^return  ( K )   ( parent.keyType == ReferenceStrength.HARD ? key :  (  ( Reference<K> )  key ) .get (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] getKey [RETURN_TYPE] K   [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return  ( V )   ( value == ReferenceStrength.HARD ? parent.valueType :  (  ( Reference<V> )  value ) .get (  )  ) ;^634^^^^^633^635^return  ( V )   ( parent.valueType == ReferenceStrength.HARD ? value :  (  ( Reference<V> )  value ) .get (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] getValue [RETURN_TYPE] V   [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^if  ( parent.valueType.valueType != ReferenceStrength.HARD )  {^647^^^^^645^652^if  ( parent.valueType != ReferenceStrength.HARD )  {^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( obj.valueType, parent, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( parent.valueType,  hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( obj, parent.valueType, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference (  obj, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( parent.valueType.valueType, obj, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( parent.valueType, hashCode, obj ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( parent.valueType, obj ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^value = toReference ( hashCode.valueType, obj, parent ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^if  ( entryValue == null || entryKey == null )  {^675^^^^^664^682^if  ( entryKey == null || entryValue == null )  {^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return parent.isEqualKey ( entryValue, key )  && parent.isEqualValue ( entryKey, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return parent.isEqualKey (  key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue (  getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return key.isEqualKey ( entryKey, parent )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return parent.isEqualKey ( key, entryKey )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return parent.isEqualKey ( entryKey )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return entryKey.isEqualKey ( parent, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^parent.isEqualValue (  getValue (  )  ) ;^681^^^^^664^682^parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  valueType  ReferenceEntry  entry  previous  Entry  entry  boolean  purgeValues  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  Object  entryKey  entryValue  obj  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( parent, referent, hash.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> (  referent, parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( referent, hash, parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash,  parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( parent.queue, referent, hash ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash, parent, referent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash, parent.queue, referent ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent, parent.queue.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( parent.queue, referent, hash ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> (  referent, parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( referent, hash, parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash,  parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( parent, referent, hash.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash, parent.queue, referent ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash, parent, referent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent, parent.queue.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  ReferenceQueue  q  queue  T  referent  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^boolean r = parent.keyType != ReferenceStrength.HARD && ref == key;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^boolean r = ref.keyType != ReferenceStrength.HARD && key == parent;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^boolean r = key.keyType != ReferenceStrength.HARD && parent == ref;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^r = parent || r.valueType != ReferenceStrength.HARD && value == ref;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^r = r || parent.valueType != ReferenceStrength.HARD && ref == value;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^r = r || value.valueType != ReferenceStrength.HARD && parent == ref;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^if  ( parent.valueType.valueType != ReferenceStrength.HARD )  {^733^^^^^726^740^if  ( parent.valueType != ReferenceStrength.HARD )  {^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^} else if  ( parent )  {^735^^^^^726^740^} else if  ( parent.purgeValues )  {^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^} else if  ( parent.purgeValues.purgeValues )  {^735^^^^^726^740^} else if  ( parent.purgeValues )  {^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  Reference  ref  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  index  value  
[buglab_swap_variables]^return nextValue == null || nextKey == null;^814^^^^^813^815^return nextKey == null || nextValue == null;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] nextNull [RETURN_TYPE] boolean   [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  
[buglab_swap_variables]^return value.setValue ( current ) ;^929^^^^^924^930^return current.setValue ( value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] setValue [RETURN_TYPE] V   final V value [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  HashEntry  current  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  
[buglab_swap_variables]^out.writeInt ( keyType ) ;^996^^^^^995^1007^out.writeInt ( keyType.value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  ObjectOutputStream  out  int  capacity  expectedModCount  hash  hashCode  i  index  value  MapIterator  it  
[buglab_swap_variables]^put ( value, key ) ;^1044^^^^^1030^1048^put ( key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  ObjectInputStream  in  
[buglab_swap_variables]^put (  value ) ;^1044^^^^^1030^1048^put ( key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  ObjectInputStream  in  
[buglab_swap_variables]^put ( key ) ;^1044^^^^^1030^1048^put ( key, value ) ;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  ObjectInputStream  in  
[buglab_swap_variables]^return type == this.keyType;^1056^^^^^1055^1057^return this.keyType == type;^[CLASS] AbstractReferenceMap ReferenceStrength ReferenceEntrySet ReferenceKeySet ReferenceValues ReferenceEntry ReferenceBaseIterator ReferenceEntrySetIterator ReferenceKeySetIterator ReferenceValuesIterator ReferenceMapIterator SoftRef WeakRef  [METHOD] isKeyType [RETURN_TYPE] boolean   ReferenceStrength type [VARIABLES] ReferenceStrength  HARD  SOFT  WEAK  keyType  type  valueType  ReferenceEntry  e  entry  previous  boolean  purgeValues  r  ReferenceQueue  q  queue  V  currentValue  nextValue  obj  old  value  AbstractReferenceMap  parent  K  currentKey  key  nextKey  int  capacity  expectedModCount  hash  hashCode  i  index  value  
[buglab_swap_variables]^return arr.toArray ( list ) ;^527^^^^^521^528^return list.toArray ( arr ) ;^[CLASS] ReferenceEntrySet  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] Entry  entry  boolean  T[]  arr  ArrayList  list  
[buglab_swap_variables]^return arr.toArray ( list ) ;^553^^^^^547^554^return list.toArray ( arr ) ;^[CLASS] ReferenceKeySet  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] boolean  T[]  arr  List  list  K  key  
[buglab_swap_variables]^return arr.toArray ( list ) ;^579^^^^^573^580^return list.toArray ( arr ) ;^[CLASS] ReferenceValues  [METHOD] toArray [RETURN_TYPE] <T>   final T[] arr [VARIABLES] boolean  V  value  T[]  arr  List  list  
[buglab_swap_variables]^super ( hashCode, next, null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^super (  hashCode, null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^super ( next,  null, null ) ;^607^^^^^605^611^super ( next, hashCode, null, null ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( hashCode.keyType, key, parent ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( key, parent.keyType, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( parent.keyType,  hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( parent.keyType, hashCode, key ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( parent.keyType, key ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( parent, key, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference (  key, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( parent.keyType.keyType, key, hashCode ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.key = toReference ( hashCode, key, parent.keyType ) ;^609^^^^^605^611^this.key = toReference ( parent.keyType, key, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( value.valueType, parent, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( parent.valueType, hashCode, value ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( parent.valueType,  hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( hashCode.valueType, value, parent ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( parent.valueType, value ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( value, parent.valueType, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference (  value, hashCode ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^this.value = toReference ( hashCode, value, parent.valueType ) ;^610^^^^^605^611^this.value = toReference ( parent.valueType, value, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] <init> [RETURN_TYPE] HashEntry,int,K,V)   AbstractReferenceMap<K, V> parent HashEntry<K, V> next final int hashCode final K key final V value [VARIABLES] HashEntry  next  K  key  boolean  int  hashCode  V  value  AbstractReferenceMap  parent  
[buglab_swap_variables]^return  ( K )   ( key.keyType == ReferenceStrength.HARD ? parent :  (  ( Reference<K> )  key ) .get (  )  ) ;^622^^^^^621^623^return  ( K )   ( parent.keyType == ReferenceStrength.HARD ? key :  (  ( Reference<K> )  key ) .get (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] getKey [RETURN_TYPE] K   [VARIABLES] AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( parent.valueType, hashCode, obj ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( parent.valueType,  hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( hashCode, obj, parent.valueType ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference (  obj, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( obj.valueType, parent, hashCode ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( hashCode.valueType, obj, parent ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^value = toReference ( parent.valueType, obj ) ;^650^^^^^645^652^value = toReference ( parent.valueType, obj, hashCode ) ;^[CLASS] ReferenceEntry  [METHOD] setValue [RETURN_TYPE] V   final V obj [VARIABLES] V  obj  old  AbstractReferenceMap  parent  boolean  
[buglab_swap_variables]^if  ( entryValue == null || entryKey == null )  {^675^^^^^664^682^if  ( entryKey == null || entryValue == null )  {^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return parent.isEqualKey ( entryValue, key )  && parent.isEqualValue ( entryKey, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return parent.isEqualKey (  key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue (  getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return key.isEqualKey ( entryKey, parent )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return parent.isEqualKey ( key, entryKey )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return parent.isEqualKey ( entryKey )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return entryKey.isEqualKey ( parent, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^680^681^^^^664^682^return parent.isEqualKey ( entryKey, key )  && parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^parent.isEqualValue (  getValue (  )  ) ;^681^^^^^664^682^parent.isEqualValue ( entryValue, getValue (  )  ) ;^[CLASS] ReferenceEntry  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Object  entryKey  entryValue  obj  Entry  entry  boolean  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( parent.queue, referent, hash ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> (  referent, parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash, parent, referent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash,  parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( parent, referent, hash.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( referent, hash, parent.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash, parent.queue, referent ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new SoftRef<T> ( hash, referent, parent.queue.queue ) ;^713^^^^^708^719^return new SoftRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( referent, hash, parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> (  referent, parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash,  parent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( parent.queue, referent, hash ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent, parent.queue.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash, parent, referent.queue ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^return new WeakRef<T> ( hash, referent, parent ) ;^716^^^^^708^719^return new WeakRef<T> ( hash, referent, parent.queue ) ;^[CLASS] ReferenceEntry  [METHOD] toReference [RETURN_TYPE] <T>   ReferenceStrength type final T referent final int hash [VARIABLES] ReferenceStrength  type  boolean  T  referent  int  hash  AbstractReferenceMap  parent  
[buglab_swap_variables]^boolean r = ref.keyType != ReferenceStrength.HARD && key == parent;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^boolean r = parent.keyType.keyType != ReferenceStrength.HARD && key == ref;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^boolean r = parent.keyType != ReferenceStrength.HARD && ref == key;^727^^^^^726^740^boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^r = parent.valueType || r != ReferenceStrength.HARD && value == ref;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^r = r || parent.valueType != ReferenceStrength.HARD && ref == value;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^r = parent || r.valueType != ReferenceStrength.HARD && value == ref;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^r = value || parent.valueType != ReferenceStrength.HARD && r == ref;^728^^^^^726^740^r = r || parent.valueType != ReferenceStrength.HARD && value == ref;^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^if  ( parent.valueType.valueType != ReferenceStrength.HARD )  {^733^^^^^726^740^if  ( parent.valueType != ReferenceStrength.HARD )  {^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^} else if  ( parent )  {^735^^^^^726^740^} else if  ( parent.purgeValues )  {^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^} else if  ( parent.purgeValues.purgeValues )  {^735^^^^^726^740^} else if  ( parent.purgeValues )  {^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^if  ( parent.keyType.keyType != ReferenceStrength.HARD )  {^730^^^^^726^740^if  ( parent.keyType != ReferenceStrength.HARD )  {^[CLASS] ReferenceEntry  [METHOD] purge [RETURN_TYPE] boolean   Reference<?> ref [VARIABLES] Reference  ref  AbstractReferenceMap  parent  boolean  r  
[buglab_swap_variables]^return nextValue == null || nextKey == null;^814^^^^^813^815^return nextKey == null || nextValue == null;^[CLASS] ReferenceBaseIterator  [METHOD] nextNull [RETURN_TYPE] boolean   [VARIABLES] ReferenceEntry  e  entry  previous  K  currentKey  nextKey  boolean  V  currentValue  nextValue  int  expectedModCount  i  index  AbstractReferenceMap  parent  
[buglab_swap_variables]^return value.setValue ( current ) ;^929^^^^^924^930^return current.setValue ( value ) ;^[CLASS] ReferenceMapIterator  [METHOD] setValue [RETURN_TYPE] V   final V value [VARIABLES] HashEntry  current  boolean  V  value  
[buglab_swap_variables]^super ( q, r ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] SoftRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
[buglab_swap_variables]^super (  q ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] SoftRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
[buglab_swap_variables]^super ( r ) ;^946^^^^^945^948^super ( r, q ) ;^[CLASS] SoftRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
[buglab_swap_variables]^super ( q, r ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
[buglab_swap_variables]^super (  q ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
[buglab_swap_variables]^super ( r ) ;^964^^^^^963^966^super ( r, q ) ;^[CLASS] WeakRef  [METHOD] <init> [RETURN_TYPE] ReferenceQueue)   final int hash final T r ReferenceQueue<? super T> q [VARIABLES] boolean  T  r  ReferenceQueue  q  int  hash  
