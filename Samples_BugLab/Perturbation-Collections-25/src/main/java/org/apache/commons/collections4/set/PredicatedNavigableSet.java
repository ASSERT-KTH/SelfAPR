[buglab_swap_variables]^super ( predicate, set ) ;^79^^^^^78^80^super ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] <init> [RETURN_TYPE] Predicate)   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^super (  predicate ) ;^79^^^^^78^80^super ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] <init> [RETURN_TYPE] Predicate)   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^super ( set ) ;^79^^^^^78^80^super ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] <init> [RETURN_TYPE] Predicate)   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^return new PredicatedNavigableSet<E> ( predicate, set ) ;^63^^^^^61^64^return new PredicatedNavigableSet<E> ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] predicatedNavigableSet [RETURN_TYPE] <E>   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^return new PredicatedNavigableSet<E> (  predicate ) ;^63^^^^^61^64^return new PredicatedNavigableSet<E> ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] predicatedNavigableSet [RETURN_TYPE] <E>   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^return new PredicatedNavigableSet<E> ( set ) ;^63^^^^^61^64^return new PredicatedNavigableSet<E> ( set, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] predicatedNavigableSet [RETURN_TYPE] <E>   NavigableSet<E> set Predicate<? super E> predicate [VARIABLES] NavigableSet  set  boolean  long  serialVersionUID  Predicate  predicate  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromInclusive, fromElement, toElement, toInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet (  fromInclusive, toElement, toInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement,  toElement, toInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( toElement, fromInclusive, fromElement, toInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive,  toInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, toInclusive, toElement, fromInclusive ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement ) ;^136^^^^^135^138^final NavigableSet<E> sub = decorated (  ) .subSet ( fromElement, fromInclusive, toElement, toInclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^return subdNavigableSet ( predicate, predicate ) ;^137^^^^^135^138^return predicatedNavigableSet ( sub, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet (  predicate ) ;^137^^^^^135^138^return predicatedNavigableSet ( sub, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet ( sub ) ;^137^^^^^135^138^return predicatedNavigableSet ( sub, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] subSet [RETURN_TYPE] NavigableSet   E fromElement boolean fromInclusive E toElement boolean toInclusive [VARIABLES] NavigableSet  sub  boolean  fromInclusive  toInclusive  E  fromElement  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> head = decorated (  ) .headSet ( inclusive, toElement ) ;^142^^^^^141^144^final NavigableSet<E> head = decorated (  ) .headSet ( toElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> head = decorated (  ) .headSet (  inclusive ) ;^142^^^^^141^144^final NavigableSet<E> head = decorated (  ) .headSet ( toElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> head = decorated (  ) .headSet ( toElement ) ;^142^^^^^141^144^final NavigableSet<E> head = decorated (  ) .headSet ( toElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^return headdNavigableSet ( predicate, predicate ) ;^143^^^^^141^144^return predicatedNavigableSet ( head, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet (  predicate ) ;^143^^^^^141^144^return predicatedNavigableSet ( head, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet ( head ) ;^143^^^^^141^144^return predicatedNavigableSet ( head, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] headSet [RETURN_TYPE] NavigableSet   E toElement boolean inclusive [VARIABLES] NavigableSet  head  boolean  inclusive  E  toElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> tail = decorated (  ) .tailSet ( inclusive, fromElement ) ;^148^^^^^147^150^final NavigableSet<E> tail = decorated (  ) .tailSet ( fromElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> tail = decorated (  ) .tailSet (  inclusive ) ;^148^^^^^147^150^final NavigableSet<E> tail = decorated (  ) .tailSet ( fromElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
[buglab_swap_variables]^final NavigableSet<E> tail = decorated (  ) .tailSet ( fromElement ) ;^148^^^^^147^150^final NavigableSet<E> tail = decorated (  ) .tailSet ( fromElement, inclusive ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
[buglab_swap_variables]^return taildNavigableSet ( predicate, predicate ) ;^149^^^^^147^150^return predicatedNavigableSet ( tail, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet (  predicate ) ;^149^^^^^147^150^return predicatedNavigableSet ( tail, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
[buglab_swap_variables]^return predicatedNavigableSet ( tail ) ;^149^^^^^147^150^return predicatedNavigableSet ( tail, predicate ) ;^[CLASS] PredicatedNavigableSet  [METHOD] tailSet [RETURN_TYPE] NavigableSet   E fromElement boolean inclusive [VARIABLES] NavigableSet  tail  boolean  inclusive  E  fromElement  long  serialVersionUID  
