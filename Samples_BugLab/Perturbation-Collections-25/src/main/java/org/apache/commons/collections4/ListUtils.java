[buglab_swap_variables]^return defaultList == null ? list : list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[buglab_swap_variables]^if  ( list2.size (  )  > list1.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[buglab_swap_variables]^if  ( e.contains ( hashSet )  )  {^102^^^^^89^108^if  ( hashSet.contains ( e )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[buglab_swap_variables]^if  ( !bag.remove (  1 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[buglab_swap_variables]^return subtract ( union ( list2, list1 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[buglab_swap_variables]^return subtract ( union (  list2 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[buglab_swap_variables]^return subtract ( union ( list1 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[buglab_swap_variables]^return CollectionUtils.select ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^return CollectionUtils.select (  predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^return CollectionUtils.select ( inputCollection,  new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^return CollectionUtils.selectRejected ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^return CollectionUtils.selectRejected (  predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^return CollectionUtils.selectRejected ( inputCollection,  new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[buglab_swap_variables]^if  ( list2 == list1 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[buglab_swap_variables]^if  ( list2 == null || list1 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[buglab_swap_variables]^while  ( it2.hasNext (  )  && it1.hasNext (  )  )  {^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[buglab_swap_variables]^if  ( ! ( obj2 == null ? obj1 == null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[buglab_swap_variables]^return ! ( it2.hasNext (  )  || it1.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[buglab_swap_variables]^hashCode = 31 * obj +  ( hashCode == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[buglab_swap_variables]^final List<E> list = new ArrayList<E> ( Math.min ( retain.size (  ) , collection.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[buglab_swap_variables]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) .size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[buglab_swap_variables]^if  ( obj.contains ( retain )  )  {^322^^^^^318^327^if  ( retain.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[buglab_swap_variables]^return PredicatedList.predicatedList ( predicate, list ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[buglab_swap_variables]^return PredicatedList.predicatedList (  predicate ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[buglab_swap_variables]^return PredicatedList.predicatedList ( list ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[buglab_swap_variables]^return TransformedList.transformingList ( transformer, list ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[buglab_swap_variables]^return TransformedList.transformingList (  transformer ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[buglab_swap_variables]^return TransformedList.transformingList ( list ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[buglab_swap_variables]^return LazyList.lazyList ( factory, list ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[buglab_swap_variables]^return LazyList.lazyList (  factory ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[buglab_swap_variables]^return LazyList.lazyList ( list ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[buglab_swap_variables]^if  ( predicate != null && list != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^if  ( i.evaluate ( predicatetem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^if  ( predicate.evaluate ( i )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^if  ( predicate.evaluate ( itemtem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^for  ( listnt i = 0; i < i.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^if  ( item.evaluate ( predicate )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^final E listtem = i.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[buglab_swap_variables]^return longestCommonSubsequence (  b, a, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[buglab_swap_variables]^return longestCommonSubsequence (   b, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[buglab_swap_variables]^return longestCommonSubsequence (  a,  DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[buglab_swap_variables]^if  ( b == null || a == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( b, a, equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> (  b, equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a,  equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( equator, b, a ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, equator, b ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[buglab_swap_variables]^if  ( b == null || a == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[buglab_swap_variables]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  b  ) , new CharSequenceAsList (  a  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[buglab_swap_variables]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[buglab_swap_variables]^return new Partition<T> ( size, list ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[buglab_swap_variables]^return new Partition<T> (  size ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[buglab_swap_variables]^return new Partition<T> ( list ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[buglab_swap_variables]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int end = Math.min ( start +  list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int end = Math.min ( start + size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^final int end = Math.min ( start + list, size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return list.subList (  end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return end.subList ( start, list ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return list.subList ( start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[buglab_swap_variables]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] CharSequenceAsList  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] CharSequence  sequence  int  index  boolean  
[buglab_swap_variables]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int end = Math.min ( start +  list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int end = Math.min ( start + list, size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int end = Math.min ( start + size.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return list.subList (  end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return end.subList ( start, list ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return list.subList ( start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[buglab_swap_variables]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
