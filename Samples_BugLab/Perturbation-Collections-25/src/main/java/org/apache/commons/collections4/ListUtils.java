[BugLab_Variable_Misuse]^this.list = 4;^673^^^^^672^675^this.list = list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] <init> [RETURN_TYPE] List,int)   List<T> list final int size [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[BugLab_Wrong_Operator]^return list != null ? Collections.<T>emptyList (  )  : list;^62^^^^^61^63^return list == null ? Collections.<T>emptyList (  )  : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] emptyIfNull [RETURN_TYPE] <T>   List<T> list [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  list  boolean  int  size  
[BugLab_Argument_Swapping]^return defaultList == null ? list : list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[BugLab_Wrong_Operator]^return list != null ? defaultList : list;^76^^^^^75^77^return list == null ? defaultList : list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] defaultIfNull [RETURN_TYPE] <T>   List<T> list List<T> defaultList [VARIABLES] ArrayList  sequence  CharSequence  sequence  List  defaultList  list  boolean  int  size  
[BugLab_Argument_Swapping]^if  ( list2.size (  )  > list1.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[BugLab_Wrong_Operator]^if  ( list1.size (  )  >= list2.size (  )  )  {^94^^^^^89^108^if  ( list1.size (  )  > list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[BugLab_Argument_Swapping]^if  ( e.contains ( hashSet )  )  {^102^^^^^89^108^if  ( hashSet.contains ( e )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] intersection [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] boolean  E  e  ArrayList  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  HashSet  hashSet  
[BugLab_Wrong_Literal]^if  ( !bag.remove ( e, size )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[BugLab_Wrong_Literal]^if  ( !bag.remove ( e, 0 )  )  {^130^^^^^126^135^if  ( !bag.remove ( e, 1 )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] subtract [RETURN_TYPE] <E>   List<E> list1 List<? extends E> list2 [VARIABLES] HashBag  bag  boolean  E  e  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  size  
[BugLab_Argument_Swapping]^return subtract ( union ( list2, list1 ) , intersection ( list1, list2 )  ) ;^148^^^^^147^149^return subtract ( union ( list1, list2 ) , intersection ( list1, list2 )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] sum [RETURN_TYPE] <E>   List<? extends E> list1 List<? extends E> list2 [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  size  
[BugLab_Argument_Swapping]^return CollectionUtils.select ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[BugLab_Variable_Misuse]^return CollectionUtils.select ( 4, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^188^^^^^186^189^return CollectionUtils.select ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] select [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[BugLab_Variable_Misuse]^return CollectionUtils.selectRejected ( inputCollection, null, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[BugLab_Argument_Swapping]^return CollectionUtils.selectRejected ( predicate, inputCollection, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^212^^^^^210^213^return CollectionUtils.selectRejected ( inputCollection, predicate, new ArrayList<E> ( inputCollection.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] selectRejected [RETURN_TYPE] <E>   Collection<? extends E> inputCollection Predicate<? super E> predicate [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Collection  inputCollection  List  defaultList  larger  list  list1  list2  result  smaller  int  size  Predicate  predicate  
[BugLab_Argument_Swapping]^if  ( list2 == list1 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list1 >= list2 )  {^245^^^^^244^267^if  ( list1 == list2 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Literal]^return false;^246^^^^^244^267^return true;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Argument_Swapping]^if  ( list2 == null || list1 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list1 == null && list2 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list1 != null || list2 == null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list1 == null || list2 != null || list1.size (  )  != list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list1 == null || list2 == null || list1.size (  )  == list2.size (  )  )  {^248^^^^^244^267^if  ( list1 == null || list2 == null || list1.size (  )  != list2.size (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Literal]^return true;^249^^^^^244^267^return false;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Argument_Swapping]^while  ( it2.hasNext (  )  && it1.hasNext (  )  )  {^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^while  ( it1.hasNext (  )  || it2.hasNext (  )  )  {^257^^^^^244^267^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Argument_Swapping]^if  ( ! ( obj2 == null ? obj1 == null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( ! ( obj1 != null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( ! ( obj1 == null ? obj2 != null : obj1.equals ( obj2 )  )  )  {^261^^^^^244^267^if  ( ! ( obj1 == null ? obj2 == null : obj1.equals ( obj2 )  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Literal]^return true;^262^^^^^244^267^return false;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Variable_Misuse]^obj1 = null.next (  ) ;^258^^^^^244^267^obj1 = it1.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Variable_Misuse]^obj2 = 0.next (  ) ;^259^^^^^244^267^obj2 = it2.next (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Variable_Misuse]^return ! ( it1.hasNext (  )  || null.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Argument_Swapping]^return ! ( it2.hasNext (  )  || it1.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^return ! ( it1.hasNext (  )  && it2.hasNext (  )  ) ;^266^^^^^244^267^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] isEqualList [RETURN_TYPE] boolean   Collection<?> list1 Collection<?> list2 [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it1  it2  Collection  list1  list2  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj1  obj2  int  size  
[BugLab_Wrong_Operator]^if  ( list != null )  {^282^^^^^281^293^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^return -1;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^return hashCode;^283^^^^^281^293^return 0;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^int hashCode = size;^285^^^^^281^293^int hashCode = 1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Variable_Misuse]^while  ( null.hasNext (  )  )  {^288^^^^^281^293^while  ( it.hasNext (  )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Variable_Misuse]^hashCode = 31 * size +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Argument_Swapping]^hashCode = 31 * obj +  ( hashCode == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Operator]^hashCode = 31 * hashCode +  >  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Operator]^hashCode = 31 - hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Operator]^hashCode = 31 * hashCode +  ( obj != null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^hashCode = hashCode * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^hashCode = 31 * hashCode +  ( obj == null ? hashCode : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Operator]^hashCode = 31 * hashCode +  &  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Wrong_Literal]^hashCode = 30 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^290^^^^^281^293^hashCode = 31 * hashCode +  ( obj == null ? 0 : obj.hashCode (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Variable_Misuse]^return size;^292^^^^^281^293^return hashCode;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] hashCodeForList [RETURN_TYPE] int   Collection<?> list [VARIABLES] boolean  ArrayList  result  sequence  CharSequence  sequence  Iterator  it  Collection  list  List  defaultList  larger  list  list1  list2  result  smaller  Object  obj  int  hashCode  size  
[BugLab_Variable_Misuse]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , 2.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[BugLab_Argument_Swapping]^final List<E> list = new ArrayList<E> ( Math.min ( retain.size (  ) , collection.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[BugLab_Variable_Misuse]^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , null.size (  )  )  ) ;^319^^^^^318^327^final List<E> list = new ArrayList<E> ( Math.min ( collection.size (  ) , retain.size (  )  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[BugLab_Argument_Swapping]^if  ( obj.contains ( retain )  )  {^322^^^^^318^327^if  ( retain.contains ( obj )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] retainAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> retain [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  retain  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[BugLab_Variable_Misuse]^return 0;^359^^^^^352^360^return list;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] removeAll [RETURN_TYPE] <E>   Collection<E> collection Collection<?> remove [VARIABLES] boolean  E  obj  ArrayList  result  sequence  CharSequence  sequence  Collection  collection  remove  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  size  
[BugLab_Argument_Swapping]^return PredicatedList.predicatedList ( predicate, list ) ;^419^^^^^418^420^return PredicatedList.predicatedList ( list, predicate ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] predicatedList [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  Predicate  predicate  
[BugLab_Argument_Swapping]^return TransformedList.transformingList ( transformer, list ) ;^444^^^^^442^445^return TransformedList.transformingList ( list, transformer ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] transformedList [RETURN_TYPE] <E>   List<E> list Transformer<? super E, ? extends E> transformer [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  Transformer  transformer  boolean  int  hashCode  size  
[BugLab_Variable_Misuse]^return LazyList.lazyList ( list, 2 ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[BugLab_Argument_Swapping]^return LazyList.lazyList ( factory, list ) ;^478^^^^^477^479^return LazyList.lazyList ( list, factory ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] lazyList [RETURN_TYPE] <E>   List<E> list Factory<? extends E> factory [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  Factory  factory  List  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  size  
[BugLab_Wrong_Operator]^if  ( list != null || predicate != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Operator]^if  ( list == null && predicate != null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Operator]^if  ( list != null && predicate == null )  {^509^^^^^508^518^if  ( list != null && predicate != null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Variable_Misuse]^if  ( predicate.evaluate ( sizetem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^if  ( i.evaluate ( predicatetem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^if  ( predicate.evaluate ( i )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^if  ( predicate.evaluate ( itemtem )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Variable_Misuse]^return size;^513^^^^^508^518^return i;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Variable_Misuse]^final E sizetem = list.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^final E listtem = i.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^if  ( item.evaluate ( predicate )  )  {^512^^^^^508^518^if  ( predicate.evaluate ( item )  )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Literal]^for  ( int i = i; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Variable_Misuse]^final E item = null.get ( i ) ;^511^^^^^508^518^final E item = list.get ( i ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^for  ( listnt i = 0; i < i.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < list.size (  ) ; i++ )  {^510^^^^^508^518^for  ( int i = 0; i < list.size (  ) ; i++ )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Wrong_Literal]^return -;^517^^^^^508^518^return -1;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] indexOf [RETURN_TYPE] <E>   List<E> list Predicate<E> predicate [VARIABLES] boolean  E  item  ArrayList  result  sequence  CharSequence  sequence  List  defaultList  larger  list  list1  list2  result  smaller  int  hashCode  i  size  Predicate  predicate  
[BugLab_Argument_Swapping]^return longestCommonSubsequence (  b, a, DefaultEquator.defaultEquator (  )   ) ;^532^^^^^531^533^return longestCommonSubsequence (  a, b, DefaultEquator.defaultEquator (  )   ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b [VARIABLES] ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  boolean  int  hashCode  i  size  
[BugLab_Variable_Misuse]^if  ( a == null || null == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Argument_Swapping]^if  ( b == null || a == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Wrong_Operator]^if  ( a == null && b == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Wrong_Operator]^if  ( a != null || b == null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Wrong_Operator]^if  ( a == null || b != null )  {^548^^^^^546^560^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Wrong_Operator]^if  ( equator != null )  {^551^^^^^546^560^if  ( equator == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Variable_Misuse]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, 0 ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Argument_Swapping]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( b, a, equator ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Argument_Swapping]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, equator, b ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Argument_Swapping]^final SequencesComparator<E> comparator = new SequencesComparator<E> ( equator, b, a ) ;^555^^^^^546^560^final SequencesComparator<E> comparator = new SequencesComparator<E> ( a, b, equator ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Variable_Misuse]^final EditScript<E> script = this.getScript (  ) ;^556^^^^^546^560^final EditScript<E> script = comparator.getScript (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] <E>   List<E> a List<E> b Equator<? super E> equator [VARIABLES] boolean  LcsVisitor  visitor  ArrayList  result  sequence  CharSequence  sequence  List  a  b  defaultList  larger  list  list1  list2  result  smaller  EditScript  script  int  hashCode  i  size  SequencesComparator  comparator  Equator  equator  
[BugLab_Variable_Misuse]^if  ( sequence == null || b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Variable_Misuse]^if  ( a == null || sequence == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Argument_Swapping]^if  ( b == null || a == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Wrong_Operator]^if  ( a == null && b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Wrong_Operator]^if  ( a != null || b == null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Wrong_Operator]^if  ( a == null || b != null )  {^575^^^^^574^584^if  ( a == null || b == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Variable_Misuse]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  sequence  ) , new CharSequenceAsList (  b  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Variable_Misuse]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  sequence  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Argument_Swapping]^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  b  ) , new CharSequenceAsList (  a  )  ) ;^578^^^^^574^584^final List<Character> lcs = longestCommonSubsequence ( new CharSequenceAsList (  a  ) , new CharSequenceAsList (  b  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] longestCommonSubsequence [RETURN_TYPE] String   CharSequence a CharSequence b [VARIABLES] boolean  StringBuilder  sb  Character  ch  ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  int  hashCode  i  size  
[BugLab_Variable_Misuse]^return Character.valueOf ( sequence.charAt (  size  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Argument_Swapping]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Variable_Misuse]^return Character.valueOf ( b.charAt (  index  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Variable_Misuse]^return b.length (  ) ;^627^^^^^626^628^return sequence.length (  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Wrong_Operator]^if  ( list != null )  {^655^^^^^654^662^if  ( list == null )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Variable_Misuse]^if  ( index <= 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Wrong_Operator]^if  ( size < 0 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Wrong_Literal]^if  ( size <= -1 )  {^658^^^^^654^662^if  ( size <= 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Variable_Misuse]^return new Partition<T> ( list, index ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Argument_Swapping]^return new Partition<T> ( size, list ) ;^661^^^^^654^662^return new Partition<T> ( list, size ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] partition [RETURN_TYPE] <T>   List<T> list final int size [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  hashCode  i  index  size  
[BugLab_Variable_Misuse]^if  ( index < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^if  ( listSize <= 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Literal]^if  ( listSize < listSize )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^if  ( size < 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^if  ( index <= 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Literal]^if  ( index <  )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^if  ( size >= listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^if  ( index < listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Index " + start + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + size ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  <  index  <  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  >>  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + start ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  &&  index  &&  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  ^  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  <  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  >  index  >  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int start = size * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int start = index * listSize;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^final + int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int end = Math.min ( listSize + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int end = Math.min ( start + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^final int end = Math.min ( start + size, list.size (  <<  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int end = Math.min ( index + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^final int end = Math.min ( start + listSize, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^final int end = Math.min ( start + size, list.size (  >=  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^return list.subList ( size, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^return list.subList ( start, size ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Variable_Misuse]^return  ( list.size (  )  + index - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^return  ( list.size (  )  + size - 1 )  + size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^return  ( list.size (  )  + size  !=  1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Operator]^return  ( list.size (  )   <=  size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Wrong_Literal]^return  ( list.size (  )  + size - i )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] ListUtils LcsVisitor CharSequenceAsList Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] ArrayList  result  sequence  CharSequence  a  b  sequence  List  a  b  defaultList  larger  lcs  list  list1  list2  result  smaller  boolean  int  end  hashCode  i  index  listSize  size  start  
[BugLab_Argument_Swapping]^return Character.valueOf ( index.charAt (  sequence  )  ) ;^622^^^^^621^623^return Character.valueOf ( sequence.charAt (  index  )  ) ;^[CLASS] CharSequenceAsList  [METHOD] get [RETURN_TYPE] Character   int index [VARIABLES] CharSequence  sequence  int  index  boolean  
[BugLab_Variable_Misuse]^if  ( start < 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^if  ( listSize <= 0 )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Literal]^if  ( listSize <  )  {^680^^^^^678^693^if  ( listSize < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^if  ( index <= 0 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Literal]^if  ( index < 1 )  {^683^^^^^678^693^if  ( index < 0 )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^if  ( start >= listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^if  ( index >= start )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^if  ( listSize >= index )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^if  ( index > listSize )  {^686^^^^^678^693^if  ( index >= listSize )  {^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Index " + start + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + start ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "Index " + listSize + " must be less than size " + index ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  &&  index  &&  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  <<  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  <=  index  <=  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  >  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  >>  index  >>  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  ^  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  ||  index  ||  " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Index "  &  index + " must be less than size " + listSize ) ;^687^688^^^^678^693^throw new IndexOutOfBoundsException ( "Index " + index + " must be less than size " + listSize ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int start = size * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int start = index * listSize;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^final int start = size * index;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^final + int start = index * size;^690^^^^^678^693^final int start = index * size;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int end = Math.min ( size + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int end = Math.min ( start + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^final int end = Math.min ( size + start, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^final int end = Math.min ( list + size, start.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^final int end = Math.min ( start + size, list.size (  >=  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int end = Math.min ( listSize + size, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^final int end = Math.min ( start + listSize, list.size (  )  ) ;^691^^^^^678^693^final int end = Math.min ( start + size, list.size (  )  ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^return list.subList ( size, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^return list.subList ( start, size ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^return start.subList ( list, end ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^return end.subList ( start, list ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^return list.subList ( end, start ) ;^692^^^^^678^693^return list.subList ( start, end ) ;^[CLASS] Partition  [METHOD] get [RETURN_TYPE] List   final int index [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^return  ( list.size (  )  + listSize - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Argument_Swapping]^return  ( size.size (  )  + list - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^return  ( list.size (  )  + size - 1 )  - size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^return  ( list.size (  )  + size  ^  1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Operator]^return  ( list.size (  )   >=  size - 1 )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Wrong_Literal]^return  ( list.size (  )  + size - start )  / size;^697^^^^^696^698^return  ( list.size (  )  + size - 1 )  / size;^[CLASS] Partition  [METHOD] size [RETURN_TYPE] int   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^return this.isEmpty (  ) ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
[BugLab_Variable_Misuse]^return 2.isEmpty (  ) ;^702^^^^^701^703^return list.isEmpty (  ) ;^[CLASS] Partition  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] List  list  int  end  index  listSize  size  start  boolean  
