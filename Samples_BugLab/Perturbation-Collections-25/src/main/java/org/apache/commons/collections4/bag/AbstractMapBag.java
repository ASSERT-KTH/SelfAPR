[BugLab_Variable_Misuse]^this.entryIterator = 3.map.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^this.entryIterator = parent.map.map.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^this.entryIterator = parent.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^this.mods = mods;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^this.mods = parent.modCount.modCount;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^this.mods = parent;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^this.canRemove = true;^192^^^^^187^193^this.canRemove = false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^this.value = size;^409^^^^^408^410^this.value = value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag$MutableInteger(int)   final int value [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return value;^90^^^^^89^91^return size;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] size [RETURN_TYPE] int   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final MutableInteger count = object.get ( map ) ;^110^^^^^109^115^final MutableInteger count = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final MutableInteger count = null.get ( object ) ;^110^^^^^109^115^final MutableInteger count = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( count == null )  {^111^^^^^109^115^if  ( count != null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return size;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^return count.value.value;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^return count;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return value;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return mods;^114^^^^^109^115^return 0;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^return object.containsKey ( map ) ;^126^^^^^125^127^return map.containsKey ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( coll  ^  Bag )  {^136^^^^^135^140^if  ( coll instanceof Bag )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Collection  coll  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return containsAll ( new HashBag<Object> ( 4 )  ) ;^139^^^^^135^140^return containsAll ( new HashBag<Object> ( coll )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Collection  coll  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( getCount ( other )  < current.getCount ( current )  )  {^153^^^^^149^158^if  ( getCount ( current )  < other.getCount ( current )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( getCount ( current )  <= other.getCount ( current )  )  {^153^^^^^149^158^if  ( getCount ( current )  < other.getCount ( current )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^154^^^^^149^158^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final Object current = null.next (  ) ;^152^^^^^149^158^final Object current = it.next (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( getCount ( current )  > other.getCount ( current )  )  {^153^^^^^149^158^if  ( getCount ( current )  < other.getCount ( current )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^157^^^^^149^158^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return value > 0 || entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^return entryIterator > 0 || itemCount.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^return itemCount > 0 && entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^return itemCount >= 0 || entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( size != mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( parent.modCount != value )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mods != parent.modCount )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( parent.modCount.modCount != mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mods.modCount != parent )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( parent.modCount == mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( size == 0 )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( itemCount >= 0 )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( itemCount == itemCount )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^current = this.next (  ) ;^206^^^^^201^212^current = entryIterator.next (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^canRemove = false;^209^^^^^201^212^canRemove = true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( value != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( parent.modCount != value )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mods != parent.modCount )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mods.modCount != parent )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( parent.modCount == mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( canRemove > false )  {^219^^^^^215^230^if  ( canRemove == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( canRemove == true )  {^219^^^^^215^230^if  ( canRemove == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( value > 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mut.value.value > 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( mut.value == 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( mut.value > 0 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^canRemove = true;^229^^^^^215^230^canRemove = false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return add ( object, 0 ) ;^241^^^^^240^242^return add ( object, 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( value > 0 )  {^253^^^^^251^264^if  ( nCopies > 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( nCopies == 0 )  {^253^^^^^251^264^if  ( nCopies > 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( mut != null )  {^256^^^^^251^264^if  ( mut == null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^258^^^^^251^264^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^map.put ( object, new MutableInteger ( size )  ) ;^257^^^^^251^264^map.put ( object, new MutableInteger ( nCopies )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^map.put ( nCopies, new MutableInteger ( object )  ) ;^257^^^^^251^264^map.put ( object, new MutableInteger ( nCopies )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^size += size;^255^^^^^251^264^size += nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^mut.value += size;^260^^^^^251^264^mut.value += nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^261^^^^^251^264^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final MutableInteger mut = object.get ( map ) ;^254^^^^^251^264^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^map.put ( object, new MutableInteger ( value )  ) ;^257^^^^^251^264^map.put ( object, new MutableInteger ( nCopies )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^size += value;^255^^^^^251^264^size += nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^mut.value += value;^260^^^^^251^264^mut.value += nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^263^^^^^251^264^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^boolean changed = true;^273^^^^^272^280^boolean changed = false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^changed = canRemove || added;^277^^^^^272^280^changed = changed || added;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^changed = changed || canRemove;^277^^^^^272^280^changed = changed || added;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^changed = added || changed;^277^^^^^272^280^changed = changed || added;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^changed = changed && added;^277^^^^^272^280^changed = changed || added;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final boolean added = add ( 1.next (  )  ) ;^276^^^^^272^280^final boolean added = add ( i.next (  )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return canRemove;^279^^^^^272^280^return changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^size = nCopies;^289^^^^^286^290^size = 0;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final MutableInteger mut = object.get ( map ) ;^299^^^^^298^307^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( mut != null )  {^300^^^^^298^307^if  ( mut == null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^301^^^^^298^307^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^size -= nCopies;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^size -= mut.value.value;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^size -= mut;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^size += mut.value;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^306^^^^^298^307^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final MutableInteger mut = object.get ( map ) ;^317^^^^^316^333^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( mut != null )  {^318^^^^^316^333^if  ( mut == null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^319^^^^^316^333^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( value <= 0 )  {^321^^^^^316^333^if  ( nCopies <= 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( nCopies == 0 )  {^321^^^^^316^333^if  ( nCopies <= 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^322^^^^^316^333^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( value < mut.value )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( nCopies < value )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( mut.value < nCopies )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( nCopies == mut.value )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^size -= mut.value.value;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^size -= mut;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^size = mut.value;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^mut.value -= value;^326^^^^^316^333^mut.value -= nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^mut.value += nCopies;^326^^^^^316^333^mut.value -= nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^size = nCopies;^327^^^^^316^333^size -= nCopies;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^size -= size;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^332^^^^^316^333^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^boolean result = true;^343^^^^^342^352^boolean result = false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^result = canRemove || changed;^348^^^^^342^352^result = result || changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^result = result || canRemove;^348^^^^^342^352^result = result || changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^result = changed || result;^348^^^^^342^352^result = result || changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^result = result && changed;^348^^^^^342^352^result = result || changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^final boolean changed = remove ( i.next (  ) , modCount ) ;^347^^^^^342^352^final boolean changed = remove ( i.next (  ) , 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( coll == null )  {^344^^^^^342^352^if  ( coll != null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^final boolean changed = remove ( i.next (  ) , 2 ) ;^347^^^^^342^352^final boolean changed = remove ( i.next (  ) , 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^final boolean changed = remove ( i.next (  ) , itemCount ) ;^347^^^^^342^352^final boolean changed = remove ( i.next (  ) , 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^final boolean changed = remove ( i.next (  ) , value ) ;^347^^^^^342^352^final boolean changed = remove ( i.next (  ) , 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^final boolean changed = remove ( i.next (  ) , nCopies ) ;^347^^^^^342^352^final boolean changed = remove ( i.next (  ) , 1 ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return changed;^351^^^^^342^352^return result;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( coll  ||  Bag )  {^362^^^^^361^366^if  ( coll instanceof Bag )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^boolean result = true;^377^^^^^376^394^boolean result = false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( 1 <= otherCount && otherCount <= value )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( 1 <= myCount && otherCount <= otherCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( 1 <= otherCount || otherCount <= myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( 1 < otherCount && otherCount <= myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( 1 <= otherCount && otherCount < myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( modCount <= otherCount && otherCount <= myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^excess.add ( current, value ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^excess.add ( myCount, current ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^excess.add ( myCount, current - otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^excess.add ( current, myCount  |  otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final E current = null.next (  ) ;^381^^^^^376^394^final E current = i.next (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final int currentCount = other.getCount ( other ) ;^383^^^^^376^394^final int otherCount = other.getCount ( current ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final int 1Count = other.getCount ( current ) ;^383^^^^^376^394^final int otherCount = other.getCount ( current ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^excess.add ( current, value - otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^excess.add ( otherCount, myCount - current ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^excess.add ( current, otherCount - myCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^excess.add ( current, myCount  ==  otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( 1 <= value && otherCount <= myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( 1 <= otherCount && otherCount > myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( size <= otherCount && otherCount <= myCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^excess.add ( current, myCount - value ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^excess.add ( current, myCount  &&  otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^excess.add ( current, myCount - nCopies ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^excess.add ( current, myCount  >  otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^excess.add ( current, size ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return changed;^393^^^^^376^394^return result;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( obj instanceof MutableInteger <= false )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( obj  >=  MutableInteger == false )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( obj instanceof MutableInteger == true )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^415^^^^^413^418^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return  (  ( MutableInteger )  obj ) .value == size;^417^^^^^413^418^return  (  ( MutableInteger )  obj ) .value == value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^return  (  ( MutableInteger )  obj ) .value >= value;^417^^^^^413^418^return  (  ( MutableInteger )  obj ) .value == value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Object  obj  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return size;^422^^^^^421^423^return value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^int i = 1;^434^^^^^432^443^int i = 0;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Variable_Misuse]^final Iterator<E> it = 1.keySet (  ) .iterator (  ) ;^435^^^^^432^443^final Iterator<E> it = map.keySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Variable_Misuse]^for  ( int nCopies = getCount ( current ) ; index > 0; index-- )  {^438^^^^^432^443^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Argument_Swapping]^for  ( int current = getCount ( index ) ; index > 0; index-- )  {^438^^^^^432^443^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Wrong_Operator]^for  ( int index = getCount ( current ) ; index >= 0; index-- )  {^438^^^^^432^443^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Variable_Misuse]^for  ( int size = getCount ( current ) ; index > 0; index-- )  {^438^^^^^432^443^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[BugLab_Variable_Misuse]^if  ( array.length < myCount )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^if  ( nCopies < size )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( size.length < array )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( array.length == size )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^array = array;^462^^^^^457^480^array = unchecked;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , myCount ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^final T[] unchecked =  ( T[] )  Array.newInstance ( size.getClass (  ) .getComponentType (  ) , array ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final T[] unchecked =  ( T[] )  Array.newInstance ( unchecked.getClass (  ) .getComponentType (  ) , size ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , nCopies ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^int i = 1;^465^^^^^457^480^int i = 0;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final Iterator<E> it = null.keySet (  ) .iterator (  ) ;^466^^^^^457^480^final Iterator<E> it = map.keySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^for  ( int index = getCount ( current ) ; index >= 0; index-- )  {^469^^^^^457^480^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^for  ( int index = getCount ( current ) ; index > 1; index-- )  {^469^^^^^457^480^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^final E current = 0.next (  ) ;^468^^^^^457^480^final E current = it.next (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^for  ( int nCopies = getCount ( current ) ; index > 0; index-- )  {^469^^^^^457^480^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^for  ( int index = getCount ( current ) ; index > mods; index-- )  {^469^^^^^457^480^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^while  ( otherCount < array.length )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^while  ( i < value )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^while  ( array < i.length )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^while  ( i < array.length.length )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^while  ( array.length < i )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^while  ( i <= array.length )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return unchecked;^479^^^^^457^480^return array;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( uniqueSet != null )  {^488^^^^^487^492^if  ( uniqueSet == null )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] uniqueSet [RETURN_TYPE] Set   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^out.writeInt ( entry.getValue (  ) .size ) ;^504^^^^^500^506^out.writeInt ( entry.getValue (  ) .value ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  ObjectOutputStream  out  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^out.writeInt ( this.getValue (  ) .value ) ;^504^^^^^500^506^out.writeInt ( entry.getValue (  ) .value ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  ObjectOutputStream  out  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^for  ( myCountnt i = 0; i < entrySize; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < nCopies; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Argument_Swapping]^for  ( entrySizent i = 0; i < i; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= entrySize; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < entrySize; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Wrong_Literal]^for  ( int i = size; i < entrySize; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Variable_Misuse]^size += myCount;^525^^^^^516^527^size += count;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Variable_Misuse]^map.put ( obj, new MutableInteger ( myCount )  ) ;^524^^^^^516^527^map.put ( obj, new MutableInteger ( count )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Argument_Swapping]^map.put ( count, new MutableInteger ( obj )  ) ;^524^^^^^516^527^map.put ( obj, new MutableInteger ( count )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Variable_Misuse]^size += size;^525^^^^^516^527^size += count;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Variable_Misuse]^map.put ( obj, new MutableInteger ( value )  ) ;^524^^^^^516^527^map.put ( obj, new MutableInteger ( count )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < entrySize; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[BugLab_Wrong_Operator]^if  ( object >= this )  {^539^^^^^538^555^if  ( object == this )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^540^^^^^538^555^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( object instanceof Bag != false )  {^542^^^^^538^555^if  ( object instanceof Bag == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( object  |  Bag == false )  {^542^^^^^538^555^if  ( object instanceof Bag == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( object instanceof Bag == true )  {^542^^^^^538^555^if  ( object instanceof Bag == false )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^543^^^^^538^555^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( other.size (  )  <= size (  )  )  {^546^^^^^538^555^if  ( other.size (  )  != size (  )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^547^^^^^538^555^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^if  ( element.getCount ( other )  != getCount ( element )  )  {^550^^^^^538^555^if  ( other.getCount ( element )  != getCount ( element )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( other.getCount ( element )  > getCount ( element )  )  {^550^^^^^538^555^if  ( other.getCount ( element )  != getCount ( element )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return true;^551^^^^^538^555^return false;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^return false;^554^^^^^538^555^return true;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ total;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^total +=  ( count.value == null ? 0 : element.hashCode (  )  )  ^ element;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^total +=  ( count == null ? 0 : element.hashCode (  )  )  ^ element.value;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^total +=  ( element != null ? 0 : element.hashCode (  )  )  ^ count.value;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^total +=  ( element == null ? modCount : element.hashCode (  )  )  ^ count.value;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^return nCopies;^574^^^^^567^575^return total;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Wrong_Operator]^if  ( size (  )  <= 0 )  {^584^^^^^583^602^if  ( size (  )  == 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  StringBuilder  buf  Iterator  entryIterator  i  it  Object  current  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Wrong_Literal]^if  ( size (  )  == size )  {^584^^^^^583^602^if  ( size (  )  == 0 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  StringBuilder  buf  Iterator  entryIterator  i  it  Object  current  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^buf.append ( value ) ;^593^^^^^583^602^buf.append ( count ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  StringBuilder  buf  Iterator  entryIterator  i  it  Object  current  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Variable_Misuse]^buf.append ( otherCount ) ;^593^^^^^583^602^buf.append ( count ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  StringBuilder  buf  Iterator  entryIterator  i  it  Object  current  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[BugLab_Argument_Swapping]^this.entryIterator = parent.map.map.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^this.entryIterator = parent.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^this.mods = parent.modCount.modCount;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^this.mods = parent;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Literal]^this.canRemove = true;^192^^^^^187^193^this.canRemove = false;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^return mods > 0 || entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] BagIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^return entryIterator > 0 || itemCount.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] BagIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Operator]^return itemCount > 0 && entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] BagIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Operator]^return itemCount >= 0 || entryIterator.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] BagIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^if  ( itemCount != mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^if  ( parent.modCount != itemCount )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^if  ( mods != parent.modCount )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Argument_Swapping]^if  ( mods.modCount != parent )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Operator]^if  ( parent.modCount == mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^if  ( mods == 0 )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Operator]^if  ( itemCount != 0 )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Literal]^if  ( itemCount == 1 )  {^205^^^^^201^212^if  ( itemCount == 0 )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^current = this.next (  ) ;^206^^^^^201^212^current = entryIterator.next (  ) ;^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Wrong_Literal]^canRemove = false;^209^^^^^201^212^canRemove = true;^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[BugLab_Variable_Misuse]^if  ( itemCount != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Variable_Misuse]^if  ( 2.modCount != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Variable_Misuse]^if  ( parent.modCount != itemCount )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Argument_Swapping]^if  ( mods != parent.modCount )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Argument_Swapping]^if  ( parent.modCount.modCount != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Operator]^if  ( parent.modCount >= mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Operator]^if  ( canRemove != false )  {^219^^^^^215^230^if  ( canRemove == false )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Literal]^if  ( canRemove == true )  {^219^^^^^215^230^if  ( canRemove == false )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Variable_Misuse]^if  ( mods > 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Operator]^if  ( mut.value >= 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Literal]^canRemove = true;^229^^^^^215^230^canRemove = false;^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[BugLab_Wrong_Operator]^if  ( obj instanceof MutableInteger != false )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] int  value  Object  obj  boolean  
[BugLab_Wrong_Operator]^if  ( obj  <=  MutableInteger == false )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] int  value  Object  obj  boolean  
[BugLab_Wrong_Literal]^if  ( obj instanceof MutableInteger == true )  {^414^^^^^413^418^if  ( obj instanceof MutableInteger == false )  {^[CLASS] MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] int  value  Object  obj  boolean  
[BugLab_Wrong_Literal]^return true;^415^^^^^413^418^return false;^[CLASS] MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] int  value  Object  obj  boolean  
[BugLab_Wrong_Operator]^return  (  ( MutableInteger )  obj ) .value <= value;^417^^^^^413^418^return  (  ( MutableInteger )  obj ) .value == value;^[CLASS] MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] int  value  Object  obj  boolean  
