[buglab_swap_variables]^this.entryIterator = parent.map.map.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^this.entryIterator = parent.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^this.mods = parent.modCount.modCount;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^this.mods = parent;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final MutableInteger count = object.get ( map ) ;^110^^^^^109^115^final MutableInteger count = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^return count.value.value;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^return count;^112^^^^^109^115^return count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] getCount [RETURN_TYPE] int   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  count  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^return object.containsKey ( map ) ;^126^^^^^125^127^return map.containsKey ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] contains [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  Object  object  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( getCount ( other )  < current.getCount ( current )  )  {^153^^^^^149^158^if  ( getCount ( current )  < other.getCount ( current )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] containsAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Bag  other  Object  current  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^return entryIterator > 0 || itemCount.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( parent != mods )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mods.modCount != parent )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mods != parent.modCount )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mods != parent.modCount )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( parent.modCount.modCount != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mods.modCount != parent )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mut.value.value > 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mut > 1 )  {^223^^^^^215^230^if  ( mut.value > 1 )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^map.put ( nCopies, new MutableInteger ( object )  ) ;^257^^^^^251^264^map.put ( object, new MutableInteger ( nCopies )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^map.put (  new MutableInteger ( nCopies )  ) ;^257^^^^^251^264^map.put ( object, new MutableInteger ( nCopies )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final MutableInteger mut = object.get ( map ) ;^254^^^^^251^264^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] add [RETURN_TYPE] boolean   final E object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  canRemove  E  object  MutableInteger  mut  Iterator  entryIterator  it  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^changed = added || changed;^277^^^^^272^280^changed = changed || added;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final MutableInteger mut = object.get ( map ) ;^299^^^^^298^307^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^size -= mut.value.value;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^size -= mut;^305^^^^^298^307^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final MutableInteger mut = object.get ( map ) ;^317^^^^^316^333^final MutableInteger mut = map.get ( object ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( mut < nCopies.value )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( nCopies < mut )  {^325^^^^^316^333^if  ( nCopies < mut.value )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^size -= mut.value.value;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^size -= mut;^330^^^^^316^333^size -= mut.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] remove [RETURN_TYPE] boolean   Object object final int nCopies [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  MutableInteger  mut  Iterator  entryIterator  i  it  Object  object  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^result = changed || result;^348^^^^^342^352^result = result || changed;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  Iterator  entryIterator  i  it  Collection  coll  Map  map  int  itemCount  modCount  mods  nCopies  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( 1 <= myCount && otherCount <= otherCount )  {^384^^^^^376^394^if  ( 1 <= otherCount && otherCount <= myCount )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( myCount, current ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add (  myCount ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( current ) ;^387^^^^^376^394^excess.add ( current, myCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( myCount, current - otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add (  myCount - otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( current, otherCount - myCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( current - otherCount ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final int currentCount = other.getCount ( other ) ;^383^^^^^376^394^final int otherCount = other.getCount ( current ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^excess.add ( otherCount, myCount - current ) ;^385^^^^^376^394^excess.add ( current, myCount - otherCount ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] retainAll [RETURN_TYPE] boolean   Bag<?> other [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Bag  excess  other  Map  map  int  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^for  ( int current = getCount ( index ) ; index > 0; index-- )  {^438^^^^^432^443^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] Object[]   [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  E  current  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  Object[]  result  
[buglab_swap_variables]^if  ( array.length.length < size )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^if  ( size < array.length )  {^459^^^^^457^480^if  ( array.length < size )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final T[] unchecked =  ( T[] )  Array.newInstance ( size.getClass (  ) .getComponentType (  ) , array ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  )  ) ;^461^^^^^457^480^final T[] unchecked =  ( T[] )  Array.newInstance ( array.getClass (  ) .getComponentType (  ) , size ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^for  ( int current = getCount ( index ) ; index > 0; index-- )  {^469^^^^^457^480^for  ( int index = getCount ( current ) ; index > 0; index-- )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^while  ( array.length < i )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^while  ( i < array.length.length )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^while  ( i < array )  {^476^^^^^457^480^while  ( i < array.length )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] Entry  current  Set  uniqueSet  boolean  added  canRemove  changed  result  T  unchecked  E  current  T[]  array  unchecked  Iterator  entryIterator  i  it  Map  map  int  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^for  ( entrySizent i = 0; i < i; i++ )  {^520^^^^^516^527^for  ( int i = 0; i < entrySize; i++ )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[buglab_swap_variables]^map.put (  new MutableInteger ( count )  ) ;^524^^^^^516^527^map.put ( obj, new MutableInteger ( count )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[buglab_swap_variables]^map.put ( count, new MutableInteger ( obj )  ) ;^524^^^^^516^527^map.put ( obj, new MutableInteger ( count )  ) ;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] doReadObject [RETURN_TYPE] void   MutableInteger> map ObjectInputStream in [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  obj  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  ObjectInputStream  in  
[buglab_swap_variables]^if  ( element.getCount ( other )  != getCount ( element )  )  {^550^^^^^538^555^if  ( other.getCount ( element )  != getCount ( element )  )  {^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  Iterator  entryIterator  i  it  Bag  other  Object  object  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  value  AbstractMapBag  parent  
[buglab_swap_variables]^total +=  ( count.value == null ? 0 : element.hashCode (  )  )  ^ element;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[buglab_swap_variables]^total +=  ( count == null ? 0 : element.hashCode (  )  )  ^ element.value;^572^^^^^567^575^total +=  ( element == null ? 0 : element.hashCode (  )  )  ^ count.value;^[CLASS] AbstractMapBag BagIterator MutableInteger  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Entry  current  entry  Set  uniqueSet  boolean  added  canRemove  changed  result  E  element  MutableInteger  count  Iterator  entryIterator  i  it  Map  map  int  count  entrySize  i  index  itemCount  modCount  mods  myCount  nCopies  otherCount  size  total  value  AbstractMapBag  parent  
[buglab_swap_variables]^this.entryIterator = parent.map.map.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^this.entryIterator = parent.entrySet (  ) .iterator (  ) ;^189^^^^^187^193^this.entryIterator = parent.map.entrySet (  ) .iterator (  ) ;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^this.mods = parent.modCount.modCount;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^this.mods = parent;^191^^^^^187^193^this.mods = parent.modCount;^[CLASS] BagIterator  [METHOD] <init> [RETURN_TYPE] AbstractMapBag)   AbstractMapBag<E> parent [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^return entryIterator > 0 || itemCount.hasNext (  ) ;^197^^^^^196^198^return itemCount > 0 || entryIterator.hasNext (  ) ;^[CLASS] BagIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^if  ( mods != parent.modCount )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^if  ( mods.modCount != parent )  {^202^^^^^201^212^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  
[buglab_swap_variables]^if  ( mods != parent.modCount )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
[buglab_swap_variables]^if  ( parent.modCount.modCount != mods )  {^216^^^^^215^230^if  ( parent.modCount != mods )  {^[CLASS] BagIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  entryIterator  Entry  current  boolean  canRemove  AbstractMapBag  parent  int  itemCount  mods  MutableInteger  mut  
